
inzynierka_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00004446  000044da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004446  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800142  00800142  0000451c  2**0
                  ALLOC
  3 .stab         00004a94  00000000  00000000  0000451c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019f9  00000000  00000000  00008fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  0000a9a9  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e4       	ldi	r30, 0x46	; 70
      7c:	f4 e4       	ldi	r31, 0x44	; 68
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 34       	cpi	r26, 0x42	; 66
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e4       	ldi	r26, 0x42	; 66
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 35       	cpi	r26, 0x58	; 88
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <main>
      9e:	0c 94 21 22 	jmp	0x4442	; 0x4442 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_write_nibble>:
#include <avr/io.h>
#include <util/delay.h>
#include "PCF8574.h"
#include "HD44780.h"

static void lcd_write_nibble(HD44780 *device, uint8_t data){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <lcd_write_nibble+0x6>
      ac:	00 d0       	rcall	.+0      	; 0xae <lcd_write_nibble+0x8>
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	9b 83       	std	Y+3, r25	; 0x03
      b4:	8a 83       	std	Y+2, r24	; 0x02
      b6:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  for(i = 0; i < 4; i++){
      b8:	19 82       	std	Y+1, r1	; 0x01
      ba:	2a c0       	rjmp	.+84     	; 0x110 <lcd_write_nibble+0x6a>
    if(((data >> i) & 1) == 1){
      bc:	8c 81       	ldd	r24, Y+4	; 0x04
      be:	88 2f       	mov	r24, r24
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	29 81       	ldd	r18, Y+1	; 0x01
      c4:	22 2f       	mov	r18, r18
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	02 2e       	mov	r0, r18
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <lcd_write_nibble+0x2a>
      cc:	95 95       	asr	r25
      ce:	87 95       	ror	r24
      d0:	0a 94       	dec	r0
      d2:	e2 f7       	brpl	.-8      	; 0xcc <lcd_write_nibble+0x26>
      d4:	81 70       	andi	r24, 0x01	; 1
      d6:	99 27       	eor	r25, r25
      d8:	00 97       	sbiw	r24, 0x00	; 0
      da:	61 f0       	breq	.+24     	; 0xf4 <lcd_write_nibble+0x4e>
      pcf8574_pin_on(device->controller, HD44780_DATA + i);
      dc:	89 81       	ldd	r24, Y+1	; 0x01
      de:	24 e0       	ldi	r18, 0x04	; 4
      e0:	28 0f       	add	r18, r24
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	9b 81       	ldd	r25, Y+3	; 0x03
      e6:	fc 01       	movw	r30, r24
      e8:	80 81       	ld	r24, Z
      ea:	91 81       	ldd	r25, Z+1	; 0x01
      ec:	62 2f       	mov	r22, r18
      ee:	0e 94 16 05 	call	0xa2c	; 0xa2c <pcf8574_pin_on>
      f2:	0b c0       	rjmp	.+22     	; 0x10a <lcd_write_nibble+0x64>
    } else {
      pcf8574_pin_off(device->controller, HD44780_DATA + i);
      f4:	89 81       	ldd	r24, Y+1	; 0x01
      f6:	24 e0       	ldi	r18, 0x04	; 4
      f8:	28 0f       	add	r18, r24
      fa:	8a 81       	ldd	r24, Y+2	; 0x02
      fc:	9b 81       	ldd	r25, Y+3	; 0x03
      fe:	fc 01       	movw	r30, r24
     100:	80 81       	ld	r24, Z
     102:	91 81       	ldd	r25, Z+1	; 0x01
     104:	62 2f       	mov	r22, r18
     106:	0e 94 3b 05 	call	0xa76	; 0xa76 <pcf8574_pin_off>
#include "HD44780.h"

static void lcd_write_nibble(HD44780 *device, uint8_t data){
  uint8_t i;

  for(i = 0; i < 4; i++){
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	8f 5f       	subi	r24, 0xFF	; 255
     10e:	89 83       	std	Y+1, r24	; 0x01
     110:	89 81       	ldd	r24, Y+1	; 0x01
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	98 f2       	brcs	.-90     	; 0xbc <lcd_write_nibble+0x16>
      pcf8574_pin_on(device->controller, HD44780_DATA + i);
    } else {
      pcf8574_pin_off(device->controller, HD44780_DATA + i);
    }
  }
}
     116:	0f 90       	pop	r0
     118:	0f 90       	pop	r0
     11a:	0f 90       	pop	r0
     11c:	0f 90       	pop	r0
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <lcd_write>:

static void lcd_write(HD44780 *device, uint8_t data){
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	00 d0       	rcall	.+0      	; 0x12a <lcd_write+0x6>
     12a:	1f 92       	push	r1
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	9a 83       	std	Y+2, r25	; 0x02
     132:	89 83       	std	Y+1, r24	; 0x01
     134:	6b 83       	std	Y+3, r22	; 0x03
  lcd_write_nibble(device, data >> 4);
     136:	8b 81       	ldd	r24, Y+3	; 0x03
     138:	28 2f       	mov	r18, r24
     13a:	22 95       	swap	r18
     13c:	2f 70       	andi	r18, 0x0F	; 15
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	9a 81       	ldd	r25, Y+2	; 0x02
     142:	62 2f       	mov	r22, r18
     144:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_nibble>
  pcf8574_pin_blink(device->controller, HD44780_E);
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	9a 81       	ldd	r25, Y+2	; 0x02
     14c:	fc 01       	movw	r30, r24
     14e:	80 81       	ld	r24, Z
     150:	91 81       	ldd	r25, Z+1	; 0x01
     152:	62 e0       	ldi	r22, 0x02	; 2
     154:	0e 94 86 05 	call	0xb0c	; 0xb0c <pcf8574_pin_blink>

  lcd_write_nibble(device, data);
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	9a 81       	ldd	r25, Y+2	; 0x02
     15c:	6b 81       	ldd	r22, Y+3	; 0x03
     15e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_nibble>
  pcf8574_pin_blink(device->controller, HD44780_E);
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	9a 81       	ldd	r25, Y+2	; 0x02
     166:	fc 01       	movw	r30, r24
     168:	80 81       	ld	r24, Z
     16a:	91 81       	ldd	r25, Z+1	; 0x01
     16c:	62 e0       	ldi	r22, 0x02	; 2
     16e:	0e 94 86 05 	call	0xb0c	; 0xb0c <pcf8574_pin_blink>

}
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <lcd_write_command>:

static void lcd_write_command(HD44780 *device, uint8_t data){
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	00 d0       	rcall	.+0      	; 0x184 <lcd_write_command+0x6>
     184:	1f 92       	push	r1
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
     18a:	9a 83       	std	Y+2, r25	; 0x02
     18c:	89 83       	std	Y+1, r24	; 0x01
     18e:	6b 83       	std	Y+3, r22	; 0x03
  pcf8574_pin_off(device->controller, HD44780_RS);
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	fc 01       	movw	r30, r24
     196:	80 81       	ld	r24, Z
     198:	91 81       	ldd	r25, Z+1	; 0x01
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	0e 94 3b 05 	call	0xa76	; 0xa76 <pcf8574_pin_off>
  lcd_write(device, data);
     1a0:	89 81       	ldd	r24, Y+1	; 0x01
     1a2:	9a 81       	ldd	r25, Y+2	; 0x02
     1a4:	6b 81       	ldd	r22, Y+3	; 0x03
     1a6:	0e 94 92 00 	call	0x124	; 0x124 <lcd_write>
}
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <lcd_write_data>:

static void lcd_write_data(HD44780 *device, uint8_t data){
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	00 d0       	rcall	.+0      	; 0x1bc <lcd_write_data+0x6>
     1bc:	1f 92       	push	r1
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
     1c2:	9a 83       	std	Y+2, r25	; 0x02
     1c4:	89 83       	std	Y+1, r24	; 0x01
     1c6:	6b 83       	std	Y+3, r22	; 0x03
  pcf8574_pin_on(device->controller, HD44780_RS);
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	9a 81       	ldd	r25, Y+2	; 0x02
     1cc:	fc 01       	movw	r30, r24
     1ce:	80 81       	ld	r24, Z
     1d0:	91 81       	ldd	r25, Z+1	; 0x01
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	0e 94 16 05 	call	0xa2c	; 0xa2c <pcf8574_pin_on>
  lcd_write(device, data);
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	6b 81       	ldd	r22, Y+3	; 0x03
     1de:	0e 94 92 00 	call	0x124	; 0x124 <lcd_write>
}
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <lcd_set_char>:

void lcd_set_char(HD44780 *device, uint8_t index, uint8_t *data){
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <lcd_set_char+0x6>
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <lcd_set_char+0x8>
     1f6:	00 d0       	rcall	.+0      	; 0x1f8 <lcd_set_char+0xa>
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	9b 83       	std	Y+3, r25	; 0x03
     1fe:	8a 83       	std	Y+2, r24	; 0x02
     200:	6c 83       	std	Y+4, r22	; 0x04
     202:	5e 83       	std	Y+6, r21	; 0x06
     204:	4d 83       	std	Y+5, r20	; 0x05
  if(index > 7) return;
     206:	8c 81       	ldd	r24, Y+4	; 0x04
     208:	88 30       	cpi	r24, 0x08	; 8
     20a:	08 f0       	brcs	.+2      	; 0x20e <lcd_set_char+0x20>
     20c:	21 c0       	rjmp	.+66     	; 0x250 <lcd_set_char+0x62>

  lcd_write_command(device, HD44780_CGRAM_SET | (index * 8));
     20e:	8c 81       	ldd	r24, Y+4	; 0x04
     210:	88 0f       	add	r24, r24
     212:	88 0f       	add	r24, r24
     214:	88 0f       	add	r24, r24
     216:	80 64       	ori	r24, 0x40	; 64
     218:	28 2f       	mov	r18, r24
     21a:	8a 81       	ldd	r24, Y+2	; 0x02
     21c:	9b 81       	ldd	r25, Y+3	; 0x03
     21e:	62 2f       	mov	r22, r18
     220:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_command>
  for(uint8_t i = 0; i < 8; i++){
     224:	19 82       	std	Y+1, r1	; 0x01
     226:	11 c0       	rjmp	.+34     	; 0x24a <lcd_set_char+0x5c>
    lcd_write_data(device, data[i]);
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	88 2f       	mov	r24, r24
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	2d 81       	ldd	r18, Y+5	; 0x05
     230:	3e 81       	ldd	r19, Y+6	; 0x06
     232:	82 0f       	add	r24, r18
     234:	93 1f       	adc	r25, r19
     236:	fc 01       	movw	r30, r24
     238:	20 81       	ld	r18, Z
     23a:	8a 81       	ldd	r24, Y+2	; 0x02
     23c:	9b 81       	ldd	r25, Y+3	; 0x03
     23e:	62 2f       	mov	r22, r18
     240:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_write_data>

void lcd_set_char(HD44780 *device, uint8_t index, uint8_t *data){
  if(index > 7) return;

  lcd_write_command(device, HD44780_CGRAM_SET | (index * 8));
  for(uint8_t i = 0; i < 8; i++){
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	8f 5f       	subi	r24, 0xFF	; 255
     248:	89 83       	std	Y+1, r24	; 0x01
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	88 30       	cpi	r24, 0x08	; 8
     24e:	60 f3       	brcs	.-40     	; 0x228 <lcd_set_char+0x3a>
    lcd_write_data(device, data[i]);
  }
}
     250:	26 96       	adiw	r28, 0x06	; 6
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	de bf       	out	0x3e, r29	; 62
     258:	0f be       	out	0x3f, r0	; 63
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <lcd_update>:

void lcd_update(HD44780 *device, uint8_t y, uint8_t x, char *data, uint8_t length){
     262:	0f 93       	push	r16
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	27 97       	sbiw	r28, 0x07	; 7
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	9a 83       	std	Y+2, r25	; 0x02
     27a:	89 83       	std	Y+1, r24	; 0x01
     27c:	6b 83       	std	Y+3, r22	; 0x03
     27e:	4c 83       	std	Y+4, r20	; 0x04
     280:	3e 83       	std	Y+6, r19	; 0x06
     282:	2d 83       	std	Y+5, r18	; 0x05
     284:	0f 83       	std	Y+7, r16	; 0x07
  if(length == 0){
     286:	8f 81       	ldd	r24, Y+7	; 0x07
     288:	88 23       	and	r24, r24
     28a:	29 f4       	brne	.+10     	; 0x296 <lcd_update+0x34>
    length = strlen(data);
     28c:	8d 81       	ldd	r24, Y+5	; 0x05
     28e:	9e 81       	ldd	r25, Y+6	; 0x06
     290:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <strlen>
     294:	8f 83       	std	Y+7, r24	; 0x07
  }
  memcpy(&device->buffer[y][x], data, length);
     296:	8f 81       	ldd	r24, Y+7	; 0x07
     298:	48 2f       	mov	r20, r24
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	8b 81       	ldd	r24, Y+3	; 0x03
     29e:	28 2f       	mov	r18, r24
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	8c 81       	ldd	r24, Y+4	; 0x04
     2a4:	88 2f       	mov	r24, r24
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	22 95       	swap	r18
     2aa:	32 95       	swap	r19
     2ac:	30 7f       	andi	r19, 0xF0	; 240
     2ae:	32 27       	eor	r19, r18
     2b0:	20 7f       	andi	r18, 0xF0	; 240
     2b2:	32 27       	eor	r19, r18
     2b4:	82 0f       	add	r24, r18
     2b6:	93 1f       	adc	r25, r19
     2b8:	02 96       	adiw	r24, 0x02	; 2
     2ba:	29 81       	ldd	r18, Y+1	; 0x01
     2bc:	3a 81       	ldd	r19, Y+2	; 0x02
     2be:	82 0f       	add	r24, r18
     2c0:	93 1f       	adc	r25, r19
     2c2:	2d 81       	ldd	r18, Y+5	; 0x05
     2c4:	3e 81       	ldd	r19, Y+6	; 0x06
     2c6:	b9 01       	movw	r22, r18
     2c8:	0e 94 c8 21 	call	0x4390	; 0x4390 <memcpy>
}
     2cc:	27 96       	adiw	r28, 0x07	; 7
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	f8 94       	cli
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	cd bf       	out	0x3d, r28	; 61
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	0f 91       	pop	r16
     2de:	08 95       	ret

000002e0 <lcd_refresh>:

void lcd_refresh(HD44780 *device){
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <lcd_refresh+0x6>
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <lcd_refresh+0x8>
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	9c 83       	std	Y+4, r25	; 0x04
     2ee:	8b 83       	std	Y+3, r24	; 0x03
  for(uint8_t y = 0; y < HD44780_LINES; y++){
     2f0:	19 82       	std	Y+1, r1	; 0x01
     2f2:	31 c0       	rjmp	.+98     	; 0x356 <lcd_refresh+0x76>
    lcd_write_command(device, HD44780_DDRAM_SET | (0x40 * y));
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	82 95       	swap	r24
     2f8:	88 0f       	add	r24, r24
     2fa:	88 0f       	add	r24, r24
     2fc:	80 7c       	andi	r24, 0xC0	; 192
     2fe:	80 68       	ori	r24, 0x80	; 128
     300:	28 2f       	mov	r18, r24
     302:	8b 81       	ldd	r24, Y+3	; 0x03
     304:	9c 81       	ldd	r25, Y+4	; 0x04
     306:	62 2f       	mov	r22, r18
     308:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_command>
    for(uint8_t x = 0; x < HD44780_CHARS; x++){
     30c:	1a 82       	std	Y+2, r1	; 0x02
     30e:	1d c0       	rjmp	.+58     	; 0x34a <lcd_refresh+0x6a>
      lcd_write_data(device, device->buffer[y][x]);
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	28 2f       	mov	r18, r24
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	8a 81       	ldd	r24, Y+2	; 0x02
     318:	88 2f       	mov	r24, r24
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	4b 81       	ldd	r20, Y+3	; 0x03
     31e:	5c 81       	ldd	r21, Y+4	; 0x04
     320:	22 95       	swap	r18
     322:	32 95       	swap	r19
     324:	30 7f       	andi	r19, 0xF0	; 240
     326:	32 27       	eor	r19, r18
     328:	20 7f       	andi	r18, 0xF0	; 240
     32a:	32 27       	eor	r19, r18
     32c:	24 0f       	add	r18, r20
     32e:	35 1f       	adc	r19, r21
     330:	82 0f       	add	r24, r18
     332:	93 1f       	adc	r25, r19
     334:	02 96       	adiw	r24, 0x02	; 2
     336:	fc 01       	movw	r30, r24
     338:	20 81       	ld	r18, Z
     33a:	8b 81       	ldd	r24, Y+3	; 0x03
     33c:	9c 81       	ldd	r25, Y+4	; 0x04
     33e:	62 2f       	mov	r22, r18
     340:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_write_data>
}

void lcd_refresh(HD44780 *device){
  for(uint8_t y = 0; y < HD44780_LINES; y++){
    lcd_write_command(device, HD44780_DDRAM_SET | (0x40 * y));
    for(uint8_t x = 0; x < HD44780_CHARS; x++){
     344:	8a 81       	ldd	r24, Y+2	; 0x02
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	8a 83       	std	Y+2, r24	; 0x02
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	80 31       	cpi	r24, 0x10	; 16
     34e:	00 f3       	brcs	.-64     	; 0x310 <lcd_refresh+0x30>
  }
  memcpy(&device->buffer[y][x], data, length);
}

void lcd_refresh(HD44780 *device){
  for(uint8_t y = 0; y < HD44780_LINES; y++){
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	8f 5f       	subi	r24, 0xFF	; 255
     354:	89 83       	std	Y+1, r24	; 0x01
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	82 30       	cpi	r24, 0x02	; 2
     35a:	60 f2       	brcs	.-104    	; 0x2f4 <lcd_refresh+0x14>
    lcd_write_command(device, HD44780_DDRAM_SET | (0x40 * y));
    for(uint8_t x = 0; x < HD44780_CHARS; x++){
      lcd_write_data(device, device->buffer[y][x]);
    }
  }
}
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <lcd_clear>:

void lcd_clear(HD44780 *device){
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	61 97       	sbiw	r28, 0x11	; 17
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	99 8b       	std	Y+17, r25	; 0x11
     380:	88 8b       	std	Y+16, r24	; 0x10
  for(uint8_t i = 0; i < HD44780_LINES; i++){
     382:	19 82       	std	Y+1, r1	; 0x01
     384:	17 c0       	rjmp	.+46     	; 0x3b4 <lcd_clear+0x4a>
    memset(device->buffer[i], 0x20, HD44780_CHARS);
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	88 2f       	mov	r24, r24
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	82 95       	swap	r24
     38e:	92 95       	swap	r25
     390:	90 7f       	andi	r25, 0xF0	; 240
     392:	98 27       	eor	r25, r24
     394:	80 7f       	andi	r24, 0xF0	; 240
     396:	98 27       	eor	r25, r24
     398:	02 96       	adiw	r24, 0x02	; 2
     39a:	28 89       	ldd	r18, Y+16	; 0x10
     39c:	39 89       	ldd	r19, Y+17	; 0x11
     39e:	82 0f       	add	r24, r18
     3a0:	93 1f       	adc	r25, r19
     3a2:	40 e1       	ldi	r20, 0x10	; 16
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	60 e2       	ldi	r22, 0x20	; 32
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <memset>
    }
  }
}

void lcd_clear(HD44780 *device){
  for(uint8_t i = 0; i < HD44780_LINES; i++){
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	8f 5f       	subi	r24, 0xFF	; 255
     3b2:	89 83       	std	Y+1, r24	; 0x01
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	82 30       	cpi	r24, 0x02	; 2
     3b8:	30 f3       	brcs	.-52     	; 0x386 <lcd_clear+0x1c>
    memset(device->buffer[i], 0x20, HD44780_CHARS);
  }
  lcd_write_command(device, HD44780_CLEAR);
     3ba:	88 89       	ldd	r24, Y+16	; 0x10
     3bc:	99 89       	ldd	r25, Y+17	; 0x11
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_command>
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e4       	ldi	r27, 0x40	; 64
     3cc:	8a 83       	std	Y+2, r24	; 0x02
     3ce:	9b 83       	std	Y+3, r25	; 0x03
     3d0:	ac 83       	std	Y+4, r26	; 0x04
     3d2:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	4a ef       	ldi	r20, 0xFA	; 250
     3da:	54 e4       	ldi	r21, 0x44	; 68
     3dc:	6a 81       	ldd	r22, Y+2	; 0x02
     3de:	7b 81       	ldd	r23, Y+3	; 0x03
     3e0:	8c 81       	ldd	r24, Y+4	; 0x04
     3e2:	9d 81       	ldd	r25, Y+5	; 0x05
     3e4:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
     3e8:	dc 01       	movw	r26, r24
     3ea:	cb 01       	movw	r24, r22
     3ec:	8e 83       	std	Y+6, r24	; 0x06
     3ee:	9f 83       	std	Y+7, r25	; 0x07
     3f0:	a8 87       	std	Y+8, r26	; 0x08
     3f2:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	40 e8       	ldi	r20, 0x80	; 128
     3fa:	5f e3       	ldi	r21, 0x3F	; 63
     3fc:	6e 81       	ldd	r22, Y+6	; 0x06
     3fe:	7f 81       	ldd	r23, Y+7	; 0x07
     400:	88 85       	ldd	r24, Y+8	; 0x08
     402:	99 85       	ldd	r25, Y+9	; 0x09
     404:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
     408:	88 23       	and	r24, r24
     40a:	2c f4       	brge	.+10     	; 0x416 <lcd_clear+0xac>
		__ticks = 1;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	9b 87       	std	Y+11, r25	; 0x0b
     412:	8a 87       	std	Y+10, r24	; 0x0a
     414:	3f c0       	rjmp	.+126    	; 0x494 <lcd_clear+0x12a>
	else if (__tmp > 65535)
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	3f ef       	ldi	r19, 0xFF	; 255
     41a:	4f e7       	ldi	r20, 0x7F	; 127
     41c:	57 e4       	ldi	r21, 0x47	; 71
     41e:	6e 81       	ldd	r22, Y+6	; 0x06
     420:	7f 81       	ldd	r23, Y+7	; 0x07
     422:	88 85       	ldd	r24, Y+8	; 0x08
     424:	99 85       	ldd	r25, Y+9	; 0x09
     426:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
     42a:	18 16       	cp	r1, r24
     42c:	4c f5       	brge	.+82     	; 0x480 <lcd_clear+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	40 e2       	ldi	r20, 0x20	; 32
     434:	51 e4       	ldi	r21, 0x41	; 65
     436:	6a 81       	ldd	r22, Y+2	; 0x02
     438:	7b 81       	ldd	r23, Y+3	; 0x03
     43a:	8c 81       	ldd	r24, Y+4	; 0x04
     43c:	9d 81       	ldd	r25, Y+5	; 0x05
     43e:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
     442:	dc 01       	movw	r26, r24
     444:	cb 01       	movw	r24, r22
     446:	bc 01       	movw	r22, r24
     448:	cd 01       	movw	r24, r26
     44a:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
     44e:	dc 01       	movw	r26, r24
     450:	cb 01       	movw	r24, r22
     452:	9b 87       	std	Y+11, r25	; 0x0b
     454:	8a 87       	std	Y+10, r24	; 0x0a
     456:	0f c0       	rjmp	.+30     	; 0x476 <lcd_clear+0x10c>
     458:	88 ec       	ldi	r24, 0xC8	; 200
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	9d 87       	std	Y+13, r25	; 0x0d
     45e:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     460:	8c 85       	ldd	r24, Y+12	; 0x0c
     462:	9d 85       	ldd	r25, Y+13	; 0x0d
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <lcd_clear+0xfa>
     468:	9d 87       	std	Y+13, r25	; 0x0d
     46a:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     46c:	8a 85       	ldd	r24, Y+10	; 0x0a
     46e:	9b 85       	ldd	r25, Y+11	; 0x0b
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	9b 87       	std	Y+11, r25	; 0x0b
     474:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     476:	8a 85       	ldd	r24, Y+10	; 0x0a
     478:	9b 85       	ldd	r25, Y+11	; 0x0b
     47a:	00 97       	sbiw	r24, 0x00	; 0
     47c:	69 f7       	brne	.-38     	; 0x458 <lcd_clear+0xee>
     47e:	14 c0       	rjmp	.+40     	; 0x4a8 <lcd_clear+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     480:	6e 81       	ldd	r22, Y+6	; 0x06
     482:	7f 81       	ldd	r23, Y+7	; 0x07
     484:	88 85       	ldd	r24, Y+8	; 0x08
     486:	99 85       	ldd	r25, Y+9	; 0x09
     488:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	9b 87       	std	Y+11, r25	; 0x0b
     492:	8a 87       	std	Y+10, r24	; 0x0a
     494:	8a 85       	ldd	r24, Y+10	; 0x0a
     496:	9b 85       	ldd	r25, Y+11	; 0x0b
     498:	9f 87       	std	Y+15, r25	; 0x0f
     49a:	8e 87       	std	Y+14, r24	; 0x0e
     49c:	8e 85       	ldd	r24, Y+14	; 0x0e
     49e:	9f 85       	ldd	r25, Y+15	; 0x0f
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <lcd_clear+0x136>
     4a4:	9f 87       	std	Y+15, r25	; 0x0f
     4a6:	8e 87       	std	Y+14, r24	; 0x0e
  _delay_ms(2);
}
     4a8:	61 96       	adiw	r28, 0x11	; 17
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <lcd_init>:

HD44780 *lcd_init(uint8_t addr){
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	a1 97       	sbiw	r28, 0x21	; 33
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	89 a3       	std	Y+33, r24	; 0x21
  HD44780 *device = (HD44780 *)malloc(sizeof(HD44780));
     4d0:	82 e2       	ldi	r24, 0x22	; 34
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 a1 20 	call	0x4142	; 0x4142 <malloc>
     4d8:	9c 83       	std	Y+4, r25	; 0x04
     4da:	8b 83       	std	Y+3, r24	; 0x03
  device->controller = pcf8574_init(addr);
     4dc:	89 a1       	ldd	r24, Y+33	; 0x21
     4de:	0e 94 da 03 	call	0x7b4	; 0x7b4 <pcf8574_init>
     4e2:	9c 01       	movw	r18, r24
     4e4:	8b 81       	ldd	r24, Y+3	; 0x03
     4e6:	9c 81       	ldd	r25, Y+4	; 0x04
     4e8:	fc 01       	movw	r30, r24
     4ea:	31 83       	std	Z+1, r19	; 0x01
     4ec:	20 83       	st	Z, r18

  for(uint8_t i = 0; i < HD44780_LINES; i++){
     4ee:	19 82       	std	Y+1, r1	; 0x01
     4f0:	17 c0       	rjmp	.+46     	; 0x520 <lcd_init+0x66>
    memset(device->buffer[i], 0x20, HD44780_CHARS);
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	82 95       	swap	r24
     4fa:	92 95       	swap	r25
     4fc:	90 7f       	andi	r25, 0xF0	; 240
     4fe:	98 27       	eor	r25, r24
     500:	80 7f       	andi	r24, 0xF0	; 240
     502:	98 27       	eor	r25, r24
     504:	02 96       	adiw	r24, 0x02	; 2
     506:	2b 81       	ldd	r18, Y+3	; 0x03
     508:	3c 81       	ldd	r19, Y+4	; 0x04
     50a:	82 0f       	add	r24, r18
     50c:	93 1f       	adc	r25, r19
     50e:	40 e1       	ldi	r20, 0x10	; 16
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	60 e2       	ldi	r22, 0x20	; 32
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <memset>

HD44780 *lcd_init(uint8_t addr){
  HD44780 *device = (HD44780 *)malloc(sizeof(HD44780));
  device->controller = pcf8574_init(addr);

  for(uint8_t i = 0; i < HD44780_LINES; i++){
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	8f 5f       	subi	r24, 0xFF	; 255
     51e:	89 83       	std	Y+1, r24	; 0x01
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	82 30       	cpi	r24, 0x02	; 2
     524:	30 f3       	brcs	.-52     	; 0x4f2 <lcd_init+0x38>
    memset(device->buffer[i], 0x20, HD44780_CHARS);
  }

  for(uint8_t i = 0; i < 3; i++) {
     526:	1a 82       	std	Y+2, r1	; 0x02
     528:	82 c0       	rjmp	.+260    	; 0x62e <lcd_init+0x174>
    lcd_write_nibble(device, 0x03);
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	9c 81       	ldd	r25, Y+4	; 0x04
     52e:	63 e0       	ldi	r22, 0x03	; 3
     530:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_nibble>
    pcf8574_pin_blink(device->controller, HD44780_E);
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	9c 81       	ldd	r25, Y+4	; 0x04
     538:	fc 01       	movw	r30, r24
     53a:	80 81       	ld	r24, Z
     53c:	91 81       	ldd	r25, Z+1	; 0x01
     53e:	62 e0       	ldi	r22, 0x02	; 2
     540:	0e 94 86 05 	call	0xb0c	; 0xb0c <pcf8574_pin_blink>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	a0 ea       	ldi	r26, 0xA0	; 160
     54a:	b0 e4       	ldi	r27, 0x40	; 64
     54c:	8d 83       	std	Y+5, r24	; 0x05
     54e:	9e 83       	std	Y+6, r25	; 0x06
     550:	af 83       	std	Y+7, r26	; 0x07
     552:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	4a ef       	ldi	r20, 0xFA	; 250
     55a:	54 e4       	ldi	r21, 0x44	; 68
     55c:	6d 81       	ldd	r22, Y+5	; 0x05
     55e:	7e 81       	ldd	r23, Y+6	; 0x06
     560:	8f 81       	ldd	r24, Y+7	; 0x07
     562:	98 85       	ldd	r25, Y+8	; 0x08
     564:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
     568:	dc 01       	movw	r26, r24
     56a:	cb 01       	movw	r24, r22
     56c:	89 87       	std	Y+9, r24	; 0x09
     56e:	9a 87       	std	Y+10, r25	; 0x0a
     570:	ab 87       	std	Y+11, r26	; 0x0b
     572:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	40 e8       	ldi	r20, 0x80	; 128
     57a:	5f e3       	ldi	r21, 0x3F	; 63
     57c:	69 85       	ldd	r22, Y+9	; 0x09
     57e:	7a 85       	ldd	r23, Y+10	; 0x0a
     580:	8b 85       	ldd	r24, Y+11	; 0x0b
     582:	9c 85       	ldd	r25, Y+12	; 0x0c
     584:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
     588:	88 23       	and	r24, r24
     58a:	2c f4       	brge	.+10     	; 0x596 <lcd_init+0xdc>
		__ticks = 1;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	9e 87       	std	Y+14, r25	; 0x0e
     592:	8d 87       	std	Y+13, r24	; 0x0d
     594:	3f c0       	rjmp	.+126    	; 0x614 <lcd_init+0x15a>
	else if (__tmp > 65535)
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	3f ef       	ldi	r19, 0xFF	; 255
     59a:	4f e7       	ldi	r20, 0x7F	; 127
     59c:	57 e4       	ldi	r21, 0x47	; 71
     59e:	69 85       	ldd	r22, Y+9	; 0x09
     5a0:	7a 85       	ldd	r23, Y+10	; 0x0a
     5a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     5a4:	9c 85       	ldd	r25, Y+12	; 0x0c
     5a6:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
     5aa:	18 16       	cp	r1, r24
     5ac:	4c f5       	brge	.+82     	; 0x600 <lcd_init+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	40 e2       	ldi	r20, 0x20	; 32
     5b4:	51 e4       	ldi	r21, 0x41	; 65
     5b6:	6d 81       	ldd	r22, Y+5	; 0x05
     5b8:	7e 81       	ldd	r23, Y+6	; 0x06
     5ba:	8f 81       	ldd	r24, Y+7	; 0x07
     5bc:	98 85       	ldd	r25, Y+8	; 0x08
     5be:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	bc 01       	movw	r22, r24
     5c8:	cd 01       	movw	r24, r26
     5ca:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
     5ce:	dc 01       	movw	r26, r24
     5d0:	cb 01       	movw	r24, r22
     5d2:	9e 87       	std	Y+14, r25	; 0x0e
     5d4:	8d 87       	std	Y+13, r24	; 0x0d
     5d6:	0f c0       	rjmp	.+30     	; 0x5f6 <lcd_init+0x13c>
     5d8:	88 ec       	ldi	r24, 0xC8	; 200
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	98 8b       	std	Y+16, r25	; 0x10
     5de:	8f 87       	std	Y+15, r24	; 0x0f
     5e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     5e2:	98 89       	ldd	r25, Y+16	; 0x10
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <lcd_init+0x12a>
     5e8:	98 8b       	std	Y+16, r25	; 0x10
     5ea:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ee:	9e 85       	ldd	r25, Y+14	; 0x0e
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	9e 87       	std	Y+14, r25	; 0x0e
     5f4:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f6:	8d 85       	ldd	r24, Y+13	; 0x0d
     5f8:	9e 85       	ldd	r25, Y+14	; 0x0e
     5fa:	00 97       	sbiw	r24, 0x00	; 0
     5fc:	69 f7       	brne	.-38     	; 0x5d8 <lcd_init+0x11e>
     5fe:	14 c0       	rjmp	.+40     	; 0x628 <lcd_init+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     600:	69 85       	ldd	r22, Y+9	; 0x09
     602:	7a 85       	ldd	r23, Y+10	; 0x0a
     604:	8b 85       	ldd	r24, Y+11	; 0x0b
     606:	9c 85       	ldd	r25, Y+12	; 0x0c
     608:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	9e 87       	std	Y+14, r25	; 0x0e
     612:	8d 87       	std	Y+13, r24	; 0x0d
     614:	8d 85       	ldd	r24, Y+13	; 0x0d
     616:	9e 85       	ldd	r25, Y+14	; 0x0e
     618:	9a 8b       	std	Y+18, r25	; 0x12
     61a:	89 8b       	std	Y+17, r24	; 0x11
     61c:	89 89       	ldd	r24, Y+17	; 0x11
     61e:	9a 89       	ldd	r25, Y+18	; 0x12
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <lcd_init+0x166>
     624:	9a 8b       	std	Y+18, r25	; 0x12
     626:	89 8b       	std	Y+17, r24	; 0x11

  for(uint8_t i = 0; i < HD44780_LINES; i++){
    memset(device->buffer[i], 0x20, HD44780_CHARS);
  }

  for(uint8_t i = 0; i < 3; i++) {
     628:	8a 81       	ldd	r24, Y+2	; 0x02
     62a:	8f 5f       	subi	r24, 0xFF	; 255
     62c:	8a 83       	std	Y+2, r24	; 0x02
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	83 30       	cpi	r24, 0x03	; 3
     632:	08 f4       	brcc	.+2      	; 0x636 <lcd_init+0x17c>
     634:	7a cf       	rjmp	.-268    	; 0x52a <lcd_init+0x70>
    lcd_write_nibble(device, 0x03);
    pcf8574_pin_blink(device->controller, HD44780_E);
    _delay_ms(5);
  }

  lcd_write_nibble(device, 0x02);
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	9c 81       	ldd	r25, Y+4	; 0x04
     63a:	62 e0       	ldi	r22, 0x02	; 2
     63c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_nibble>
  pcf8574_pin_blink(device->controller, HD44780_E);
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	9c 81       	ldd	r25, Y+4	; 0x04
     644:	fc 01       	movw	r30, r24
     646:	80 81       	ld	r24, Z
     648:	91 81       	ldd	r25, Z+1	; 0x01
     64a:	62 e0       	ldi	r22, 0x02	; 2
     64c:	0e 94 86 05 	call	0xb0c	; 0xb0c <pcf8574_pin_blink>
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	a0 e0       	ldi	r26, 0x00	; 0
     656:	b0 e4       	ldi	r27, 0x40	; 64
     658:	8b 8b       	std	Y+19, r24	; 0x13
     65a:	9c 8b       	std	Y+20, r25	; 0x14
     65c:	ad 8b       	std	Y+21, r26	; 0x15
     65e:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	4a ef       	ldi	r20, 0xFA	; 250
     666:	54 e4       	ldi	r21, 0x44	; 68
     668:	6b 89       	ldd	r22, Y+19	; 0x13
     66a:	7c 89       	ldd	r23, Y+20	; 0x14
     66c:	8d 89       	ldd	r24, Y+21	; 0x15
     66e:	9e 89       	ldd	r25, Y+22	; 0x16
     670:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	8f 8b       	std	Y+23, r24	; 0x17
     67a:	98 8f       	std	Y+24, r25	; 0x18
     67c:	a9 8f       	std	Y+25, r26	; 0x19
     67e:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e8       	ldi	r20, 0x80	; 128
     686:	5f e3       	ldi	r21, 0x3F	; 63
     688:	6f 89       	ldd	r22, Y+23	; 0x17
     68a:	78 8d       	ldd	r23, Y+24	; 0x18
     68c:	89 8d       	ldd	r24, Y+25	; 0x19
     68e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     690:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
     694:	88 23       	and	r24, r24
     696:	2c f4       	brge	.+10     	; 0x6a2 <lcd_init+0x1e8>
		__ticks = 1;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	9c 8f       	std	Y+28, r25	; 0x1c
     69e:	8b 8f       	std	Y+27, r24	; 0x1b
     6a0:	3f c0       	rjmp	.+126    	; 0x720 <lcd_init+0x266>
	else if (__tmp > 65535)
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	3f ef       	ldi	r19, 0xFF	; 255
     6a6:	4f e7       	ldi	r20, 0x7F	; 127
     6a8:	57 e4       	ldi	r21, 0x47	; 71
     6aa:	6f 89       	ldd	r22, Y+23	; 0x17
     6ac:	78 8d       	ldd	r23, Y+24	; 0x18
     6ae:	89 8d       	ldd	r24, Y+25	; 0x19
     6b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6b2:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
     6b6:	18 16       	cp	r1, r24
     6b8:	4c f5       	brge	.+82     	; 0x70c <lcd_init+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e2       	ldi	r20, 0x20	; 32
     6c0:	51 e4       	ldi	r21, 0x41	; 65
     6c2:	6b 89       	ldd	r22, Y+19	; 0x13
     6c4:	7c 89       	ldd	r23, Y+20	; 0x14
     6c6:	8d 89       	ldd	r24, Y+21	; 0x15
     6c8:	9e 89       	ldd	r25, Y+22	; 0x16
     6ca:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
     6d2:	bc 01       	movw	r22, r24
     6d4:	cd 01       	movw	r24, r26
     6d6:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
     6da:	dc 01       	movw	r26, r24
     6dc:	cb 01       	movw	r24, r22
     6de:	9c 8f       	std	Y+28, r25	; 0x1c
     6e0:	8b 8f       	std	Y+27, r24	; 0x1b
     6e2:	0f c0       	rjmp	.+30     	; 0x702 <lcd_init+0x248>
     6e4:	88 ec       	ldi	r24, 0xC8	; 200
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	9e 8f       	std	Y+30, r25	; 0x1e
     6ea:	8d 8f       	std	Y+29, r24	; 0x1d
     6ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     6ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <lcd_init+0x236>
     6f4:	9e 8f       	std	Y+30, r25	; 0x1e
     6f6:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	9c 8f       	std	Y+28, r25	; 0x1c
     700:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     702:	8b 8d       	ldd	r24, Y+27	; 0x1b
     704:	9c 8d       	ldd	r25, Y+28	; 0x1c
     706:	00 97       	sbiw	r24, 0x00	; 0
     708:	69 f7       	brne	.-38     	; 0x6e4 <lcd_init+0x22a>
     70a:	14 c0       	rjmp	.+40     	; 0x734 <lcd_init+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     70c:	6f 89       	ldd	r22, Y+23	; 0x17
     70e:	78 8d       	ldd	r23, Y+24	; 0x18
     710:	89 8d       	ldd	r24, Y+25	; 0x19
     712:	9a 8d       	ldd	r25, Y+26	; 0x1a
     714:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	9c 8f       	std	Y+28, r25	; 0x1c
     71e:	8b 8f       	std	Y+27, r24	; 0x1b
     720:	8b 8d       	ldd	r24, Y+27	; 0x1b
     722:	9c 8d       	ldd	r25, Y+28	; 0x1c
     724:	98 a3       	std	Y+32, r25	; 0x20
     726:	8f 8f       	std	Y+31, r24	; 0x1f
     728:	8f 8d       	ldd	r24, Y+31	; 0x1f
     72a:	98 a1       	ldd	r25, Y+32	; 0x20
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <lcd_init+0x272>
     730:	98 a3       	std	Y+32, r25	; 0x20
     732:	8f 8f       	std	Y+31, r24	; 0x1f
  _delay_ms(2);

  lcd_write_command(device, HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT);
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	9c 81       	ldd	r25, Y+4	; 0x04
     738:	68 e2       	ldi	r22, 0x28	; 40
     73a:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_command>
  lcd_write_command(device, HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF);
     73e:	8b 81       	ldd	r24, Y+3	; 0x03
     740:	9c 81       	ldd	r25, Y+4	; 0x04
     742:	68 e0       	ldi	r22, 0x08	; 8
     744:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_command>
  lcd_write_command(device, HD44780_CLEAR);
     748:	8b 81       	ldd	r24, Y+3	; 0x03
     74a:	9c 81       	ldd	r25, Y+4	; 0x04
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_command>
  lcd_write_command(device, HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
     752:	8b 81       	ldd	r24, Y+3	; 0x03
     754:	9c 81       	ldd	r25, Y+4	; 0x04
     756:	66 e0       	ldi	r22, 0x06	; 6
     758:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_command>
  lcd_write_command(device, HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
     75c:	8b 81       	ldd	r24, Y+3	; 0x03
     75e:	9c 81       	ldd	r25, Y+4	; 0x04
     760:	6c e0       	ldi	r22, 0x0C	; 12
     762:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_command>

  return device;
     766:	8b 81       	ldd	r24, Y+3	; 0x03
     768:	9c 81       	ldd	r25, Y+4	; 0x04
}
     76a:	a1 96       	adiw	r28, 0x21	; 33
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <lcd_free>:

void lcd_free(HD44780 *device){
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <lcd_free+0x6>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	9a 83       	std	Y+2, r25	; 0x02
     788:	89 83       	std	Y+1, r24	; 0x01
  pcf8574_free(device->controller);
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	9a 81       	ldd	r25, Y+2	; 0x02
     78e:	fc 01       	movw	r30, r24
     790:	80 81       	ld	r24, Z
     792:	91 81       	ldd	r25, Z+1	; 0x01
     794:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <pcf8574_free>
  free(device->buffer);
     798:	89 81       	ldd	r24, Y+1	; 0x01
     79a:	9a 81       	ldd	r25, Y+2	; 0x02
     79c:	02 96       	adiw	r24, 0x02	; 2
     79e:	0e 94 39 21 	call	0x4272	; 0x4272 <free>
  free(device);
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	0e 94 39 21 	call	0x4272	; 0x4272 <free>
}
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <pcf8574_init>:
#include <stdint.h>
#include <util/delay.h>

#include "PCF8574.h"

PCF8574 *pcf8574_init(uint8_t addr){
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <pcf8574_init+0x6>
     7ba:	1f 92       	push	r1
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	8b 83       	std	Y+3, r24	; 0x03
  PCF8574 *device = (PCF8574 *)malloc(sizeof(PCF8574));
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 a1 20 	call	0x4142	; 0x4142 <malloc>
     7ca:	9a 83       	std	Y+2, r25	; 0x02
     7cc:	89 83       	std	Y+1, r24	; 0x01

  device->addr = addr;
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	2b 81       	ldd	r18, Y+3	; 0x03
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 83       	st	Z, r18
  device->port = 0;
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	9a 81       	ldd	r25, Y+2	; 0x02
     7dc:	fc 01       	movw	r30, r24
     7de:	11 82       	std	Z+1, r1	; 0x01
  
  return device;
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <pcf8574_free>:

void pcf8574_free(PCF8574 *device){
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <pcf8574_free+0x6>
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	9a 83       	std	Y+2, r25	; 0x02
     7fc:	89 83       	std	Y+1, r24	; 0x01
  free(device);
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	9a 81       	ldd	r25, Y+2	; 0x02
     802:	0e 94 39 21 	call	0x4272	; 0x4272 <free>
}
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <pcf8574_port_read>:
  

uint8_t pcf8574_port_read(PCF8574 *device){
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	00 d0       	rcall	.+0      	; 0x816 <pcf8574_port_read+0x6>
     816:	1f 92       	push	r1
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	9b 83       	std	Y+3, r25	; 0x03
     81e:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t temp;
  
  i2c_start();
     820:	0e 94 1f 0a 	call	0x143e	; 0x143e <i2c_start>
  i2c_write((device->addr << 1) | PCF8574_READ);
     824:	8a 81       	ldd	r24, Y+2	; 0x02
     826:	9b 81       	ldd	r25, Y+3	; 0x03
     828:	fc 01       	movw	r30, r24
     82a:	80 81       	ld	r24, Z
     82c:	88 2f       	mov	r24, r24
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	81 60       	ori	r24, 0x01	; 1
     836:	0e 94 47 0a 	call	0x148e	; 0x148e <i2c_write>
  temp = i2c_read(ACK);
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <i2c_read>
     840:	89 83       	std	Y+1, r24	; 0x01
  i2c_stop();
     842:	0e 94 31 0a 	call	0x1462	; 0x1462 <i2c_stop>

  return temp;
     846:	89 81       	ldd	r24, Y+1	; 0x01
}
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <pcf8574_port_write>:

void pcf8574_port_write(PCF8574 *device, uint8_t state){
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	00 d0       	rcall	.+0      	; 0x85a <pcf8574_port_write+0x6>
     85a:	1f 92       	push	r1
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	9a 83       	std	Y+2, r25	; 0x02
     862:	89 83       	std	Y+1, r24	; 0x01
     864:	6b 83       	std	Y+3, r22	; 0x03
  device->port = state;
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	9a 81       	ldd	r25, Y+2	; 0x02
     86a:	2b 81       	ldd	r18, Y+3	; 0x03
     86c:	fc 01       	movw	r30, r24
     86e:	21 83       	std	Z+1, r18	; 0x01
  i2c_start();
     870:	0e 94 1f 0a 	call	0x143e	; 0x143e <i2c_start>
  i2c_write((device->addr << 1) | PCF8574_WRITE);
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	9a 81       	ldd	r25, Y+2	; 0x02
     878:	fc 01       	movw	r30, r24
     87a:	80 81       	ld	r24, Z
     87c:	88 0f       	add	r24, r24
     87e:	0e 94 47 0a 	call	0x148e	; 0x148e <i2c_write>
  i2c_write(device->port);
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	fc 01       	movw	r30, r24
     888:	81 81       	ldd	r24, Z+1	; 0x01
     88a:	0e 94 47 0a 	call	0x148e	; 0x148e <i2c_write>
  i2c_stop();
     88e:	0e 94 31 0a 	call	0x1462	; 0x1462 <i2c_stop>
}
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <pcf8574_port_toggle>:
    
void pcf8574_port_toggle(PCF8574 *device){
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <pcf8574_port_toggle+0x6>
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	9a 83       	std	Y+2, r25	; 0x02
     8aa:	89 83       	std	Y+1, r24	; 0x01
  pcf8574_port_write(device, (device->port ^ 0xFF));
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	9a 81       	ldd	r25, Y+2	; 0x02
     8b0:	fc 01       	movw	r30, r24
     8b2:	81 81       	ldd	r24, Z+1	; 0x01
     8b4:	28 2f       	mov	r18, r24
     8b6:	20 95       	com	r18
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	9a 81       	ldd	r25, Y+2	; 0x02
     8bc:	62 2f       	mov	r22, r18
     8be:	0e 94 2a 04 	call	0x854	; 0x854 <pcf8574_port_write>
}
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <pcf8574_port_blink>:

void pcf8574_port_blink(PCF8574 *device){
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	60 97       	sbiw	r28, 0x10	; 16
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	98 8b       	std	Y+16, r25	; 0x10
     8e2:	8f 87       	std	Y+15, r24	; 0x0f
  pcf8574_port_write(device, 0xFF);
     8e4:	8f 85       	ldd	r24, Y+15	; 0x0f
     8e6:	98 89       	ldd	r25, Y+16	; 0x10
     8e8:	6f ef       	ldi	r22, 0xFF	; 255
     8ea:	0e 94 2a 04 	call	0x854	; 0x854 <pcf8574_port_write>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	a0 e8       	ldi	r26, 0x80	; 128
     8f4:	bf e3       	ldi	r27, 0x3F	; 63
     8f6:	89 83       	std	Y+1, r24	; 0x01
     8f8:	9a 83       	std	Y+2, r25	; 0x02
     8fa:	ab 83       	std	Y+3, r26	; 0x03
     8fc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	4a ef       	ldi	r20, 0xFA	; 250
     904:	54 e4       	ldi	r21, 0x44	; 68
     906:	69 81       	ldd	r22, Y+1	; 0x01
     908:	7a 81       	ldd	r23, Y+2	; 0x02
     90a:	8b 81       	ldd	r24, Y+3	; 0x03
     90c:	9c 81       	ldd	r25, Y+4	; 0x04
     90e:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
     912:	dc 01       	movw	r26, r24
     914:	cb 01       	movw	r24, r22
     916:	8d 83       	std	Y+5, r24	; 0x05
     918:	9e 83       	std	Y+6, r25	; 0x06
     91a:	af 83       	std	Y+7, r26	; 0x07
     91c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e8       	ldi	r20, 0x80	; 128
     924:	5f e3       	ldi	r21, 0x3F	; 63
     926:	6d 81       	ldd	r22, Y+5	; 0x05
     928:	7e 81       	ldd	r23, Y+6	; 0x06
     92a:	8f 81       	ldd	r24, Y+7	; 0x07
     92c:	98 85       	ldd	r25, Y+8	; 0x08
     92e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
     932:	88 23       	and	r24, r24
     934:	2c f4       	brge	.+10     	; 0x940 <__stack+0x41>
		__ticks = 1;
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	9a 87       	std	Y+10, r25	; 0x0a
     93c:	89 87       	std	Y+9, r24	; 0x09
     93e:	3f c0       	rjmp	.+126    	; 0x9be <__stack+0xbf>
	else if (__tmp > 65535)
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	3f ef       	ldi	r19, 0xFF	; 255
     944:	4f e7       	ldi	r20, 0x7F	; 127
     946:	57 e4       	ldi	r21, 0x47	; 71
     948:	6d 81       	ldd	r22, Y+5	; 0x05
     94a:	7e 81       	ldd	r23, Y+6	; 0x06
     94c:	8f 81       	ldd	r24, Y+7	; 0x07
     94e:	98 85       	ldd	r25, Y+8	; 0x08
     950:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
     954:	18 16       	cp	r1, r24
     956:	4c f5       	brge	.+82     	; 0x9aa <__stack+0xab>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	40 e2       	ldi	r20, 0x20	; 32
     95e:	51 e4       	ldi	r21, 0x41	; 65
     960:	69 81       	ldd	r22, Y+1	; 0x01
     962:	7a 81       	ldd	r23, Y+2	; 0x02
     964:	8b 81       	ldd	r24, Y+3	; 0x03
     966:	9c 81       	ldd	r25, Y+4	; 0x04
     968:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
     96c:	dc 01       	movw	r26, r24
     96e:	cb 01       	movw	r24, r22
     970:	bc 01       	movw	r22, r24
     972:	cd 01       	movw	r24, r26
     974:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	9a 87       	std	Y+10, r25	; 0x0a
     97e:	89 87       	std	Y+9, r24	; 0x09
     980:	0f c0       	rjmp	.+30     	; 0x9a0 <__stack+0xa1>
     982:	88 ec       	ldi	r24, 0xC8	; 200
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	9c 87       	std	Y+12, r25	; 0x0c
     988:	8b 87       	std	Y+11, r24	; 0x0b
     98a:	8b 85       	ldd	r24, Y+11	; 0x0b
     98c:	9c 85       	ldd	r25, Y+12	; 0x0c
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <__stack+0x8f>
     992:	9c 87       	std	Y+12, r25	; 0x0c
     994:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     996:	89 85       	ldd	r24, Y+9	; 0x09
     998:	9a 85       	ldd	r25, Y+10	; 0x0a
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	9a 87       	std	Y+10, r25	; 0x0a
     99e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9a0:	89 85       	ldd	r24, Y+9	; 0x09
     9a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	69 f7       	brne	.-38     	; 0x982 <__stack+0x83>
     9a8:	14 c0       	rjmp	.+40     	; 0x9d2 <__stack+0xd3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9aa:	6d 81       	ldd	r22, Y+5	; 0x05
     9ac:	7e 81       	ldd	r23, Y+6	; 0x06
     9ae:	8f 81       	ldd	r24, Y+7	; 0x07
     9b0:	98 85       	ldd	r25, Y+8	; 0x08
     9b2:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	9a 87       	std	Y+10, r25	; 0x0a
     9bc:	89 87       	std	Y+9, r24	; 0x09
     9be:	89 85       	ldd	r24, Y+9	; 0x09
     9c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9c2:	9e 87       	std	Y+14, r25	; 0x0e
     9c4:	8d 87       	std	Y+13, r24	; 0x0d
     9c6:	8d 85       	ldd	r24, Y+13	; 0x0d
     9c8:	9e 85       	ldd	r25, Y+14	; 0x0e
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <__stack+0xcb>
     9ce:	9e 87       	std	Y+14, r25	; 0x0e
     9d0:	8d 87       	std	Y+13, r24	; 0x0d
  _delay_ms(1);
  pcf8574_port_write(device, 0x00);
     9d2:	8f 85       	ldd	r24, Y+15	; 0x0f
     9d4:	98 89       	ldd	r25, Y+16	; 0x10
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	0e 94 2a 04 	call	0x854	; 0x854 <pcf8574_port_write>
}
     9dc:	60 96       	adiw	r28, 0x10	; 16
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <pcf8574_pin_read>:


uint8_t pcf8574_pin_read(PCF8574 *device, uint8_t pin){
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <pcf8574_pin_read+0x6>
     9f4:	1f 92       	push	r1
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	9a 83       	std	Y+2, r25	; 0x02
     9fc:	89 83       	std	Y+1, r24	; 0x01
     9fe:	6b 83       	std	Y+3, r22	; 0x03
  return ((pcf8574_port_read(device) >> pin) & 1);
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	9a 81       	ldd	r25, Y+2	; 0x02
     a04:	0e 94 08 04 	call	0x810	; 0x810 <pcf8574_port_read>
     a08:	88 2f       	mov	r24, r24
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	2b 81       	ldd	r18, Y+3	; 0x03
     a0e:	22 2f       	mov	r18, r18
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	02 2e       	mov	r0, r18
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <pcf8574_pin_read+0x2c>
     a16:	95 95       	asr	r25
     a18:	87 95       	ror	r24
     a1a:	0a 94       	dec	r0
     a1c:	e2 f7       	brpl	.-8      	; 0xa16 <pcf8574_pin_read+0x28>
     a1e:	81 70       	andi	r24, 0x01	; 1
}
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <pcf8574_pin_on>:

void pcf8574_pin_on(PCF8574 *device, uint8_t pin){
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	00 d0       	rcall	.+0      	; 0xa32 <pcf8574_pin_on+0x6>
     a32:	1f 92       	push	r1
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	9a 83       	std	Y+2, r25	; 0x02
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	6b 83       	std	Y+3, r22	; 0x03
  pcf8574_port_write(device, (device->port | (1 << pin)));
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	9a 81       	ldd	r25, Y+2	; 0x02
     a42:	fc 01       	movw	r30, r24
     a44:	81 81       	ldd	r24, Z+1	; 0x01
     a46:	48 2f       	mov	r20, r24
     a48:	8b 81       	ldd	r24, Y+3	; 0x03
     a4a:	28 2f       	mov	r18, r24
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <pcf8574_pin_on+0x2c>
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	2a 95       	dec	r18
     a5a:	e2 f7       	brpl	.-8      	; 0xa54 <pcf8574_pin_on+0x28>
     a5c:	84 2b       	or	r24, r20
     a5e:	28 2f       	mov	r18, r24
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
     a64:	62 2f       	mov	r22, r18
     a66:	0e 94 2a 04 	call	0x854	; 0x854 <pcf8574_port_write>
}
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <pcf8574_pin_off>:

void pcf8574_pin_off(PCF8574 *device, uint8_t pin){
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <pcf8574_pin_off+0x6>
     a7c:	1f 92       	push	r1
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	9a 83       	std	Y+2, r25	; 0x02
     a84:	89 83       	std	Y+1, r24	; 0x01
     a86:	6b 83       	std	Y+3, r22	; 0x03
  pcf8574_port_write(device, (device->port & ~(1 << pin)));
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	9a 81       	ldd	r25, Y+2	; 0x02
     a8c:	fc 01       	movw	r30, r24
     a8e:	81 81       	ldd	r24, Z+1	; 0x01
     a90:	48 2f       	mov	r20, r24
     a92:	8b 81       	ldd	r24, Y+3	; 0x03
     a94:	28 2f       	mov	r18, r24
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <pcf8574_pin_off+0x2c>
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	2a 95       	dec	r18
     aa4:	e2 f7       	brpl	.-8      	; 0xa9e <pcf8574_pin_off+0x28>
     aa6:	80 95       	com	r24
     aa8:	84 23       	and	r24, r20
     aaa:	28 2f       	mov	r18, r24
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	9a 81       	ldd	r25, Y+2	; 0x02
     ab0:	62 2f       	mov	r22, r18
     ab2:	0e 94 2a 04 	call	0x854	; 0x854 <pcf8574_port_write>
}
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <pcf8574_pin_toggle>:
  
void pcf8574_pin_toggle(PCF8574 *device, uint8_t pin){
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	00 d0       	rcall	.+0      	; 0xac8 <pcf8574_pin_toggle+0x6>
     ac8:	1f 92       	push	r1
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
     ace:	9a 83       	std	Y+2, r25	; 0x02
     ad0:	89 83       	std	Y+1, r24	; 0x01
     ad2:	6b 83       	std	Y+3, r22	; 0x03
  pcf8574_port_write(device, (device->port ^ (1 << pin)));
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	9a 81       	ldd	r25, Y+2	; 0x02
     ad8:	fc 01       	movw	r30, r24
     ada:	81 81       	ldd	r24, Z+1	; 0x01
     adc:	48 2f       	mov	r20, r24
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	28 2f       	mov	r18, r24
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <pcf8574_pin_toggle+0x2c>
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	2a 95       	dec	r18
     af0:	e2 f7       	brpl	.-8      	; 0xaea <pcf8574_pin_toggle+0x28>
     af2:	84 27       	eor	r24, r20
     af4:	28 2f       	mov	r18, r24
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	62 2f       	mov	r22, r18
     afc:	0e 94 2a 04 	call	0x854	; 0x854 <pcf8574_port_write>
}
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	08 95       	ret

00000b0c <pcf8574_pin_blink>:

void pcf8574_pin_blink(PCF8574 *device, uint8_t pin){
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	61 97       	sbiw	r28, 0x11	; 17
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	98 8b       	std	Y+16, r25	; 0x10
     b22:	8f 87       	std	Y+15, r24	; 0x0f
     b24:	69 8b       	std	Y+17, r22	; 0x11
  pcf8574_pin_on(device, pin);
     b26:	8f 85       	ldd	r24, Y+15	; 0x0f
     b28:	98 89       	ldd	r25, Y+16	; 0x10
     b2a:	69 89       	ldd	r22, Y+17	; 0x11
     b2c:	0e 94 16 05 	call	0xa2c	; 0xa2c <pcf8574_pin_on>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e8       	ldi	r26, 0x80	; 128
     b36:	bf e3       	ldi	r27, 0x3F	; 63
     b38:	89 83       	std	Y+1, r24	; 0x01
     b3a:	9a 83       	std	Y+2, r25	; 0x02
     b3c:	ab 83       	std	Y+3, r26	; 0x03
     b3e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	4a ef       	ldi	r20, 0xFA	; 250
     b46:	54 e4       	ldi	r21, 0x44	; 68
     b48:	69 81       	ldd	r22, Y+1	; 0x01
     b4a:	7a 81       	ldd	r23, Y+2	; 0x02
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	9c 81       	ldd	r25, Y+4	; 0x04
     b50:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	8d 83       	std	Y+5, r24	; 0x05
     b5a:	9e 83       	std	Y+6, r25	; 0x06
     b5c:	af 83       	std	Y+7, r26	; 0x07
     b5e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	40 e8       	ldi	r20, 0x80	; 128
     b66:	5f e3       	ldi	r21, 0x3F	; 63
     b68:	6d 81       	ldd	r22, Y+5	; 0x05
     b6a:	7e 81       	ldd	r23, Y+6	; 0x06
     b6c:	8f 81       	ldd	r24, Y+7	; 0x07
     b6e:	98 85       	ldd	r25, Y+8	; 0x08
     b70:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
     b74:	88 23       	and	r24, r24
     b76:	2c f4       	brge	.+10     	; 0xb82 <pcf8574_pin_blink+0x76>
		__ticks = 1;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	9a 87       	std	Y+10, r25	; 0x0a
     b7e:	89 87       	std	Y+9, r24	; 0x09
     b80:	3f c0       	rjmp	.+126    	; 0xc00 <pcf8574_pin_blink+0xf4>
	else if (__tmp > 65535)
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	3f ef       	ldi	r19, 0xFF	; 255
     b86:	4f e7       	ldi	r20, 0x7F	; 127
     b88:	57 e4       	ldi	r21, 0x47	; 71
     b8a:	6d 81       	ldd	r22, Y+5	; 0x05
     b8c:	7e 81       	ldd	r23, Y+6	; 0x06
     b8e:	8f 81       	ldd	r24, Y+7	; 0x07
     b90:	98 85       	ldd	r25, Y+8	; 0x08
     b92:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
     b96:	18 16       	cp	r1, r24
     b98:	4c f5       	brge	.+82     	; 0xbec <pcf8574_pin_blink+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	40 e2       	ldi	r20, 0x20	; 32
     ba0:	51 e4       	ldi	r21, 0x41	; 65
     ba2:	69 81       	ldd	r22, Y+1	; 0x01
     ba4:	7a 81       	ldd	r23, Y+2	; 0x02
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	9c 81       	ldd	r25, Y+4	; 0x04
     baa:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	bc 01       	movw	r22, r24
     bb4:	cd 01       	movw	r24, r26
     bb6:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	9a 87       	std	Y+10, r25	; 0x0a
     bc0:	89 87       	std	Y+9, r24	; 0x09
     bc2:	0f c0       	rjmp	.+30     	; 0xbe2 <pcf8574_pin_blink+0xd6>
     bc4:	88 ec       	ldi	r24, 0xC8	; 200
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	8b 87       	std	Y+11, r24	; 0x0b
     bcc:	8b 85       	ldd	r24, Y+11	; 0x0b
     bce:	9c 85       	ldd	r25, Y+12	; 0x0c
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <pcf8574_pin_blink+0xc4>
     bd4:	9c 87       	std	Y+12, r25	; 0x0c
     bd6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	9a 87       	std	Y+10, r25	; 0x0a
     be0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     be2:	89 85       	ldd	r24, Y+9	; 0x09
     be4:	9a 85       	ldd	r25, Y+10	; 0x0a
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	69 f7       	brne	.-38     	; 0xbc4 <pcf8574_pin_blink+0xb8>
     bea:	14 c0       	rjmp	.+40     	; 0xc14 <pcf8574_pin_blink+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bec:	6d 81       	ldd	r22, Y+5	; 0x05
     bee:	7e 81       	ldd	r23, Y+6	; 0x06
     bf0:	8f 81       	ldd	r24, Y+7	; 0x07
     bf2:	98 85       	ldd	r25, Y+8	; 0x08
     bf4:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	9a 87       	std	Y+10, r25	; 0x0a
     bfe:	89 87       	std	Y+9, r24	; 0x09
     c00:	89 85       	ldd	r24, Y+9	; 0x09
     c02:	9a 85       	ldd	r25, Y+10	; 0x0a
     c04:	9e 87       	std	Y+14, r25	; 0x0e
     c06:	8d 87       	std	Y+13, r24	; 0x0d
     c08:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <pcf8574_pin_blink+0x100>
     c10:	9e 87       	std	Y+14, r25	; 0x0e
     c12:	8d 87       	std	Y+13, r24	; 0x0d
  _delay_ms(1);
  pcf8574_pin_off(device, pin);
     c14:	8f 85       	ldd	r24, Y+15	; 0x0f
     c16:	98 89       	ldd	r25, Y+16	; 0x10
     c18:	69 89       	ldd	r22, Y+17	; 0x11
     c1a:	0e 94 3b 05 	call	0xa76	; 0xa76 <pcf8574_pin_off>
}
     c1e:	61 96       	adiw	r28, 0x11	; 17
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <USART_Init>:
#include <avr/interrupt.h>
#include <util/delay.h>


void USART_Init()
{
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
	UBRR0L = 51;
     c38:	84 ec       	ldi	r24, 0xC4	; 196
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	23 e3       	ldi	r18, 0x33	; 51
     c3e:	fc 01       	movw	r30, r24
     c40:	20 83       	st	Z, r18
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     c42:	81 ec       	ldi	r24, 0xC1	; 193
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	28 e1       	ldi	r18, 0x18	; 24
     c48:	fc 01       	movw	r30, r24
     c4a:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     c4c:	82 ec       	ldi	r24, 0xC2	; 194
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	26 e0       	ldi	r18, 0x06	; 6
     c52:	fc 01       	movw	r30, r24
     c54:	20 83       	st	Z, r18
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <USART_Transmit>:


void USART_Transmit(unsigned char data)
{
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	1f 92       	push	r1
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR0A & (1<<UDRE0)) );
     c68:	00 00       	nop
     c6a:	80 ec       	ldi	r24, 0xC0	; 192
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	fc 01       	movw	r30, r24
     c70:	80 81       	ld	r24, Z
     c72:	88 2f       	mov	r24, r24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	80 72       	andi	r24, 0x20	; 32
     c78:	99 27       	eor	r25, r25
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	b1 f3       	breq	.-20     	; 0xc6a <USART_Transmit+0xe>
	UDR0 = data;
     c7e:	86 ec       	ldi	r24, 0xC6	; 198
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	29 81       	ldd	r18, Y+1	; 0x01
     c84:	fc 01       	movw	r30, r24
     c86:	20 83       	st	Z, r18
}
     c88:	0f 90       	pop	r0
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <USART_Transmit_String>:

void USART_Transmit_String(char *str)
{
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	00 d0       	rcall	.+0      	; 0xc96 <USART_Transmit_String+0x6>
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	9a 83       	std	Y+2, r25	; 0x02
     c9c:	89 83       	std	Y+1, r24	; 0x01
	while (*str) USART_Transmit(*str++);
     c9e:	0b c0       	rjmp	.+22     	; 0xcb6 <USART_Transmit_String+0x26>
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	9a 81       	ldd	r25, Y+2	; 0x02
     ca4:	9c 01       	movw	r18, r24
     ca6:	2f 5f       	subi	r18, 0xFF	; 255
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	3a 83       	std	Y+2, r19	; 0x02
     cac:	29 83       	std	Y+1, r18	; 0x01
     cae:	fc 01       	movw	r30, r24
     cb0:	80 81       	ld	r24, Z
     cb2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <USART_Transmit>
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	88 23       	and	r24, r24
     cc0:	79 f7       	brne	.-34     	; 0xca0 <USART_Transmit_String+0x10>
}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <USART_Transmit_Digit>:


void USART_Transmit_Digit(long int number)
{
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	29 97       	sbiw	r28, 0x09	; 9
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	6e 83       	std	Y+6, r22	; 0x06
     ce2:	7f 83       	std	Y+7, r23	; 0x07
     ce4:	88 87       	std	Y+8, r24	; 0x08
     ce6:	99 87       	std	Y+9, r25	; 0x09
	char buf[5];
	USART_Transmit_String(itoa(number,buf,10));
     ce8:	8e 81       	ldd	r24, Y+6	; 0x06
     cea:	9f 81       	ldd	r25, Y+7	; 0x07
     cec:	4a e0       	ldi	r20, 0x0A	; 10
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	9e 01       	movw	r18, r28
     cf2:	2f 5f       	subi	r18, 0xFF	; 255
     cf4:	3f 4f       	sbci	r19, 0xFF	; 255
     cf6:	b9 01       	movw	r22, r18
     cf8:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <itoa>
     cfc:	0e 94 48 06 	call	0xc90	; 0xc90 <USART_Transmit_String>
}
     d00:	29 96       	adiw	r28, 0x09	; 9
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <USART_Receive>:


unsigned char USART_Receive(void)
{
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
	while ( !(UCSR0A & (1<<RXC0)) );
     d1a:	00 00       	nop
     d1c:	80 ec       	ldi	r24, 0xC0	; 192
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	fc 01       	movw	r30, r24
     d22:	80 81       	ld	r24, Z
     d24:	88 23       	and	r24, r24
     d26:	d4 f7       	brge	.-12     	; 0xd1c <USART_Receive+0xa>
	return UDR0;
     d28:	86 ec       	ldi	r24, 0xC6	; 198
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	fc 01       	movw	r30, r24
     d2e:	80 81       	ld	r24, Z
}
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	08 95       	ret

00000d36 <ds18b20crc8>:
#include <ds18b20/ds18b20.h>
#include <ds18b20/onewire.h>

//! Calculate CRC of provided data
uint8_t ds18b20crc8( uint8_t *data, uint8_t length )
{
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	28 97       	sbiw	r28, 0x08	; 8
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	9f 83       	std	Y+7, r25	; 0x07
     d4c:	8e 83       	std	Y+6, r24	; 0x06
     d4e:	68 87       	std	Y+8, r22	; 0x08
	//Generate 8bit CRC for given data (Maxim/Dallas)

	uint8_t i = 0;
     d50:	19 82       	std	Y+1, r1	; 0x01
	uint8_t j = 0;
     d52:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t mix = 0;
     d54:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t crc = 0;
     d56:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t byte = 0;
     d58:	1c 82       	std	Y+4, r1	; 0x04

	for ( i = 0; i < length; i++ )
     d5a:	19 82       	std	Y+1, r1	; 0x01
     d5c:	27 c0       	rjmp	.+78     	; 0xdac <ds18b20crc8+0x76>
	{
		byte = data[i];
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	2e 81       	ldd	r18, Y+6	; 0x06
     d66:	3f 81       	ldd	r19, Y+7	; 0x07
     d68:	82 0f       	add	r24, r18
     d6a:	93 1f       	adc	r25, r19
     d6c:	fc 01       	movw	r30, r24
     d6e:	80 81       	ld	r24, Z
     d70:	8c 83       	std	Y+4, r24	; 0x04

		for( j = 0; j < 8; j++ )
     d72:	1a 82       	std	Y+2, r1	; 0x02
     d74:	15 c0       	rjmp	.+42     	; 0xda0 <ds18b20crc8+0x6a>
		{
			mix = ( crc ^ byte ) & 0x01;
     d76:	9b 81       	ldd	r25, Y+3	; 0x03
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	89 27       	eor	r24, r25
     d7c:	81 70       	andi	r24, 0x01	; 1
     d7e:	8d 83       	std	Y+5, r24	; 0x05
			crc >>= 1;
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	86 95       	lsr	r24
     d84:	8b 83       	std	Y+3, r24	; 0x03
			if ( mix ) crc ^= 0x8C;
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	88 23       	and	r24, r24
     d8a:	21 f0       	breq	.+8      	; 0xd94 <ds18b20crc8+0x5e>
     d8c:	9b 81       	ldd	r25, Y+3	; 0x03
     d8e:	8c e8       	ldi	r24, 0x8C	; 140
     d90:	89 27       	eor	r24, r25
     d92:	8b 83       	std	Y+3, r24	; 0x03
			byte >>= 1;
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	86 95       	lsr	r24
     d98:	8c 83       	std	Y+4, r24	; 0x04

	for ( i = 0; i < length; i++ )
	{
		byte = data[i];

		for( j = 0; j < 8; j++ )
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	8a 83       	std	Y+2, r24	; 0x02
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	88 30       	cpi	r24, 0x08	; 8
     da4:	40 f3       	brcs	.-48     	; 0xd76 <ds18b20crc8+0x40>
	uint8_t j = 0;
	uint8_t mix = 0;
	uint8_t crc = 0;
	uint8_t byte = 0;

	for ( i = 0; i < length; i++ )
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	8f 5f       	subi	r24, 0xFF	; 255
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	99 81       	ldd	r25, Y+1	; 0x01
     dae:	88 85       	ldd	r24, Y+8	; 0x08
     db0:	98 17       	cp	r25, r24
     db2:	a8 f2       	brcs	.-86     	; 0xd5e <ds18b20crc8+0x28>
			crc >>= 1;
			if ( mix ) crc ^= 0x8C;
			byte >>= 1;
		}
	}
	return crc;
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
}
     db6:	28 96       	adiw	r28, 0x08	; 8
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <ds18b20match>:

//! Perform ROM matching
void ds18b20match( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *rom )
{
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	2a 97       	sbiw	r28, 0x0a	; 10
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	9b 83       	std	Y+3, r25	; 0x03
     de2:	8a 83       	std	Y+2, r24	; 0x02
     de4:	7d 83       	std	Y+5, r23	; 0x05
     de6:	6c 83       	std	Y+4, r22	; 0x04
     de8:	5f 83       	std	Y+7, r21	; 0x07
     dea:	4e 83       	std	Y+6, r20	; 0x06
     dec:	28 87       	std	Y+8, r18	; 0x08
     dee:	1a 87       	std	Y+10, r17	; 0x0a
     df0:	09 87       	std	Y+9, r16	; 0x09
	//Perform ROM match operation on DS18B20 devices
	//Or skip ROM matching if ptr is NULL

	uint8_t i = 0;
     df2:	19 82       	std	Y+1, r1	; 0x01

	//If rom pointer is NULL then read temperature without matching.
	if ( rom == NULL )
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	59 f4       	brne	.+22     	; 0xe12 <ds18b20match+0x4a>
	{
		//Skip ROM
		onewireWrite( port, direction, portin, mask, DS18B20_COMMAND_SKIP_ROM );
     dfc:	4e 81       	ldd	r20, Y+6	; 0x06
     dfe:	5f 81       	ldd	r21, Y+7	; 0x07
     e00:	6c 81       	ldd	r22, Y+4	; 0x04
     e02:	7d 81       	ldd	r23, Y+5	; 0x05
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	0c ec       	ldi	r16, 0xCC	; 204
     e0a:	28 85       	ldd	r18, Y+8	; 0x08
     e0c:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <onewireWrite>
     e10:	25 c0       	rjmp	.+74     	; 0xe5c <ds18b20match+0x94>
	}
	else
	{
		//Match ROM
		onewireWrite( port, direction, portin, mask, DS18B20_COMMAND_MATCH_ROM );
     e12:	4e 81       	ldd	r20, Y+6	; 0x06
     e14:	5f 81       	ldd	r21, Y+7	; 0x07
     e16:	6c 81       	ldd	r22, Y+4	; 0x04
     e18:	7d 81       	ldd	r23, Y+5	; 0x05
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	9b 81       	ldd	r25, Y+3	; 0x03
     e1e:	05 e5       	ldi	r16, 0x55	; 85
     e20:	28 85       	ldd	r18, Y+8	; 0x08
     e22:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <onewireWrite>
		for ( i = 0; i < 8; i++ )
     e26:	19 82       	std	Y+1, r1	; 0x01
     e28:	16 c0       	rjmp	.+44     	; 0xe56 <ds18b20match+0x8e>
			onewireWrite( port, direction, portin, mask, rom[i] );
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	29 85       	ldd	r18, Y+9	; 0x09
     e32:	3a 85       	ldd	r19, Y+10	; 0x0a
     e34:	82 0f       	add	r24, r18
     e36:	93 1f       	adc	r25, r19
     e38:	fc 01       	movw	r30, r24
     e3a:	20 81       	ld	r18, Z
     e3c:	4e 81       	ldd	r20, Y+6	; 0x06
     e3e:	5f 81       	ldd	r21, Y+7	; 0x07
     e40:	6c 81       	ldd	r22, Y+4	; 0x04
     e42:	7d 81       	ldd	r23, Y+5	; 0x05
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	9b 81       	ldd	r25, Y+3	; 0x03
     e48:	02 2f       	mov	r16, r18
     e4a:	28 85       	ldd	r18, Y+8	; 0x08
     e4c:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <onewireWrite>
	}
	else
	{
		//Match ROM
		onewireWrite( port, direction, portin, mask, DS18B20_COMMAND_MATCH_ROM );
		for ( i = 0; i < 8; i++ )
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	8f 5f       	subi	r24, 0xFF	; 255
     e54:	89 83       	std	Y+1, r24	; 0x01
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 30       	cpi	r24, 0x08	; 8
     e5a:	38 f3       	brcs	.-50     	; 0xe2a <ds18b20match+0x62>
			onewireWrite( port, direction, portin, mask, rom[i] );
	}
}
     e5c:	2a 96       	adiw	r28, 0x0a	; 10
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	08 95       	ret

00000e72 <ds18b20convert>:

//! Request temperature conversion
uint8_t ds18b20convert( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *rom )
{
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	29 97       	sbiw	r28, 0x09	; 9
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
     e8e:	7c 83       	std	Y+4, r23	; 0x04
     e90:	6b 83       	std	Y+3, r22	; 0x03
     e92:	5e 83       	std	Y+6, r21	; 0x06
     e94:	4d 83       	std	Y+5, r20	; 0x05
     e96:	2f 83       	std	Y+7, r18	; 0x07
     e98:	19 87       	std	Y+9, r17	; 0x09
     e9a:	08 87       	std	Y+8, r16	; 0x08
	//Send conversion request to DS18B20 on one wire bus

	//Communication check
	if ( onewireInit( port, direction, portin, mask ) == ONEWIRE_ERROR_COMM )
     e9c:	4d 81       	ldd	r20, Y+5	; 0x05
     e9e:	5e 81       	ldd	r21, Y+6	; 0x06
     ea0:	6b 81       	ldd	r22, Y+3	; 0x03
     ea2:	7c 81       	ldd	r23, Y+4	; 0x04
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	9a 81       	ldd	r25, Y+2	; 0x02
     ea8:	2f 81       	ldd	r18, Y+7	; 0x07
     eaa:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <onewireInit>
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	11 f4       	brne	.+4      	; 0xeb6 <ds18b20convert+0x44>
		return DS18B20_ERROR_COMM;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	17 c0       	rjmp	.+46     	; 0xee4 <ds18b20convert+0x72>

	//ROM match (or not)
	ds18b20match( port, direction, portin, mask, rom );
     eb6:	28 85       	ldd	r18, Y+8	; 0x08
     eb8:	39 85       	ldd	r19, Y+9	; 0x09
     eba:	4d 81       	ldd	r20, Y+5	; 0x05
     ebc:	5e 81       	ldd	r21, Y+6	; 0x06
     ebe:	6b 81       	ldd	r22, Y+3	; 0x03
     ec0:	7c 81       	ldd	r23, Y+4	; 0x04
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	9a 81       	ldd	r25, Y+2	; 0x02
     ec6:	89 01       	movw	r16, r18
     ec8:	2f 81       	ldd	r18, Y+7	; 0x07
     eca:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ds18b20match>

	//Convert temperature
	onewireWrite( port, direction, portin, mask, DS18B20_COMMAND_CONVERT );
     ece:	4d 81       	ldd	r20, Y+5	; 0x05
     ed0:	5e 81       	ldd	r21, Y+6	; 0x06
     ed2:	6b 81       	ldd	r22, Y+3	; 0x03
     ed4:	7c 81       	ldd	r23, Y+4	; 0x04
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	04 e4       	ldi	r16, 0x44	; 68
     edc:	2f 81       	ldd	r18, Y+7	; 0x07
     ede:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <onewireWrite>

	return DS18B20_ERROR_OK;
     ee2:	80 e0       	ldi	r24, 0x00	; 0
}
     ee4:	29 96       	adiw	r28, 0x09	; 9
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	08 95       	ret

00000efa <ds18b20rsp>:

//! Read sensor scratchpad contents
uint8_t ds18b20rsp( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *rom, uint8_t *sp )
{
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	2c 97       	sbiw	r28, 0x0c	; 12
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	9b 83       	std	Y+3, r25	; 0x03
     f18:	8a 83       	std	Y+2, r24	; 0x02
     f1a:	7d 83       	std	Y+5, r23	; 0x05
     f1c:	6c 83       	std	Y+4, r22	; 0x04
     f1e:	5f 83       	std	Y+7, r21	; 0x07
     f20:	4e 83       	std	Y+6, r20	; 0x06
     f22:	28 87       	std	Y+8, r18	; 0x08
     f24:	1a 87       	std	Y+10, r17	; 0x0a
     f26:	09 87       	std	Y+9, r16	; 0x09
     f28:	fc 86       	std	Y+12, r15	; 0x0c
     f2a:	eb 86       	std	Y+11, r14	; 0x0b
	//Read DS18B20 scratchpad

	uint8_t i = 0;
     f2c:	19 82       	std	Y+1, r1	; 0x01

	//Communication check
	if ( onewireInit( port, direction, portin, mask ) == ONEWIRE_ERROR_COMM )
     f2e:	4e 81       	ldd	r20, Y+6	; 0x06
     f30:	5f 81       	ldd	r21, Y+7	; 0x07
     f32:	6c 81       	ldd	r22, Y+4	; 0x04
     f34:	7d 81       	ldd	r23, Y+5	; 0x05
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	9b 81       	ldd	r25, Y+3	; 0x03
     f3a:	28 85       	ldd	r18, Y+8	; 0x08
     f3c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <onewireInit>
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	11 f4       	brne	.+4      	; 0xf48 <ds18b20rsp+0x4e>
		return DS18B20_ERROR_COMM;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	73 c0       	rjmp	.+230    	; 0x102e <ds18b20rsp+0x134>

	//Match (or not) ROM
	ds18b20match( port, direction, portin, mask, rom );
     f48:	29 85       	ldd	r18, Y+9	; 0x09
     f4a:	3a 85       	ldd	r19, Y+10	; 0x0a
     f4c:	4e 81       	ldd	r20, Y+6	; 0x06
     f4e:	5f 81       	ldd	r21, Y+7	; 0x07
     f50:	6c 81       	ldd	r22, Y+4	; 0x04
     f52:	7d 81       	ldd	r23, Y+5	; 0x05
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	9b 81       	ldd	r25, Y+3	; 0x03
     f58:	89 01       	movw	r16, r18
     f5a:	28 85       	ldd	r18, Y+8	; 0x08
     f5c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ds18b20match>

	//Read scratchpad
	onewireWrite( port, direction, portin, mask, DS18B20_COMMAND_READ_SP );
     f60:	4e 81       	ldd	r20, Y+6	; 0x06
     f62:	5f 81       	ldd	r21, Y+7	; 0x07
     f64:	6c 81       	ldd	r22, Y+4	; 0x04
     f66:	7d 81       	ldd	r23, Y+5	; 0x05
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	0e eb       	ldi	r16, 0xBE	; 190
     f6e:	28 85       	ldd	r18, Y+8	; 0x08
     f70:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <onewireWrite>
	for ( i = 0; i < 9; i++ )
     f74:	19 82       	std	Y+1, r1	; 0x01
     f76:	16 c0       	rjmp	.+44     	; 0xfa4 <ds18b20rsp+0xaa>
		sp[i] = onewireRead( port, direction, portin, mask );
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	2b 85       	ldd	r18, Y+11	; 0x0b
     f80:	3c 85       	ldd	r19, Y+12	; 0x0c
     f82:	89 01       	movw	r16, r18
     f84:	08 0f       	add	r16, r24
     f86:	19 1f       	adc	r17, r25
     f88:	4e 81       	ldd	r20, Y+6	; 0x06
     f8a:	5f 81       	ldd	r21, Y+7	; 0x07
     f8c:	6c 81       	ldd	r22, Y+4	; 0x04
     f8e:	7d 81       	ldd	r23, Y+5	; 0x05
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	9b 81       	ldd	r25, Y+3	; 0x03
     f94:	28 85       	ldd	r18, Y+8	; 0x08
     f96:	0e 94 c9 1b 	call	0x3792	; 0x3792 <onewireRead>
     f9a:	f8 01       	movw	r30, r16
     f9c:	80 83       	st	Z, r24
	//Match (or not) ROM
	ds18b20match( port, direction, portin, mask, rom );

	//Read scratchpad
	onewireWrite( port, direction, portin, mask, DS18B20_COMMAND_READ_SP );
	for ( i = 0; i < 9; i++ )
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	8f 5f       	subi	r24, 0xFF	; 255
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	89 30       	cpi	r24, 0x09	; 9
     fa8:	38 f3       	brcs	.-50     	; 0xf78 <ds18b20rsp+0x7e>
		sp[i] = onewireRead( port, direction, portin, mask );

	//Check pull-up
	if ( ( sp[0] | sp[1] | sp[2] | sp[3] | sp[4] | sp[5] | sp[6] | sp[7] ) == 0 )
     faa:	8b 85       	ldd	r24, Y+11	; 0x0b
     fac:	9c 85       	ldd	r25, Y+12	; 0x0c
     fae:	fc 01       	movw	r30, r24
     fb0:	20 81       	ld	r18, Z
     fb2:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb4:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	fc 01       	movw	r30, r24
     fba:	80 81       	ld	r24, Z
     fbc:	28 2b       	or	r18, r24
     fbe:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc0:	9c 85       	ldd	r25, Y+12	; 0x0c
     fc2:	02 96       	adiw	r24, 0x02	; 2
     fc4:	fc 01       	movw	r30, r24
     fc6:	80 81       	ld	r24, Z
     fc8:	28 2b       	or	r18, r24
     fca:	8b 85       	ldd	r24, Y+11	; 0x0b
     fcc:	9c 85       	ldd	r25, Y+12	; 0x0c
     fce:	03 96       	adiw	r24, 0x03	; 3
     fd0:	fc 01       	movw	r30, r24
     fd2:	80 81       	ld	r24, Z
     fd4:	28 2b       	or	r18, r24
     fd6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fd8:	9c 85       	ldd	r25, Y+12	; 0x0c
     fda:	04 96       	adiw	r24, 0x04	; 4
     fdc:	fc 01       	movw	r30, r24
     fde:	80 81       	ld	r24, Z
     fe0:	28 2b       	or	r18, r24
     fe2:	8b 85       	ldd	r24, Y+11	; 0x0b
     fe4:	9c 85       	ldd	r25, Y+12	; 0x0c
     fe6:	05 96       	adiw	r24, 0x05	; 5
     fe8:	fc 01       	movw	r30, r24
     fea:	80 81       	ld	r24, Z
     fec:	28 2b       	or	r18, r24
     fee:	8b 85       	ldd	r24, Y+11	; 0x0b
     ff0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ff2:	06 96       	adiw	r24, 0x06	; 6
     ff4:	fc 01       	movw	r30, r24
     ff6:	80 81       	ld	r24, Z
     ff8:	28 2b       	or	r18, r24
     ffa:	8b 85       	ldd	r24, Y+11	; 0x0b
     ffc:	9c 85       	ldd	r25, Y+12	; 0x0c
     ffe:	07 96       	adiw	r24, 0x07	; 7
    1000:	fc 01       	movw	r30, r24
    1002:	80 81       	ld	r24, Z
    1004:	82 2b       	or	r24, r18
    1006:	88 23       	and	r24, r24
    1008:	11 f4       	brne	.+4      	; 0x100e <ds18b20rsp+0x114>
		return DS18B20_ERROR_PULL;
    100a:	83 e0       	ldi	r24, 0x03	; 3
    100c:	10 c0       	rjmp	.+32     	; 0x102e <ds18b20rsp+0x134>

	//CRC check
	if ( ds18b20crc8( sp, 8 ) != sp[8] )
    100e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1010:	9c 85       	ldd	r25, Y+12	; 0x0c
    1012:	68 e0       	ldi	r22, 0x08	; 8
    1014:	0e 94 9b 06 	call	0xd36	; 0xd36 <ds18b20crc8>
    1018:	28 2f       	mov	r18, r24
    101a:	8b 85       	ldd	r24, Y+11	; 0x0b
    101c:	9c 85       	ldd	r25, Y+12	; 0x0c
    101e:	08 96       	adiw	r24, 0x08	; 8
    1020:	fc 01       	movw	r30, r24
    1022:	80 81       	ld	r24, Z
    1024:	28 17       	cp	r18, r24
    1026:	11 f0       	breq	.+4      	; 0x102c <ds18b20rsp+0x132>
		return DS18B20_ERROR_CRC;
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	01 c0       	rjmp	.+2      	; 0x102e <ds18b20rsp+0x134>

	return DS18B20_ERROR_OK;
    102c:	80 e0       	ldi	r24, 0x00	; 0
}
    102e:	2c 96       	adiw	r28, 0x0c	; 12
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	08 95       	ret

00001048 <ds18b20wsp>:

//! Write sensor scratchpad
uint8_t ds18b20wsp( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *rom, uint8_t th, uint8_t tl, uint8_t conf )
{
    1048:	af 92       	push	r10
    104a:	cf 92       	push	r12
    104c:	ef 92       	push	r14
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	2c 97       	sbiw	r28, 0x0c	; 12
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	7c 83       	std	Y+4, r23	; 0x04
    106c:	6b 83       	std	Y+3, r22	; 0x03
    106e:	5e 83       	std	Y+6, r21	; 0x06
    1070:	4d 83       	std	Y+5, r20	; 0x05
    1072:	2f 83       	std	Y+7, r18	; 0x07
    1074:	19 87       	std	Y+9, r17	; 0x09
    1076:	08 87       	std	Y+8, r16	; 0x08
    1078:	ea 86       	std	Y+10, r14	; 0x0a
    107a:	cb 86       	std	Y+11, r12	; 0x0b
    107c:	ac 86       	std	Y+12, r10	; 0x0c
	//th - thermostat high temperature
	//tl - thermostat low temperature
	//conf - configuration byte

	//Communication check
	if ( onewireInit( port, direction, portin, mask ) == ONEWIRE_ERROR_COMM )
    107e:	4d 81       	ldd	r20, Y+5	; 0x05
    1080:	5e 81       	ldd	r21, Y+6	; 0x06
    1082:	6b 81       	ldd	r22, Y+3	; 0x03
    1084:	7c 81       	ldd	r23, Y+4	; 0x04
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	2f 81       	ldd	r18, Y+7	; 0x07
    108c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <onewireInit>
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	11 f4       	brne	.+4      	; 0x1098 <ds18b20wsp+0x50>
		return DS18B20_ERROR_COMM;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	35 c0       	rjmp	.+106    	; 0x1102 <ds18b20wsp+0xba>

	//ROM match (or not)
	ds18b20match( port, direction, portin, mask, rom );
    1098:	28 85       	ldd	r18, Y+8	; 0x08
    109a:	39 85       	ldd	r19, Y+9	; 0x09
    109c:	4d 81       	ldd	r20, Y+5	; 0x05
    109e:	5e 81       	ldd	r21, Y+6	; 0x06
    10a0:	6b 81       	ldd	r22, Y+3	; 0x03
    10a2:	7c 81       	ldd	r23, Y+4	; 0x04
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	89 01       	movw	r16, r18
    10aa:	2f 81       	ldd	r18, Y+7	; 0x07
    10ac:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ds18b20match>

	//Write scratchpad
	onewireWrite( port, direction, portin, mask, DS18B20_COMMAND_WRITE_SP );
    10b0:	4d 81       	ldd	r20, Y+5	; 0x05
    10b2:	5e 81       	ldd	r21, Y+6	; 0x06
    10b4:	6b 81       	ldd	r22, Y+3	; 0x03
    10b6:	7c 81       	ldd	r23, Y+4	; 0x04
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	0e e4       	ldi	r16, 0x4E	; 78
    10be:	2f 81       	ldd	r18, Y+7	; 0x07
    10c0:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <onewireWrite>
	onewireWrite( port, direction, portin, mask, th );
    10c4:	4d 81       	ldd	r20, Y+5	; 0x05
    10c6:	5e 81       	ldd	r21, Y+6	; 0x06
    10c8:	6b 81       	ldd	r22, Y+3	; 0x03
    10ca:	7c 81       	ldd	r23, Y+4	; 0x04
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	0a 85       	ldd	r16, Y+10	; 0x0a
    10d2:	2f 81       	ldd	r18, Y+7	; 0x07
    10d4:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <onewireWrite>
	onewireWrite( port, direction, portin, mask, tl );
    10d8:	4d 81       	ldd	r20, Y+5	; 0x05
    10da:	5e 81       	ldd	r21, Y+6	; 0x06
    10dc:	6b 81       	ldd	r22, Y+3	; 0x03
    10de:	7c 81       	ldd	r23, Y+4	; 0x04
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	0b 85       	ldd	r16, Y+11	; 0x0b
    10e6:	2f 81       	ldd	r18, Y+7	; 0x07
    10e8:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <onewireWrite>
	onewireWrite( port, direction, portin, mask, conf );
    10ec:	4d 81       	ldd	r20, Y+5	; 0x05
    10ee:	5e 81       	ldd	r21, Y+6	; 0x06
    10f0:	6b 81       	ldd	r22, Y+3	; 0x03
    10f2:	7c 81       	ldd	r23, Y+4	; 0x04
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	0c 85       	ldd	r16, Y+12	; 0x0c
    10fa:	2f 81       	ldd	r18, Y+7	; 0x07
    10fc:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <onewireWrite>

	return DS18B20_ERROR_OK;
    1100:	80 e0       	ldi	r24, 0x00	; 0
}
    1102:	2c 96       	adiw	r28, 0x0c	; 12
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ef 90       	pop	r14
    1118:	cf 90       	pop	r12
    111a:	af 90       	pop	r10
    111c:	08 95       	ret

0000111e <ds18b20csp>:

//! Copy scratchpad to EEPROM
uint8_t ds18b20csp( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *rom )
{
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	29 97       	sbiw	r28, 0x09	; 9
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	7c 83       	std	Y+4, r23	; 0x04
    113c:	6b 83       	std	Y+3, r22	; 0x03
    113e:	5e 83       	std	Y+6, r21	; 0x06
    1140:	4d 83       	std	Y+5, r20	; 0x05
    1142:	2f 83       	std	Y+7, r18	; 0x07
    1144:	19 87       	std	Y+9, r17	; 0x09
    1146:	08 87       	std	Y+8, r16	; 0x08
	//Copies DS18B20 scratchpad contents to its EEPROM

	//Communication check
	if ( onewireInit( port, direction, portin, mask ) == ONEWIRE_ERROR_COMM )
    1148:	4d 81       	ldd	r20, Y+5	; 0x05
    114a:	5e 81       	ldd	r21, Y+6	; 0x06
    114c:	6b 81       	ldd	r22, Y+3	; 0x03
    114e:	7c 81       	ldd	r23, Y+4	; 0x04
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	2f 81       	ldd	r18, Y+7	; 0x07
    1156:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <onewireInit>
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	11 f4       	brne	.+4      	; 0x1162 <ds18b20csp+0x44>
		return DS18B20_ERROR_COMM;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	2d c0       	rjmp	.+90     	; 0x11bc <ds18b20csp+0x9e>

	//ROM match (or not)
	ds18b20match( port, direction, portin, mask, rom );
    1162:	28 85       	ldd	r18, Y+8	; 0x08
    1164:	39 85       	ldd	r19, Y+9	; 0x09
    1166:	4d 81       	ldd	r20, Y+5	; 0x05
    1168:	5e 81       	ldd	r21, Y+6	; 0x06
    116a:	6b 81       	ldd	r22, Y+3	; 0x03
    116c:	7c 81       	ldd	r23, Y+4	; 0x04
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	89 01       	movw	r16, r18
    1174:	2f 81       	ldd	r18, Y+7	; 0x07
    1176:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ds18b20match>

	//Copy scratchpad
	onewireWrite( port, direction, portin, mask, DS18B20_COMMAND_COPY_SP );
    117a:	4d 81       	ldd	r20, Y+5	; 0x05
    117c:	5e 81       	ldd	r21, Y+6	; 0x06
    117e:	6b 81       	ldd	r22, Y+3	; 0x03
    1180:	7c 81       	ldd	r23, Y+4	; 0x04
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	08 e4       	ldi	r16, 0x48	; 72
    1188:	2f 81       	ldd	r18, Y+7	; 0x07
    118a:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <onewireWrite>

	//Set pin high
	//Poor DS18B20 feels better then...
	*port |= mask;
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	fc 01       	movw	r30, r24
    1194:	90 81       	ld	r25, Z
    1196:	8f 81       	ldd	r24, Y+7	; 0x07
    1198:	29 2f       	mov	r18, r25
    119a:	28 2b       	or	r18, r24
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 83       	st	Z, r18
	*direction |= mask;
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	fc 01       	movw	r30, r24
    11aa:	90 81       	ld	r25, Z
    11ac:	8f 81       	ldd	r24, Y+7	; 0x07
    11ae:	29 2f       	mov	r18, r25
    11b0:	28 2b       	or	r18, r24
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 83       	st	Z, r18

	return DS18B20_ERROR_OK;
    11ba:	80 e0       	ldi	r24, 0x00	; 0
}
    11bc:	29 96       	adiw	r28, 0x09	; 9
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	08 95       	ret

000011d2 <ds18b20read>:

//! Read temperature
uint8_t ds18b20read( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *rom, int16_t *temperature )
{
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	65 97       	sbiw	r28, 0x15	; 21
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	9c 87       	std	Y+12, r25	; 0x0c
    11f0:	8b 87       	std	Y+11, r24	; 0x0b
    11f2:	7e 87       	std	Y+14, r23	; 0x0e
    11f4:	6d 87       	std	Y+13, r22	; 0x0d
    11f6:	58 8b       	std	Y+16, r21	; 0x10
    11f8:	4f 87       	std	Y+15, r20	; 0x0f
    11fa:	29 8b       	std	Y+17, r18	; 0x11
    11fc:	1b 8b       	std	Y+19, r17	; 0x13
    11fe:	0a 8b       	std	Y+18, r16	; 0x12
    1200:	fd 8a       	std	Y+21, r15	; 0x15
    1202:	ec 8a       	std	Y+20, r14	; 0x14
	//Read temperature from DS18B20
	//Note: returns actual temperature * 16

	uint8_t sp[9];
	uint8_t ec = 0;
    1204:	19 82       	std	Y+1, r1	; 0x01

	//Communication, pull-up, CRC checks happen here
	ec = ds18b20rsp( port, direction, portin, mask, rom, sp );
    1206:	fe 01       	movw	r30, r28
    1208:	32 96       	adiw	r30, 0x02	; 2
    120a:	2a 89       	ldd	r18, Y+18	; 0x12
    120c:	3b 89       	ldd	r19, Y+19	; 0x13
    120e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1210:	58 89       	ldd	r21, Y+16	; 0x10
    1212:	6d 85       	ldd	r22, Y+13	; 0x0d
    1214:	7e 85       	ldd	r23, Y+14	; 0x0e
    1216:	8b 85       	ldd	r24, Y+11	; 0x0b
    1218:	9c 85       	ldd	r25, Y+12	; 0x0c
    121a:	7f 01       	movw	r14, r30
    121c:	89 01       	movw	r16, r18
    121e:	29 89       	ldd	r18, Y+17	; 0x11
    1220:	0e 94 7d 07 	call	0xefa	; 0xefa <ds18b20rsp>
    1224:	89 83       	std	Y+1, r24	; 0x01

	if ( ec != DS18B20_ERROR_OK )
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	88 23       	and	r24, r24
    122a:	39 f0       	breq	.+14     	; 0x123a <ds18b20read+0x68>
	{
		*temperature = 0;
    122c:	8c 89       	ldd	r24, Y+20	; 0x14
    122e:	9d 89       	ldd	r25, Y+21	; 0x15
    1230:	fc 01       	movw	r30, r24
    1232:	11 82       	std	Z+1, r1	; 0x01
    1234:	10 82       	st	Z, r1
		return ec;
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	10 c0       	rjmp	.+32     	; 0x125a <ds18b20read+0x88>
	}

	//Get temperature from received data
	*temperature = (int16_t)( sp[1] << 8 ) + sp[0];
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	38 2f       	mov	r19, r24
    1242:	22 27       	eor	r18, r18
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	28 0f       	add	r18, r24
    124c:	39 1f       	adc	r19, r25
    124e:	8c 89       	ldd	r24, Y+20	; 0x14
    1250:	9d 89       	ldd	r25, Y+21	; 0x15
    1252:	fc 01       	movw	r30, r24
    1254:	31 83       	std	Z+1, r19	; 0x01
    1256:	20 83       	st	Z, r18

	return DS18B20_ERROR_OK;
    1258:	80 e0       	ldi	r24, 0x00	; 0
}
    125a:	65 96       	adiw	r28, 0x15	; 21
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	08 95       	ret

00001274 <ds18b20rom>:

//! Read ROM address
uint8_t ds18b20rom( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *rom )
{
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	2a 97       	sbiw	r28, 0x0a	; 10
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	9b 83       	std	Y+3, r25	; 0x03
    128e:	8a 83       	std	Y+2, r24	; 0x02
    1290:	7d 83       	std	Y+5, r23	; 0x05
    1292:	6c 83       	std	Y+4, r22	; 0x04
    1294:	5f 83       	std	Y+7, r21	; 0x07
    1296:	4e 83       	std	Y+6, r20	; 0x06
    1298:	28 87       	std	Y+8, r18	; 0x08
    129a:	1a 87       	std	Y+10, r17	; 0x0a
    129c:	09 87       	std	Y+9, r16	; 0x09
	//Read DS18B20 rom

	unsigned char i = 0;
    129e:	19 82       	std	Y+1, r1	; 0x01

	if ( rom == NULL ) return DS18B20_ERROR_OTHER;
    12a0:	89 85       	ldd	r24, Y+9	; 0x09
    12a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	11 f4       	brne	.+4      	; 0x12ac <ds18b20rom+0x38>
    12a8:	84 e0       	ldi	r24, 0x04	; 4
    12aa:	85 c0       	rjmp	.+266    	; 0x13b6 <ds18b20rom+0x142>

	//Communication check
	if ( onewireInit( port, direction, portin, mask ) == ONEWIRE_ERROR_COMM )
    12ac:	4e 81       	ldd	r20, Y+6	; 0x06
    12ae:	5f 81       	ldd	r21, Y+7	; 0x07
    12b0:	6c 81       	ldd	r22, Y+4	; 0x04
    12b2:	7d 81       	ldd	r23, Y+5	; 0x05
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	9b 81       	ldd	r25, Y+3	; 0x03
    12b8:	28 85       	ldd	r18, Y+8	; 0x08
    12ba:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <onewireInit>
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	11 f4       	brne	.+4      	; 0x12c6 <ds18b20rom+0x52>
		return DS18B20_ERROR_COMM;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	78 c0       	rjmp	.+240    	; 0x13b6 <ds18b20rom+0x142>

	//Read ROM
	onewireWrite( port, direction, portin, mask, DS18B20_COMMAND_READ_ROM );
    12c6:	4e 81       	ldd	r20, Y+6	; 0x06
    12c8:	5f 81       	ldd	r21, Y+7	; 0x07
    12ca:	6c 81       	ldd	r22, Y+4	; 0x04
    12cc:	7d 81       	ldd	r23, Y+5	; 0x05
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	9b 81       	ldd	r25, Y+3	; 0x03
    12d2:	03 e3       	ldi	r16, 0x33	; 51
    12d4:	28 85       	ldd	r18, Y+8	; 0x08
    12d6:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <onewireWrite>
	for ( i = 0; i < 8; i++ )
    12da:	19 82       	std	Y+1, r1	; 0x01
    12dc:	16 c0       	rjmp	.+44     	; 0x130a <ds18b20rom+0x96>
		rom[i] = onewireRead( port, direction, portin, mask );
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	29 85       	ldd	r18, Y+9	; 0x09
    12e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    12e8:	89 01       	movw	r16, r18
    12ea:	08 0f       	add	r16, r24
    12ec:	19 1f       	adc	r17, r25
    12ee:	4e 81       	ldd	r20, Y+6	; 0x06
    12f0:	5f 81       	ldd	r21, Y+7	; 0x07
    12f2:	6c 81       	ldd	r22, Y+4	; 0x04
    12f4:	7d 81       	ldd	r23, Y+5	; 0x05
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	28 85       	ldd	r18, Y+8	; 0x08
    12fc:	0e 94 c9 1b 	call	0x3792	; 0x3792 <onewireRead>
    1300:	f8 01       	movw	r30, r16
    1302:	80 83       	st	Z, r24
	if ( onewireInit( port, direction, portin, mask ) == ONEWIRE_ERROR_COMM )
		return DS18B20_ERROR_COMM;

	//Read ROM
	onewireWrite( port, direction, portin, mask, DS18B20_COMMAND_READ_ROM );
	for ( i = 0; i < 8; i++ )
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	8f 5f       	subi	r24, 0xFF	; 255
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	88 30       	cpi	r24, 0x08	; 8
    130e:	38 f3       	brcs	.-50     	; 0x12de <ds18b20rom+0x6a>
		rom[i] = onewireRead( port, direction, portin, mask );

	//Pull-up check
	if ( ( rom[0] | rom[1] | rom[2] | rom[3] | rom[4] | rom[5] | rom[6] | rom[7] ) == 0 ) return DS18B20_ERROR_PULL;
    1310:	89 85       	ldd	r24, Y+9	; 0x09
    1312:	9a 85       	ldd	r25, Y+10	; 0x0a
    1314:	fc 01       	movw	r30, r24
    1316:	20 81       	ld	r18, Z
    1318:	89 85       	ldd	r24, Y+9	; 0x09
    131a:	9a 85       	ldd	r25, Y+10	; 0x0a
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	fc 01       	movw	r30, r24
    1320:	80 81       	ld	r24, Z
    1322:	28 2b       	or	r18, r24
    1324:	89 85       	ldd	r24, Y+9	; 0x09
    1326:	9a 85       	ldd	r25, Y+10	; 0x0a
    1328:	02 96       	adiw	r24, 0x02	; 2
    132a:	fc 01       	movw	r30, r24
    132c:	80 81       	ld	r24, Z
    132e:	28 2b       	or	r18, r24
    1330:	89 85       	ldd	r24, Y+9	; 0x09
    1332:	9a 85       	ldd	r25, Y+10	; 0x0a
    1334:	03 96       	adiw	r24, 0x03	; 3
    1336:	fc 01       	movw	r30, r24
    1338:	80 81       	ld	r24, Z
    133a:	28 2b       	or	r18, r24
    133c:	89 85       	ldd	r24, Y+9	; 0x09
    133e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1340:	04 96       	adiw	r24, 0x04	; 4
    1342:	fc 01       	movw	r30, r24
    1344:	80 81       	ld	r24, Z
    1346:	28 2b       	or	r18, r24
    1348:	89 85       	ldd	r24, Y+9	; 0x09
    134a:	9a 85       	ldd	r25, Y+10	; 0x0a
    134c:	05 96       	adiw	r24, 0x05	; 5
    134e:	fc 01       	movw	r30, r24
    1350:	80 81       	ld	r24, Z
    1352:	28 2b       	or	r18, r24
    1354:	89 85       	ldd	r24, Y+9	; 0x09
    1356:	9a 85       	ldd	r25, Y+10	; 0x0a
    1358:	06 96       	adiw	r24, 0x06	; 6
    135a:	fc 01       	movw	r30, r24
    135c:	80 81       	ld	r24, Z
    135e:	28 2b       	or	r18, r24
    1360:	89 85       	ldd	r24, Y+9	; 0x09
    1362:	9a 85       	ldd	r25, Y+10	; 0x0a
    1364:	07 96       	adiw	r24, 0x07	; 7
    1366:	fc 01       	movw	r30, r24
    1368:	80 81       	ld	r24, Z
    136a:	82 2b       	or	r24, r18
    136c:	88 23       	and	r24, r24
    136e:	11 f4       	brne	.+4      	; 0x1374 <ds18b20rom+0x100>
    1370:	83 e0       	ldi	r24, 0x03	; 3
    1372:	21 c0       	rjmp	.+66     	; 0x13b6 <ds18b20rom+0x142>

	//Check CRC
	if ( ds18b20crc8( rom, 7 ) != rom[7] )
    1374:	89 85       	ldd	r24, Y+9	; 0x09
    1376:	9a 85       	ldd	r25, Y+10	; 0x0a
    1378:	67 e0       	ldi	r22, 0x07	; 7
    137a:	0e 94 9b 06 	call	0xd36	; 0xd36 <ds18b20crc8>
    137e:	28 2f       	mov	r18, r24
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	07 96       	adiw	r24, 0x07	; 7
    1386:	fc 01       	movw	r30, r24
    1388:	80 81       	ld	r24, Z
    138a:	28 17       	cp	r18, r24
    138c:	99 f0       	breq	.+38     	; 0x13b4 <ds18b20rom+0x140>
	{
		for ( i = 0; i < 8; i++ ) rom[i] = 0;
    138e:	19 82       	std	Y+1, r1	; 0x01
    1390:	0c c0       	rjmp	.+24     	; 0x13aa <ds18b20rom+0x136>
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	29 85       	ldd	r18, Y+9	; 0x09
    139a:	3a 85       	ldd	r19, Y+10	; 0x0a
    139c:	82 0f       	add	r24, r18
    139e:	93 1f       	adc	r25, r19
    13a0:	fc 01       	movw	r30, r24
    13a2:	10 82       	st	Z, r1
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	88 30       	cpi	r24, 0x08	; 8
    13ae:	88 f3       	brcs	.-30     	; 0x1392 <ds18b20rom+0x11e>
		return DS18B20_ERROR_CRC;
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <ds18b20rom+0x142>
	}

	return DS18B20_ERROR_OK;
    13b4:	80 e0       	ldi	r24, 0x00	; 0
}
    13b6:	2a 96       	adiw	r28, 0x0a	; 10
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <i2c_speed>:
#include "i2c.h"

void i2c_speed(i2c_speed_t speed){
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <i2c_speed+0xa>
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <i2c_speed+0xc>
    13d8:	00 d0       	rcall	.+0      	; 0x13da <i2c_speed+0xe>
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	9a 83       	std	Y+2, r25	; 0x02
    13e0:	89 83       	std	Y+1, r24	; 0x01
  TWBR = ((F_CPU / ( speed * 1000)) - 16)/2;
    13e2:	08 eb       	ldi	r16, 0xB8	; 184
    13e4:	10 e0       	ldi	r17, 0x00	; 0
    13e6:	49 81       	ldd	r20, Y+1	; 0x01
    13e8:	5a 81       	ldd	r21, Y+2	; 0x02
    13ea:	28 ee       	ldi	r18, 0xE8	; 232
    13ec:	33 e0       	ldi	r19, 0x03	; 3
    13ee:	42 9f       	mul	r20, r18
    13f0:	c0 01       	movw	r24, r0
    13f2:	43 9f       	mul	r20, r19
    13f4:	90 0d       	add	r25, r0
    13f6:	52 9f       	mul	r21, r18
    13f8:	90 0d       	add	r25, r0
    13fa:	11 24       	eor	r1, r1
    13fc:	9c 01       	movw	r18, r24
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	92 e1       	ldi	r25, 0x12	; 18
    1406:	aa e7       	ldi	r26, 0x7A	; 122
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	bc 01       	movw	r22, r24
    140c:	cd 01       	movw	r24, r26
    140e:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodsi4>
    1412:	da 01       	movw	r26, r20
    1414:	c9 01       	movw	r24, r18
    1416:	40 97       	sbiw	r24, 0x10	; 16
    1418:	a1 09       	sbc	r26, r1
    141a:	b1 09       	sbc	r27, r1
    141c:	b6 95       	lsr	r27
    141e:	a7 95       	ror	r26
    1420:	97 95       	ror	r25
    1422:	87 95       	ror	r24
    1424:	f8 01       	movw	r30, r16
    1426:	80 83       	st	Z, r24
}
    1428:	26 96       	adiw	r28, 0x06	; 6
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	08 95       	ret

0000143e <i2c_start>:

void i2c_start(void){
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    1446:	8c eb       	ldi	r24, 0xBC	; 188
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	24 ea       	ldi	r18, 0xA4	; 164
    144c:	fc 01       	movw	r30, r24
    144e:	20 83       	st	Z, r18
  loop_until_bit_is_set(TWCR, TWINT);
    1450:	8c eb       	ldi	r24, 0xBC	; 188
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	fc 01       	movw	r30, r24
    1456:	80 81       	ld	r24, Z
    1458:	88 23       	and	r24, r24
    145a:	d4 f7       	brge	.-12     	; 0x1450 <i2c_start+0x12>
}
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	08 95       	ret

00001462 <i2c_stop>:

void i2c_stop(void){
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
  TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);
    146a:	8c eb       	ldi	r24, 0xBC	; 188
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	24 e9       	ldi	r18, 0x94	; 148
    1470:	fc 01       	movw	r30, r24
    1472:	20 83       	st	Z, r18
  loop_until_bit_is_clear(TWCR, TWSTO);
    1474:	8c eb       	ldi	r24, 0xBC	; 188
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	fc 01       	movw	r30, r24
    147a:	80 81       	ld	r24, Z
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	80 71       	andi	r24, 0x10	; 16
    1482:	99 27       	eor	r25, r25
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	b1 f7       	brne	.-20     	; 0x1474 <i2c_stop+0x12>
}
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <i2c_write>:

void i2c_write(uint8_t data){
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	1f 92       	push	r1
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	89 83       	std	Y+1, r24	; 0x01
  TWDR = data;
    149a:	8b eb       	ldi	r24, 0xBB	; 187
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	29 81       	ldd	r18, Y+1	; 0x01
    14a0:	fc 01       	movw	r30, r24
    14a2:	20 83       	st	Z, r18
  TWCR = _BV(TWINT) | _BV(TWEN);
    14a4:	8c eb       	ldi	r24, 0xBC	; 188
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	24 e8       	ldi	r18, 0x84	; 132
    14aa:	fc 01       	movw	r30, r24
    14ac:	20 83       	st	Z, r18
  loop_until_bit_is_set(TWCR, TWINT);
    14ae:	8c eb       	ldi	r24, 0xBC	; 188
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	fc 01       	movw	r30, r24
    14b4:	80 81       	ld	r24, Z
    14b6:	88 23       	and	r24, r24
    14b8:	d4 f7       	brge	.-12     	; 0x14ae <i2c_write+0x20>
}
    14ba:	0f 90       	pop	r0
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <i2c_read>:

uint8_t i2c_read(i2c_ack_t ack){
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	1f 92       	push	r1
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	89 83       	std	Y+1, r24	; 0x01
  TWCR = ack ? (_BV(TWINT) | _BV(TWEN) | _BV(TWEA)) : (_BV(TWINT) | _BV(TWEN));
    14ce:	8c eb       	ldi	r24, 0xBC	; 188
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	29 81       	ldd	r18, Y+1	; 0x01
    14d4:	22 23       	and	r18, r18
    14d6:	11 f0       	breq	.+4      	; 0x14dc <i2c_read+0x1a>
    14d8:	24 ec       	ldi	r18, 0xC4	; 196
    14da:	01 c0       	rjmp	.+2      	; 0x14de <i2c_read+0x1c>
    14dc:	24 e8       	ldi	r18, 0x84	; 132
    14de:	fc 01       	movw	r30, r24
    14e0:	20 83       	st	Z, r18
  loop_until_bit_is_set(TWCR, TWINT);
    14e2:	8c eb       	ldi	r24, 0xBC	; 188
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	fc 01       	movw	r30, r24
    14e8:	80 81       	ld	r24, Z
    14ea:	88 23       	and	r24, r24
    14ec:	d4 f7       	brge	.-12     	; 0x14e2 <i2c_read+0x20>
  return TWDR;
    14ee:	8b eb       	ldi	r24, 0xBB	; 187
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	fc 01       	movw	r30, r24
    14f4:	80 81       	ld	r24, Z
}
    14f6:	0f 90       	pop	r0
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <main>:
uint8_t char_array_left[8] = {0x2,0x6,0xa,0x12,0xa,0x6,0x2,0x0};
uint8_t char_array_right[8] = {0x8,0xc,0xa,0x9,0xa,0xc,0x8,0x0};



int main(void){
    14fe:	0f 93       	push	r16
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	2e 97       	sbiw	r28, 0x0e	; 14
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
 // set_sleep_mode(SLEEP_MODE_IDLE);

i2c_speed(SLOW);
    1514:	84 e6       	ldi	r24, 0x64	; 100
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 e6 09 	call	0x13cc	; 0x13cc <i2c_speed>
  lcd = lcd_init(63);
    151c:	8f e3       	ldi	r24, 0x3F	; 63
    151e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_init>
    1522:	90 93 43 01 	sts	0x0143, r25
    1526:	80 93 42 01 	sts	0x0142, r24
  lcd_set_char(lcd, 1, char_array_left);
    152a:	80 91 42 01 	lds	r24, 0x0142
    152e:	90 91 43 01 	lds	r25, 0x0143
    1532:	46 e0       	ldi	r20, 0x06	; 6
    1534:	51 e0       	ldi	r21, 0x01	; 1
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_set_char>
  lcd_set_char(lcd, 2, char_array_right);
    153c:	80 91 42 01 	lds	r24, 0x0142
    1540:	90 91 43 01 	lds	r25, 0x0143
    1544:	4e e0       	ldi	r20, 0x0E	; 14
    1546:	51 e0       	ldi	r21, 0x01	; 1
    1548:	62 e0       	ldi	r22, 0x02	; 2
    154a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_set_char>

  lcd_update(lcd, 0, 3, "\1 Uptime \2", 10);
    154e:	80 91 42 01 	lds	r24, 0x0142
    1552:	90 91 43 01 	lds	r25, 0x0143
    1556:	0a e0       	ldi	r16, 0x0A	; 10
    1558:	26 e1       	ldi	r18, 0x16	; 22
    155a:	31 e0       	ldi	r19, 0x01	; 1
    155c:	43 e0       	ldi	r20, 0x03	; 3
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	0e 94 31 01 	call	0x262	; 0x262 <lcd_update>
  lcd_update(lcd, 1, 4, "by Licho", 8);
    1564:	80 91 42 01 	lds	r24, 0x0142
    1568:	90 91 43 01 	lds	r25, 0x0143
    156c:	08 e0       	ldi	r16, 0x08	; 8
    156e:	21 e2       	ldi	r18, 0x21	; 33
    1570:	31 e0       	ldi	r19, 0x01	; 1
    1572:	44 e0       	ldi	r20, 0x04	; 4
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	0e 94 31 01 	call	0x262	; 0x262 <lcd_update>
  lcd_refresh(lcd);
    157a:	80 91 42 01 	lds	r24, 0x0142
    157e:	90 91 43 01 	lds	r25, 0x0143
    1582:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_refresh>

  

  
  //_delay_ms(3000);
DDRB=(1<<PB0);
    1586:	84 e2       	ldi	r24, 0x24	; 36
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	21 e0       	ldi	r18, 0x01	; 1
    158c:	fc 01       	movw	r30, r24
    158e:	20 83       	st	Z, r18
pcf8574_pin_on(lcd->controller, 3);
    1590:	80 91 42 01 	lds	r24, 0x0142
    1594:	90 91 43 01 	lds	r25, 0x0143
    1598:	fc 01       	movw	r30, r24
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	63 e0       	ldi	r22, 0x03	; 3
    15a0:	0e 94 16 05 	call	0xa2c	; 0xa2c <pcf8574_pin_on>
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a6 e9       	ldi	r26, 0x96	; 150
    15aa:	b3 e4       	ldi	r27, 0x43	; 67
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	ab 83       	std	Y+3, r26	; 0x03
    15b2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4a ef       	ldi	r20, 0xFA	; 250
    15ba:	54 e4       	ldi	r21, 0x44	; 68
    15bc:	69 81       	ldd	r22, Y+1	; 0x01
    15be:	7a 81       	ldd	r23, Y+2	; 0x02
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	8d 83       	std	Y+5, r24	; 0x05
    15ce:	9e 83       	std	Y+6, r25	; 0x06
    15d0:	af 83       	std	Y+7, r26	; 0x07
    15d2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	6d 81       	ldd	r22, Y+5	; 0x05
    15de:	7e 81       	ldd	r23, Y+6	; 0x06
    15e0:	8f 81       	ldd	r24, Y+7	; 0x07
    15e2:	98 85       	ldd	r25, Y+8	; 0x08
    15e4:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    15e8:	88 23       	and	r24, r24
    15ea:	2c f4       	brge	.+10     	; 0x15f6 <main+0xf8>
		__ticks = 1;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	9a 87       	std	Y+10, r25	; 0x0a
    15f2:	89 87       	std	Y+9, r24	; 0x09
    15f4:	3f c0       	rjmp	.+126    	; 0x1674 <main+0x176>
	else if (__tmp > 65535)
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	3f ef       	ldi	r19, 0xFF	; 255
    15fa:	4f e7       	ldi	r20, 0x7F	; 127
    15fc:	57 e4       	ldi	r21, 0x47	; 71
    15fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1600:	7e 81       	ldd	r23, Y+6	; 0x06
    1602:	8f 81       	ldd	r24, Y+7	; 0x07
    1604:	98 85       	ldd	r25, Y+8	; 0x08
    1606:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    160a:	18 16       	cp	r1, r24
    160c:	4c f5       	brge	.+82     	; 0x1660 <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e2       	ldi	r20, 0x20	; 32
    1614:	51 e4       	ldi	r21, 0x41	; 65
    1616:	69 81       	ldd	r22, Y+1	; 0x01
    1618:	7a 81       	ldd	r23, Y+2	; 0x02
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	9a 87       	std	Y+10, r25	; 0x0a
    1634:	89 87       	std	Y+9, r24	; 0x09
    1636:	0f c0       	rjmp	.+30     	; 0x1656 <main+0x158>
    1638:	88 ec       	ldi	r24, 0xC8	; 200
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	9c 87       	std	Y+12, r25	; 0x0c
    163e:	8b 87       	std	Y+11, r24	; 0x0b
    1640:	8b 85       	ldd	r24, Y+11	; 0x0b
    1642:	9c 85       	ldd	r25, Y+12	; 0x0c
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <main+0x146>
    1648:	9c 87       	std	Y+12, r25	; 0x0c
    164a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164c:	89 85       	ldd	r24, Y+9	; 0x09
    164e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	9a 87       	std	Y+10, r25	; 0x0a
    1654:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	69 f7       	brne	.-38     	; 0x1638 <main+0x13a>
    165e:	14 c0       	rjmp	.+40     	; 0x1688 <main+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1660:	6d 81       	ldd	r22, Y+5	; 0x05
    1662:	7e 81       	ldd	r23, Y+6	; 0x06
    1664:	8f 81       	ldd	r24, Y+7	; 0x07
    1666:	98 85       	ldd	r25, Y+8	; 0x08
    1668:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	9a 87       	std	Y+10, r25	; 0x0a
    1672:	89 87       	std	Y+9, r24	; 0x09
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	9a 85       	ldd	r25, Y+10	; 0x0a
    1678:	9e 87       	std	Y+14, r25	; 0x0e
    167a:	8d 87       	std	Y+13, r24	; 0x0d
    167c:	8d 85       	ldd	r24, Y+13	; 0x0d
    167e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <main+0x182>
    1684:	9e 87       	std	Y+14, r25	; 0x0e
    1686:	8d 87       	std	Y+13, r24	; 0x0d
  while(1){
	  _delay_ms(300);
	  //lcd_clear(lcd);
	  lcd_update(lcd, 0, 3, "Brawo       ", 11);
    1688:	80 91 42 01 	lds	r24, 0x0142
    168c:	90 91 43 01 	lds	r25, 0x0143
    1690:	0b e0       	ldi	r16, 0x0B	; 11
    1692:	2a e2       	ldi	r18, 0x2A	; 42
    1694:	31 e0       	ldi	r19, 0x01	; 1
    1696:	43 e0       	ldi	r20, 0x03	; 3
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	0e 94 31 01 	call	0x262	; 0x262 <lcd_update>
	   lcd_update(lcd, 1, 2, "dziala! xd", 10);
    169e:	80 91 42 01 	lds	r24, 0x0142
    16a2:	90 91 43 01 	lds	r25, 0x0143
    16a6:	0a e0       	ldi	r16, 0x0A	; 10
    16a8:	27 e3       	ldi	r18, 0x37	; 55
    16aa:	31 e0       	ldi	r19, 0x01	; 1
    16ac:	42 e0       	ldi	r20, 0x02	; 2
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	0e 94 31 01 	call	0x262	; 0x262 <lcd_update>
    lcd_refresh(lcd);
    16b4:	80 91 42 01 	lds	r24, 0x0142
    16b8:	90 91 43 01 	lds	r25, 0x0143
    16bc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_refresh>
    PORTB^=1;
    16c0:	85 e2       	ldi	r24, 0x25	; 37
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	25 e2       	ldi	r18, 0x25	; 37
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	f9 01       	movw	r30, r18
    16ca:	30 81       	ld	r19, Z
    16cc:	21 e0       	ldi	r18, 0x01	; 1
    16ce:	23 27       	eor	r18, r19
    16d0:	fc 01       	movw	r30, r24
    16d2:	20 83       	st	Z, r18

  }
    16d4:	67 cf       	rjmp	.-306    	; 0x15a4 <main+0xa6>

000016d6 <onewireInit>:
#include <inttypes.h>
#include <ds18b20/onewire.h>

//! Initializes 1wire bus before transmission
uint8_t onewireInit( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	c9 58       	subi	r28, 0x89	; 137
    16e4:	d1 09       	sbc	r29, r1
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	fe 01       	movw	r30, r28
    16f2:	ed 57       	subi	r30, 0x7D	; 125
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	80 83       	st	Z, r24
    16fa:	ce 01       	movw	r24, r28
    16fc:	8b 57       	subi	r24, 0x7B	; 123
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	fc 01       	movw	r30, r24
    1702:	71 83       	std	Z+1, r23	; 0x01
    1704:	60 83       	st	Z, r22
    1706:	ce 01       	movw	r24, r28
    1708:	89 57       	subi	r24, 0x79	; 121
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	fc 01       	movw	r30, r24
    170e:	51 83       	std	Z+1, r21	; 0x01
    1710:	40 83       	st	Z, r20
    1712:	ce 01       	movw	r24, r28
    1714:	87 57       	subi	r24, 0x77	; 119
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	fc 01       	movw	r30, r24
    171a:	20 83       	st	Z, r18
	uint8_t response = 0;
    171c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t sreg = SREG; //Store status register
    171e:	8f e5       	ldi	r24, 0x5F	; 95
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	fc 01       	movw	r30, r24
    1724:	80 81       	ld	r24, Z
    1726:	8a 83       	std	Y+2, r24	; 0x02

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	*port |= mask; //Write 1 to output
    1728:	ce 01       	movw	r24, r28
    172a:	8d 57       	subi	r24, 0x7D	; 125
    172c:	9f 4f       	sbci	r25, 0xFF	; 255
    172e:	fc 01       	movw	r30, r24
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
    1734:	fc 01       	movw	r30, r24
    1736:	20 81       	ld	r18, Z
    1738:	ce 01       	movw	r24, r28
    173a:	87 57       	subi	r24, 0x77	; 119
    173c:	9f 4f       	sbci	r25, 0xFF	; 255
    173e:	fc 01       	movw	r30, r24
    1740:	80 81       	ld	r24, Z
    1742:	28 2b       	or	r18, r24
    1744:	ce 01       	movw	r24, r28
    1746:	8d 57       	subi	r24, 0x7D	; 125
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	fc 01       	movw	r30, r24
    174c:	80 81       	ld	r24, Z
    174e:	91 81       	ldd	r25, Z+1	; 0x01
    1750:	fc 01       	movw	r30, r24
    1752:	20 83       	st	Z, r18
	*direction |= mask; //Set port to output
    1754:	ce 01       	movw	r24, r28
    1756:	8b 57       	subi	r24, 0x7B	; 123
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	fc 01       	movw	r30, r24
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	fc 01       	movw	r30, r24
    1762:	20 81       	ld	r18, Z
    1764:	ce 01       	movw	r24, r28
    1766:	87 57       	subi	r24, 0x77	; 119
    1768:	9f 4f       	sbci	r25, 0xFF	; 255
    176a:	fc 01       	movw	r30, r24
    176c:	80 81       	ld	r24, Z
    176e:	28 2b       	or	r18, r24
    1770:	ce 01       	movw	r24, r28
    1772:	8b 57       	subi	r24, 0x7B	; 123
    1774:	9f 4f       	sbci	r25, 0xFF	; 255
    1776:	fc 01       	movw	r30, r24
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	fc 01       	movw	r30, r24
    177e:	20 83       	st	Z, r18
	*port &= ~mask; //Write 0 to output
    1780:	ce 01       	movw	r24, r28
    1782:	8d 57       	subi	r24, 0x7D	; 125
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
    1786:	fc 01       	movw	r30, r24
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	fc 01       	movw	r30, r24
    178e:	80 81       	ld	r24, Z
    1790:	28 2f       	mov	r18, r24
    1792:	ce 01       	movw	r24, r28
    1794:	87 57       	subi	r24, 0x77	; 119
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	fc 01       	movw	r30, r24
    179a:	80 81       	ld	r24, Z
    179c:	80 95       	com	r24
    179e:	82 23       	and	r24, r18
    17a0:	28 2f       	mov	r18, r24
    17a2:	ce 01       	movw	r24, r28
    17a4:	8d 57       	subi	r24, 0x7D	; 125
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	fc 01       	movw	r30, r24
    17aa:	80 81       	ld	r24, Z
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	fc 01       	movw	r30, r24
    17b0:	20 83       	st	Z, r18
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a6 e1       	ldi	r26, 0x16	; 22
    17b8:	b4 e4       	ldi	r27, 0x44	; 68
    17ba:	8b 83       	std	Y+3, r24	; 0x03
    17bc:	9c 83       	std	Y+4, r25	; 0x04
    17be:	ad 83       	std	Y+5, r26	; 0x05
    17c0:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    17c2:	2b ea       	ldi	r18, 0xAB	; 171
    17c4:	3a ea       	ldi	r19, 0xAA	; 170
    17c6:	4a e2       	ldi	r20, 0x2A	; 42
    17c8:	50 e4       	ldi	r21, 0x40	; 64
    17ca:	6b 81       	ldd	r22, Y+3	; 0x03
    17cc:	7c 81       	ldd	r23, Y+4	; 0x04
    17ce:	8d 81       	ldd	r24, Y+5	; 0x05
    17d0:	9e 81       	ldd	r25, Y+6	; 0x06
    17d2:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	8f 83       	std	Y+7, r24	; 0x07
    17dc:	98 87       	std	Y+8, r25	; 0x08
    17de:	a9 87       	std	Y+9, r26	; 0x09
    17e0:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	ad 81       	ldd	r26, Y+5	; 0x05
    17e8:	be 81       	ldd	r27, Y+6	; 0x06
    17ea:	9c 01       	movw	r18, r24
    17ec:	ad 01       	movw	r20, r26
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__addsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	8b 87       	std	Y+11, r24	; 0x0b
    17fc:	9c 87       	std	Y+12, r25	; 0x0c
    17fe:	ad 87       	std	Y+13, r26	; 0x0d
    1800:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    1816:	88 23       	and	r24, r24
    1818:	1c f4       	brge	.+6      	; 0x1820 <onewireInit+0x14a>
		__ticks = 1;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	8f 87       	std	Y+15, r24	; 0x0f
    181e:	b2 c0       	rjmp	.+356    	; 0x1984 <onewireInit+0x2ae>
	else if (__tmp2 > 65535)
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	3f ef       	ldi	r19, 0xFF	; 255
    1824:	4f e7       	ldi	r20, 0x7F	; 127
    1826:	57 e4       	ldi	r21, 0x47	; 71
    1828:	6b 85       	ldd	r22, Y+11	; 0x0b
    182a:	7c 85       	ldd	r23, Y+12	; 0x0c
    182c:	8d 85       	ldd	r24, Y+13	; 0x0d
    182e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1830:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    1834:	18 16       	cp	r1, r24
    1836:	0c f0       	brlt	.+2      	; 0x183a <onewireInit+0x164>
    1838:	7b c0       	rjmp	.+246    	; 0x1930 <onewireInit+0x25a>
	{
		_delay_ms(__us / 1000.0);
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	4a e7       	ldi	r20, 0x7A	; 122
    1840:	54 e4       	ldi	r21, 0x44	; 68
    1842:	6b 81       	ldd	r22, Y+3	; 0x03
    1844:	7c 81       	ldd	r23, Y+4	; 0x04
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__divsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	88 8b       	std	Y+16, r24	; 0x10
    1854:	99 8b       	std	Y+17, r25	; 0x11
    1856:	aa 8b       	std	Y+18, r26	; 0x12
    1858:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	4a ef       	ldi	r20, 0xFA	; 250
    1860:	54 e4       	ldi	r21, 0x44	; 68
    1862:	68 89       	ldd	r22, Y+16	; 0x10
    1864:	79 89       	ldd	r23, Y+17	; 0x11
    1866:	8a 89       	ldd	r24, Y+18	; 0x12
    1868:	9b 89       	ldd	r25, Y+19	; 0x13
    186a:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	8c 8b       	std	Y+20, r24	; 0x14
    1874:	9d 8b       	std	Y+21, r25	; 0x15
    1876:	ae 8b       	std	Y+22, r26	; 0x16
    1878:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e8       	ldi	r20, 0x80	; 128
    1880:	5f e3       	ldi	r21, 0x3F	; 63
    1882:	6c 89       	ldd	r22, Y+20	; 0x14
    1884:	7d 89       	ldd	r23, Y+21	; 0x15
    1886:	8e 89       	ldd	r24, Y+22	; 0x16
    1888:	9f 89       	ldd	r25, Y+23	; 0x17
    188a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    188e:	88 23       	and	r24, r24
    1890:	2c f4       	brge	.+10     	; 0x189c <onewireInit+0x1c6>
		__ticks = 1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	99 8f       	std	Y+25, r25	; 0x19
    1898:	88 8f       	std	Y+24, r24	; 0x18
    189a:	3f c0       	rjmp	.+126    	; 0x191a <onewireInit+0x244>
	else if (__tmp > 65535)
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	3f ef       	ldi	r19, 0xFF	; 255
    18a0:	4f e7       	ldi	r20, 0x7F	; 127
    18a2:	57 e4       	ldi	r21, 0x47	; 71
    18a4:	6c 89       	ldd	r22, Y+20	; 0x14
    18a6:	7d 89       	ldd	r23, Y+21	; 0x15
    18a8:	8e 89       	ldd	r24, Y+22	; 0x16
    18aa:	9f 89       	ldd	r25, Y+23	; 0x17
    18ac:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    18b0:	18 16       	cp	r1, r24
    18b2:	4c f5       	brge	.+82     	; 0x1906 <onewireInit+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e2       	ldi	r20, 0x20	; 32
    18ba:	51 e4       	ldi	r21, 0x41	; 65
    18bc:	68 89       	ldd	r22, Y+16	; 0x10
    18be:	79 89       	ldd	r23, Y+17	; 0x11
    18c0:	8a 89       	ldd	r24, Y+18	; 0x12
    18c2:	9b 89       	ldd	r25, Y+19	; 0x13
    18c4:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	bc 01       	movw	r22, r24
    18ce:	cd 01       	movw	r24, r26
    18d0:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	99 8f       	std	Y+25, r25	; 0x19
    18da:	88 8f       	std	Y+24, r24	; 0x18
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <onewireInit+0x226>
    18de:	88 ec       	ldi	r24, 0xC8	; 200
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	9b 8f       	std	Y+27, r25	; 0x1b
    18e4:	8a 8f       	std	Y+26, r24	; 0x1a
    18e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <onewireInit+0x214>
    18ee:	9b 8f       	std	Y+27, r25	; 0x1b
    18f0:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f2:	88 8d       	ldd	r24, Y+24	; 0x18
    18f4:	99 8d       	ldd	r25, Y+25	; 0x19
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	99 8f       	std	Y+25, r25	; 0x19
    18fa:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fc:	88 8d       	ldd	r24, Y+24	; 0x18
    18fe:	99 8d       	ldd	r25, Y+25	; 0x19
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	69 f7       	brne	.-38     	; 0x18de <onewireInit+0x208>
    1904:	3f c0       	rjmp	.+126    	; 0x1984 <onewireInit+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1906:	6c 89       	ldd	r22, Y+20	; 0x14
    1908:	7d 89       	ldd	r23, Y+21	; 0x15
    190a:	8e 89       	ldd	r24, Y+22	; 0x16
    190c:	9f 89       	ldd	r25, Y+23	; 0x17
    190e:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	99 8f       	std	Y+25, r25	; 0x19
    1918:	88 8f       	std	Y+24, r24	; 0x18
    191a:	88 8d       	ldd	r24, Y+24	; 0x18
    191c:	99 8d       	ldd	r25, Y+25	; 0x19
    191e:	9d 8f       	std	Y+29, r25	; 0x1d
    1920:	8c 8f       	std	Y+28, r24	; 0x1c
    1922:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1924:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <onewireInit+0x250>
    192a:	9d 8f       	std	Y+29, r25	; 0x1d
    192c:	8c 8f       	std	Y+28, r24	; 0x1c
    192e:	2a c0       	rjmp	.+84     	; 0x1984 <onewireInit+0x2ae>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	4f e7       	ldi	r20, 0x7F	; 127
    1936:	53 e4       	ldi	r21, 0x43	; 67
    1938:	6f 81       	ldd	r22, Y+7	; 0x07
    193a:	78 85       	ldd	r23, Y+8	; 0x08
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    1944:	18 16       	cp	r1, r24
    1946:	ac f4       	brge	.+42     	; 0x1972 <onewireInit+0x29c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1948:	6b 85       	ldd	r22, Y+11	; 0x0b
    194a:	7c 85       	ldd	r23, Y+12	; 0x0c
    194c:	8d 85       	ldd	r24, Y+13	; 0x0d
    194e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1950:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9f 8f       	std	Y+31, r25	; 0x1f
    195a:	8e 8f       	std	Y+30, r24	; 0x1e
    195c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    195e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1960:	99 a3       	std	Y+33, r25	; 0x21
    1962:	88 a3       	std	Y+32, r24	; 0x20
    1964:	88 a1       	ldd	r24, Y+32	; 0x20
    1966:	99 a1       	ldd	r25, Y+33	; 0x21
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <onewireInit+0x292>
    196c:	99 a3       	std	Y+33, r25	; 0x21
    196e:	88 a3       	std	Y+32, r24	; 0x20
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <onewireInit+0x2ba>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	8f 87       	std	Y+15, r24	; 0x0f
    1984:	8f 85       	ldd	r24, Y+15	; 0x0f
    1986:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1988:	8a a1       	ldd	r24, Y+34	; 0x22
    198a:	8a 95       	dec	r24
    198c:	f1 f7       	brne	.-4      	; 0x198a <onewireInit+0x2b4>
    198e:	8a a3       	std	Y+34, r24	; 0x22

	_delay_us( 600 );

	*direction &= ~mask; //Set port to input
    1990:	ce 01       	movw	r24, r28
    1992:	8b 57       	subi	r24, 0x7B	; 123
    1994:	9f 4f       	sbci	r25, 0xFF	; 255
    1996:	fc 01       	movw	r30, r24
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	fc 01       	movw	r30, r24
    199e:	80 81       	ld	r24, Z
    19a0:	28 2f       	mov	r18, r24
    19a2:	ce 01       	movw	r24, r28
    19a4:	87 57       	subi	r24, 0x77	; 119
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	fc 01       	movw	r30, r24
    19aa:	80 81       	ld	r24, Z
    19ac:	80 95       	com	r24
    19ae:	82 23       	and	r24, r18
    19b0:	28 2f       	mov	r18, r24
    19b2:	ce 01       	movw	r24, r28
    19b4:	8b 57       	subi	r24, 0x7B	; 123
    19b6:	9f 4f       	sbci	r25, 0xFF	; 255
    19b8:	fc 01       	movw	r30, r24
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	fc 01       	movw	r30, r24
    19c0:	20 83       	st	Z, r18
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	ac e8       	ldi	r26, 0x8C	; 140
    19c8:	b2 e4       	ldi	r27, 0x42	; 66
    19ca:	8b a3       	std	Y+35, r24	; 0x23
    19cc:	9c a3       	std	Y+36, r25	; 0x24
    19ce:	ad a3       	std	Y+37, r26	; 0x25
    19d0:	be a3       	std	Y+38, r27	; 0x26
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    19d2:	2b ea       	ldi	r18, 0xAB	; 171
    19d4:	3a ea       	ldi	r19, 0xAA	; 170
    19d6:	4a e2       	ldi	r20, 0x2A	; 42
    19d8:	50 e4       	ldi	r21, 0x40	; 64
    19da:	6b a1       	ldd	r22, Y+35	; 0x23
    19dc:	7c a1       	ldd	r23, Y+36	; 0x24
    19de:	8d a1       	ldd	r24, Y+37	; 0x25
    19e0:	9e a1       	ldd	r25, Y+38	; 0x26
    19e2:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8f a3       	std	Y+39, r24	; 0x27
    19ec:	98 a7       	std	Y+40, r25	; 0x28
    19ee:	a9 a7       	std	Y+41, r26	; 0x29
    19f0:	ba a7       	std	Y+42, r27	; 0x2a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    19f2:	8b a1       	ldd	r24, Y+35	; 0x23
    19f4:	9c a1       	ldd	r25, Y+36	; 0x24
    19f6:	ad a1       	ldd	r26, Y+37	; 0x25
    19f8:	be a1       	ldd	r27, Y+38	; 0x26
    19fa:	9c 01       	movw	r18, r24
    19fc:	ad 01       	movw	r20, r26
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__addsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	8b a7       	std	Y+43, r24	; 0x2b
    1a0c:	9c a7       	std	Y+44, r25	; 0x2c
    1a0e:	ad a7       	std	Y+45, r26	; 0x2d
    1a10:	be a7       	std	Y+46, r27	; 0x2e
	if (__tmp < 1.0)
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e8       	ldi	r20, 0x80	; 128
    1a18:	5f e3       	ldi	r21, 0x3F	; 63
    1a1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a22:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    1a26:	88 23       	and	r24, r24
    1a28:	1c f4       	brge	.+6      	; 0x1a30 <onewireInit+0x35a>
		__ticks = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	8f a7       	std	Y+47, r24	; 0x2f
    1a2e:	be c0       	rjmp	.+380    	; 0x1bac <onewireInit+0x4d6>
	else if (__tmp2 > 65535)
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	3f ef       	ldi	r19, 0xFF	; 255
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	57 e4       	ldi	r21, 0x47	; 71
    1a38:	6b a5       	ldd	r22, Y+43	; 0x2b
    1a3a:	7c a5       	ldd	r23, Y+44	; 0x2c
    1a3c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a3e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a40:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    1a44:	18 16       	cp	r1, r24
    1a46:	0c f0       	brlt	.+2      	; 0x1a4a <onewireInit+0x374>
    1a48:	7b c0       	rjmp	.+246    	; 0x1b40 <onewireInit+0x46a>
	{
		_delay_ms(__us / 1000.0);
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a e7       	ldi	r20, 0x7A	; 122
    1a50:	54 e4       	ldi	r21, 0x44	; 68
    1a52:	6b a1       	ldd	r22, Y+35	; 0x23
    1a54:	7c a1       	ldd	r23, Y+36	; 0x24
    1a56:	8d a1       	ldd	r24, Y+37	; 0x25
    1a58:	9e a1       	ldd	r25, Y+38	; 0x26
    1a5a:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__divsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	88 ab       	std	Y+48, r24	; 0x30
    1a64:	99 ab       	std	Y+49, r25	; 0x31
    1a66:	aa ab       	std	Y+50, r26	; 0x32
    1a68:	bb ab       	std	Y+51, r27	; 0x33

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a ef       	ldi	r20, 0xFA	; 250
    1a70:	54 e4       	ldi	r21, 0x44	; 68
    1a72:	68 a9       	ldd	r22, Y+48	; 0x30
    1a74:	79 a9       	ldd	r23, Y+49	; 0x31
    1a76:	8a a9       	ldd	r24, Y+50	; 0x32
    1a78:	9b a9       	ldd	r25, Y+51	; 0x33
    1a7a:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	8c ab       	std	Y+52, r24	; 0x34
    1a84:	9d ab       	std	Y+53, r25	; 0x35
    1a86:	ae ab       	std	Y+54, r26	; 0x36
    1a88:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	5f e3       	ldi	r21, 0x3F	; 63
    1a92:	6c a9       	ldd	r22, Y+52	; 0x34
    1a94:	7d a9       	ldd	r23, Y+53	; 0x35
    1a96:	8e a9       	ldd	r24, Y+54	; 0x36
    1a98:	9f a9       	ldd	r25, Y+55	; 0x37
    1a9a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    1a9e:	88 23       	and	r24, r24
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <onewireInit+0x3d6>
		__ticks = 1;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	99 af       	std	Y+57, r25	; 0x39
    1aa8:	88 af       	std	Y+56, r24	; 0x38
    1aaa:	3f c0       	rjmp	.+126    	; 0x1b2a <onewireInit+0x454>
	else if (__tmp > 65535)
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	4f e7       	ldi	r20, 0x7F	; 127
    1ab2:	57 e4       	ldi	r21, 0x47	; 71
    1ab4:	6c a9       	ldd	r22, Y+52	; 0x34
    1ab6:	7d a9       	ldd	r23, Y+53	; 0x35
    1ab8:	8e a9       	ldd	r24, Y+54	; 0x36
    1aba:	9f a9       	ldd	r25, Y+55	; 0x37
    1abc:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    1ac0:	18 16       	cp	r1, r24
    1ac2:	4c f5       	brge	.+82     	; 0x1b16 <onewireInit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e2       	ldi	r20, 0x20	; 32
    1aca:	51 e4       	ldi	r21, 0x41	; 65
    1acc:	68 a9       	ldd	r22, Y+48	; 0x30
    1ace:	79 a9       	ldd	r23, Y+49	; 0x31
    1ad0:	8a a9       	ldd	r24, Y+50	; 0x32
    1ad2:	9b a9       	ldd	r25, Y+51	; 0x33
    1ad4:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	bc 01       	movw	r22, r24
    1ade:	cd 01       	movw	r24, r26
    1ae0:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	99 af       	std	Y+57, r25	; 0x39
    1aea:	88 af       	std	Y+56, r24	; 0x38
    1aec:	0f c0       	rjmp	.+30     	; 0x1b0c <onewireInit+0x436>
    1aee:	88 ec       	ldi	r24, 0xC8	; 200
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9b af       	std	Y+59, r25	; 0x3b
    1af4:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1af6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1af8:	9b ad       	ldd	r25, Y+59	; 0x3b
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <onewireInit+0x424>
    1afe:	9b af       	std	Y+59, r25	; 0x3b
    1b00:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b02:	88 ad       	ldd	r24, Y+56	; 0x38
    1b04:	99 ad       	ldd	r25, Y+57	; 0x39
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	99 af       	std	Y+57, r25	; 0x39
    1b0a:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0c:	88 ad       	ldd	r24, Y+56	; 0x38
    1b0e:	99 ad       	ldd	r25, Y+57	; 0x39
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	69 f7       	brne	.-38     	; 0x1aee <onewireInit+0x418>
    1b14:	4b c0       	rjmp	.+150    	; 0x1bac <onewireInit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b16:	6c a9       	ldd	r22, Y+52	; 0x34
    1b18:	7d a9       	ldd	r23, Y+53	; 0x35
    1b1a:	8e a9       	ldd	r24, Y+54	; 0x36
    1b1c:	9f a9       	ldd	r25, Y+55	; 0x37
    1b1e:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	99 af       	std	Y+57, r25	; 0x39
    1b28:	88 af       	std	Y+56, r24	; 0x38
    1b2a:	88 ad       	ldd	r24, Y+56	; 0x38
    1b2c:	99 ad       	ldd	r25, Y+57	; 0x39
    1b2e:	9d af       	std	Y+61, r25	; 0x3d
    1b30:	8c af       	std	Y+60, r24	; 0x3c
    1b32:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b34:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <onewireInit+0x460>
    1b3a:	9d af       	std	Y+61, r25	; 0x3d
    1b3c:	8c af       	std	Y+60, r24	; 0x3c
    1b3e:	36 c0       	rjmp	.+108    	; 0x1bac <onewireInit+0x4d6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	53 e4       	ldi	r21, 0x43	; 67
    1b48:	6f a1       	ldd	r22, Y+39	; 0x27
    1b4a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b4c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b50:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	0c f5       	brge	.+66     	; 0x1b9a <onewireInit+0x4c4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1b58:	6b a5       	ldd	r22, Y+43	; 0x2b
    1b5a:	7c a5       	ldd	r23, Y+44	; 0x2c
    1b5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b60:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	9f af       	std	Y+63, r25	; 0x3f
    1b6a:	8e af       	std	Y+62, r24	; 0x3e
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	80 5c       	subi	r24, 0xC0	; 192
    1b70:	9f 4f       	sbci	r25, 0xFF	; 255
    1b72:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b74:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b76:	fc 01       	movw	r30, r24
    1b78:	31 83       	std	Z+1, r19	; 0x01
    1b7a:	20 83       	st	Z, r18
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	80 5c       	subi	r24, 0xC0	; 192
    1b80:	9f 4f       	sbci	r25, 0xFF	; 255
    1b82:	fc 01       	movw	r30, r24
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <onewireInit+0x4b2>
    1b8c:	9e 01       	movw	r18, r28
    1b8e:	20 5c       	subi	r18, 0xC0	; 192
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
    1b92:	f9 01       	movw	r30, r18
    1b94:	91 83       	std	Z+1, r25	; 0x01
    1b96:	80 83       	st	Z, r24
    1b98:	1c c0       	rjmp	.+56     	; 0x1bd2 <onewireInit+0x4fc>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba2:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	8f a7       	std	Y+47, r24	; 0x2f
    1bac:	ce 01       	movw	r24, r28
    1bae:	8e 5b       	subi	r24, 0xBE	; 190
    1bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb2:	2f a5       	ldd	r18, Y+47	; 0x2f
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bb8:	ce 01       	movw	r24, r28
    1bba:	8e 5b       	subi	r24, 0xBE	; 190
    1bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	80 81       	ld	r24, Z
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	2a 95       	dec	r18
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <onewireInit+0x4ee>
    1bc8:	ce 01       	movw	r24, r28
    1bca:	8e 5b       	subi	r24, 0xBE	; 190
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	fc 01       	movw	r30, r24
    1bd0:	20 83       	st	Z, r18

	_delay_us( 70 );

	response = *portin & mask; //Read input
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	89 57       	subi	r24, 0x79	; 121
    1bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd8:	fc 01       	movw	r30, r24
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	fc 01       	movw	r30, r24
    1be0:	20 81       	ld	r18, Z
    1be2:	ce 01       	movw	r24, r28
    1be4:	87 57       	subi	r24, 0x77	; 119
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	fc 01       	movw	r30, r24
    1bea:	80 81       	ld	r24, Z
    1bec:	82 23       	and	r24, r18
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	9e 01       	movw	r18, r28
    1bf2:	2d 5b       	subi	r18, 0xBD	; 189
    1bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a8 e4       	ldi	r26, 0x48	; 72
    1bfc:	b3 e4       	ldi	r27, 0x43	; 67
    1bfe:	f9 01       	movw	r30, r18
    1c00:	80 83       	st	Z, r24
    1c02:	91 83       	std	Z+1, r25	; 0x01
    1c04:	a2 83       	std	Z+2, r26	; 0x02
    1c06:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1c08:	8e 01       	movw	r16, r28
    1c0a:	09 5b       	subi	r16, 0xB9	; 185
    1c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0e:	ce 01       	movw	r24, r28
    1c10:	8d 5b       	subi	r24, 0xBD	; 189
    1c12:	9f 4f       	sbci	r25, 0xFF	; 255
    1c14:	2b ea       	ldi	r18, 0xAB	; 171
    1c16:	3a ea       	ldi	r19, 0xAA	; 170
    1c18:	4a e2       	ldi	r20, 0x2A	; 42
    1c1a:	50 e4       	ldi	r21, 0x40	; 64
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	f8 01       	movw	r30, r16
    1c30:	80 83       	st	Z, r24
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	a2 83       	std	Z+2, r26	; 0x02
    1c36:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1c38:	8e 01       	movw	r16, r28
    1c3a:	05 5b       	subi	r16, 0xB5	; 181
    1c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3e:	ce 01       	movw	r24, r28
    1c40:	8d 5b       	subi	r24, 0xBD	; 189
    1c42:	9f 4f       	sbci	r25, 0xFF	; 255
    1c44:	fc 01       	movw	r30, r24
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	a2 81       	ldd	r26, Z+2	; 0x02
    1c4c:	b3 81       	ldd	r27, Z+3	; 0x03
    1c4e:	9c 01       	movw	r18, r24
    1c50:	ad 01       	movw	r20, r26
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__addsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	f8 01       	movw	r30, r16
    1c60:	80 83       	st	Z, r24
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	a2 83       	std	Z+2, r26	; 0x02
    1c66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c68:	ce 01       	movw	r24, r28
    1c6a:	89 5b       	subi	r24, 0xB9	; 185
    1c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e8       	ldi	r20, 0x80	; 128
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	fc 01       	movw	r30, r24
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    1c84:	88 23       	and	r24, r24
    1c86:	3c f4       	brge	.+14     	; 0x1c96 <onewireInit+0x5c0>
		__ticks = 1;
    1c88:	ce 01       	movw	r24, r28
    1c8a:	81 5b       	subi	r24, 0xB1	; 177
    1c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8e:	21 e0       	ldi	r18, 0x01	; 1
    1c90:	fc 01       	movw	r30, r24
    1c92:	20 83       	st	Z, r18
    1c94:	30 c1       	rjmp	.+608    	; 0x1ef6 <onewireInit+0x820>
	else if (__tmp2 > 65535)
    1c96:	ce 01       	movw	r24, r28
    1c98:	85 5b       	subi	r24, 0xB5	; 181
    1c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ca0:	4f e7       	ldi	r20, 0x7F	; 127
    1ca2:	57 e4       	ldi	r21, 0x47	; 71
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	60 81       	ld	r22, Z
    1ca8:	71 81       	ldd	r23, Z+1	; 0x01
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	0c f0       	brlt	.+2      	; 0x1cb8 <onewireInit+0x5e2>
    1cb6:	d1 c0       	rjmp	.+418    	; 0x1e5a <onewireInit+0x784>
	{
		_delay_ms(__us / 1000.0);
    1cb8:	ce 01       	movw	r24, r28
    1cba:	8d 5b       	subi	r24, 0xBD	; 189
    1cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	4a e7       	ldi	r20, 0x7A	; 122
    1cc4:	54 e4       	ldi	r21, 0x44	; 68
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	93 81       	ldd	r25, Z+3	; 0x03
    1cd0:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__divsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9e 01       	movw	r18, r28
    1cda:	20 5b       	subi	r18, 0xB0	; 176
    1cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cde:	f9 01       	movw	r30, r18
    1ce0:	80 83       	st	Z, r24
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	a2 83       	std	Z+2, r26	; 0x02
    1ce6:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	8e 01       	movw	r16, r28
    1cea:	0c 5a       	subi	r16, 0xAC	; 172
    1cec:	1f 4f       	sbci	r17, 0xFF	; 255
    1cee:	ce 01       	movw	r24, r28
    1cf0:	80 5b       	subi	r24, 0xB0	; 176
    1cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	4a ef       	ldi	r20, 0xFA	; 250
    1cfa:	54 e4       	ldi	r21, 0x44	; 68
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	f8 01       	movw	r30, r16
    1d10:	80 83       	st	Z, r24
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	a2 83       	std	Z+2, r26	; 0x02
    1d16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d18:	ce 01       	movw	r24, r28
    1d1a:	8c 5a       	subi	r24, 0xAC	; 172
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	fc 01       	movw	r30, r24
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    1d34:	88 23       	and	r24, r24
    1d36:	4c f4       	brge	.+18     	; 0x1d4a <onewireInit+0x674>
		__ticks = 1;
    1d38:	ce 01       	movw	r24, r28
    1d3a:	88 5a       	subi	r24, 0xA8	; 168
    1d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3e:	21 e0       	ldi	r18, 0x01	; 1
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	fc 01       	movw	r30, r24
    1d44:	31 83       	std	Z+1, r19	; 0x01
    1d46:	20 83       	st	Z, r18
    1d48:	6d c0       	rjmp	.+218    	; 0x1e24 <onewireInit+0x74e>
	else if (__tmp > 65535)
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	8c 5a       	subi	r24, 0xAC	; 172
    1d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	3f ef       	ldi	r19, 0xFF	; 255
    1d54:	4f e7       	ldi	r20, 0x7F	; 127
    1d56:	57 e4       	ldi	r21, 0x47	; 71
    1d58:	fc 01       	movw	r30, r24
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    1d66:	18 16       	cp	r1, r24
    1d68:	0c f0       	brlt	.+2      	; 0x1d6c <onewireInit+0x696>
    1d6a:	4a c0       	rjmp	.+148    	; 0x1e00 <onewireInit+0x72a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	80 5b       	subi	r24, 0xB0	; 176
    1d70:	9f 4f       	sbci	r25, 0xFF	; 255
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	51 e4       	ldi	r21, 0x41	; 65
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	60 81       	ld	r22, Z
    1d7e:	71 81       	ldd	r23, Z+1	; 0x01
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	8e 01       	movw	r16, r28
    1d8e:	08 5a       	subi	r16, 0xA8	; 168
    1d90:	1f 4f       	sbci	r17, 0xFF	; 255
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	f8 01       	movw	r30, r16
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	80 83       	st	Z, r24
    1da4:	24 c0       	rjmp	.+72     	; 0x1dee <onewireInit+0x718>
    1da6:	ce 01       	movw	r24, r28
    1da8:	86 5a       	subi	r24, 0xA6	; 166
    1daa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dac:	28 ec       	ldi	r18, 0xC8	; 200
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	fc 01       	movw	r30, r24
    1db2:	31 83       	std	Z+1, r19	; 0x01
    1db4:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1db6:	ce 01       	movw	r24, r28
    1db8:	86 5a       	subi	r24, 0xA6	; 166
    1dba:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	80 81       	ld	r24, Z
    1dc0:	91 81       	ldd	r25, Z+1	; 0x01
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <onewireInit+0x6ec>
    1dc6:	9e 01       	movw	r18, r28
    1dc8:	26 5a       	subi	r18, 0xA6	; 166
    1dca:	3f 4f       	sbci	r19, 0xFF	; 255
    1dcc:	f9 01       	movw	r30, r18
    1dce:	91 83       	std	Z+1, r25	; 0x01
    1dd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	88 5a       	subi	r24, 0xA8	; 168
    1dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd8:	9e 01       	movw	r18, r28
    1dda:	28 5a       	subi	r18, 0xA8	; 168
    1ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dde:	f9 01       	movw	r30, r18
    1de0:	20 81       	ld	r18, Z
    1de2:	31 81       	ldd	r19, Z+1	; 0x01
    1de4:	21 50       	subi	r18, 0x01	; 1
    1de6:	31 09       	sbc	r19, r1
    1de8:	fc 01       	movw	r30, r24
    1dea:	31 83       	std	Z+1, r19	; 0x01
    1dec:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dee:	ce 01       	movw	r24, r28
    1df0:	88 5a       	subi	r24, 0xA8	; 168
    1df2:	9f 4f       	sbci	r25, 0xFF	; 255
    1df4:	fc 01       	movw	r30, r24
    1df6:	80 81       	ld	r24, Z
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	a1 f6       	brne	.-88     	; 0x1da6 <onewireInit+0x6d0>
    1dfe:	7b c0       	rjmp	.+246    	; 0x1ef6 <onewireInit+0x820>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e00:	8e 01       	movw	r16, r28
    1e02:	08 5a       	subi	r16, 0xA8	; 168
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	ce 01       	movw	r24, r28
    1e08:	8c 5a       	subi	r24, 0xAC	; 172
    1e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	f8 01       	movw	r30, r16
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
    1e24:	ce 01       	movw	r24, r28
    1e26:	84 5a       	subi	r24, 0xA4	; 164
    1e28:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2a:	9e 01       	movw	r18, r28
    1e2c:	28 5a       	subi	r18, 0xA8	; 168
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	f9 01       	movw	r30, r18
    1e32:	20 81       	ld	r18, Z
    1e34:	31 81       	ldd	r19, Z+1	; 0x01
    1e36:	fc 01       	movw	r30, r24
    1e38:	31 83       	std	Z+1, r19	; 0x01
    1e3a:	20 83       	st	Z, r18
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	84 5a       	subi	r24, 0xA4	; 164
    1e40:	9f 4f       	sbci	r25, 0xFF	; 255
    1e42:	fc 01       	movw	r30, r24
    1e44:	80 81       	ld	r24, Z
    1e46:	91 81       	ldd	r25, Z+1	; 0x01
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <onewireInit+0x772>
    1e4c:	9e 01       	movw	r18, r28
    1e4e:	24 5a       	subi	r18, 0xA4	; 164
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	f9 01       	movw	r30, r18
    1e54:	91 83       	std	Z+1, r25	; 0x01
    1e56:	80 83       	st	Z, r24
    1e58:	4e c0       	rjmp	.+156    	; 0x1ef6 <onewireInit+0x820>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	89 5b       	subi	r24, 0xB9	; 185
    1e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4f e7       	ldi	r20, 0x7F	; 127
    1e66:	53 e4       	ldi	r21, 0x43	; 67
    1e68:	fc 01       	movw	r30, r24
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	93 81       	ldd	r25, Z+3	; 0x03
    1e72:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	6c f5       	brge	.+90     	; 0x1ed4 <onewireInit+0x7fe>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	02 5a       	subi	r16, 0xA2	; 162
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	ce 01       	movw	r24, r28
    1e82:	85 5b       	subi	r24, 0xB5	; 181
    1e84:	9f 4f       	sbci	r25, 0xFF	; 255
    1e86:	fc 01       	movw	r30, r24
    1e88:	60 81       	ld	r22, Z
    1e8a:	71 81       	ldd	r23, Z+1	; 0x01
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	f8 01       	movw	r30, r16
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	80 83       	st	Z, r24
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	80 5a       	subi	r24, 0xA0	; 160
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	9e 01       	movw	r18, r28
    1ea6:	22 5a       	subi	r18, 0xA2	; 162
    1ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eaa:	f9 01       	movw	r30, r18
    1eac:	20 81       	ld	r18, Z
    1eae:	31 81       	ldd	r19, Z+1	; 0x01
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	31 83       	std	Z+1, r19	; 0x01
    1eb4:	20 83       	st	Z, r18
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	80 5a       	subi	r24, 0xA0	; 160
    1eba:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <onewireInit+0x7ec>
    1ec6:	9e 01       	movw	r18, r28
    1ec8:	20 5a       	subi	r18, 0xA0	; 160
    1eca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ecc:	f9 01       	movw	r30, r18
    1ece:	91 83       	std	Z+1, r25	; 0x01
    1ed0:	80 83       	st	Z, r24
    1ed2:	28 c0       	rjmp	.+80     	; 0x1f24 <onewireInit+0x84e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ed4:	8e 01       	movw	r16, r28
    1ed6:	01 5b       	subi	r16, 0xB1	; 177
    1ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eda:	ce 01       	movw	r24, r28
    1edc:	89 5b       	subi	r24, 0xB9	; 185
    1ede:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	60 81       	ld	r22, Z
    1ee4:	71 81       	ldd	r23, Z+1	; 0x01
    1ee6:	82 81       	ldd	r24, Z+2	; 0x02
    1ee8:	93 81       	ldd	r25, Z+3	; 0x03
    1eea:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	80 83       	st	Z, r24
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	8e 59       	subi	r24, 0x9E	; 158
    1efa:	9f 4f       	sbci	r25, 0xFF	; 255
    1efc:	9e 01       	movw	r18, r28
    1efe:	21 5b       	subi	r18, 0xB1	; 177
    1f00:	3f 4f       	sbci	r19, 0xFF	; 255
    1f02:	f9 01       	movw	r30, r18
    1f04:	20 81       	ld	r18, Z
    1f06:	fc 01       	movw	r30, r24
    1f08:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	8e 59       	subi	r24, 0x9E	; 158
    1f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f10:	fc 01       	movw	r30, r24
    1f12:	80 81       	ld	r24, Z
    1f14:	28 2f       	mov	r18, r24
    1f16:	2a 95       	dec	r18
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <onewireInit+0x840>
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	8e 59       	subi	r24, 0x9E	; 158
    1f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f20:	fc 01       	movw	r30, r24
    1f22:	20 83       	st	Z, r18

	_delay_us( 200 );

	*port |= mask; //Write 1 to output
    1f24:	ce 01       	movw	r24, r28
    1f26:	8d 57       	subi	r24, 0x7D	; 125
    1f28:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	80 81       	ld	r24, Z
    1f2e:	91 81       	ldd	r25, Z+1	; 0x01
    1f30:	fc 01       	movw	r30, r24
    1f32:	20 81       	ld	r18, Z
    1f34:	ce 01       	movw	r24, r28
    1f36:	87 57       	subi	r24, 0x77	; 119
    1f38:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	80 81       	ld	r24, Z
    1f3e:	28 2b       	or	r18, r24
    1f40:	ce 01       	movw	r24, r28
    1f42:	8d 57       	subi	r24, 0x7D	; 125
    1f44:	9f 4f       	sbci	r25, 0xFF	; 255
    1f46:	fc 01       	movw	r30, r24
    1f48:	80 81       	ld	r24, Z
    1f4a:	91 81       	ldd	r25, Z+1	; 0x01
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	20 83       	st	Z, r18
	*direction |= mask; //Set port to output
    1f50:	ce 01       	movw	r24, r28
    1f52:	8b 57       	subi	r24, 0x7B	; 123
    1f54:	9f 4f       	sbci	r25, 0xFF	; 255
    1f56:	fc 01       	movw	r30, r24
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	20 81       	ld	r18, Z
    1f60:	ce 01       	movw	r24, r28
    1f62:	87 57       	subi	r24, 0x77	; 119
    1f64:	9f 4f       	sbci	r25, 0xFF	; 255
    1f66:	fc 01       	movw	r30, r24
    1f68:	80 81       	ld	r24, Z
    1f6a:	28 2b       	or	r18, r24
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	8b 57       	subi	r24, 0x7B	; 123
    1f70:	9f 4f       	sbci	r25, 0xFF	; 255
    1f72:	fc 01       	movw	r30, r24
    1f74:	80 81       	ld	r24, Z
    1f76:	91 81       	ldd	r25, Z+1	; 0x01
    1f78:	fc 01       	movw	r30, r24
    1f7a:	20 83       	st	Z, r18
    1f7c:	9e 01       	movw	r18, r28
    1f7e:	2d 59       	subi	r18, 0x9D	; 157
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a6 e1       	ldi	r26, 0x16	; 22
    1f88:	b4 e4       	ldi	r27, 0x44	; 68
    1f8a:	f9 01       	movw	r30, r18
    1f8c:	80 83       	st	Z, r24
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	a2 83       	std	Z+2, r26	; 0x02
    1f92:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1f94:	8e 01       	movw	r16, r28
    1f96:	09 59       	subi	r16, 0x99	; 153
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	8d 59       	subi	r24, 0x9D	; 157
    1f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa0:	2b ea       	ldi	r18, 0xAB	; 171
    1fa2:	3a ea       	ldi	r19, 0xAA	; 170
    1fa4:	4a e2       	ldi	r20, 0x2A	; 42
    1fa6:	50 e4       	ldi	r21, 0x40	; 64
    1fa8:	fc 01       	movw	r30, r24
    1faa:	60 81       	ld	r22, Z
    1fac:	71 81       	ldd	r23, Z+1	; 0x01
    1fae:	82 81       	ldd	r24, Z+2	; 0x02
    1fb0:	93 81       	ldd	r25, Z+3	; 0x03
    1fb2:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	f8 01       	movw	r30, r16
    1fbc:	80 83       	st	Z, r24
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	a2 83       	std	Z+2, r26	; 0x02
    1fc2:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1fc4:	8e 01       	movw	r16, r28
    1fc6:	05 59       	subi	r16, 0x95	; 149
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fca:	ce 01       	movw	r24, r28
    1fcc:	8d 59       	subi	r24, 0x9D	; 157
    1fce:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	80 81       	ld	r24, Z
    1fd4:	91 81       	ldd	r25, Z+1	; 0x01
    1fd6:	a2 81       	ldd	r26, Z+2	; 0x02
    1fd8:	b3 81       	ldd	r27, Z+3	; 0x03
    1fda:	9c 01       	movw	r18, r24
    1fdc:	ad 01       	movw	r20, r26
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__addsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	f8 01       	movw	r30, r16
    1fec:	80 83       	st	Z, r24
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	a2 83       	std	Z+2, r26	; 0x02
    1ff2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	89 59       	subi	r24, 0x99	; 153
    1ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	fc 01       	movw	r30, r24
    2004:	60 81       	ld	r22, Z
    2006:	71 81       	ldd	r23, Z+1	; 0x01
    2008:	82 81       	ldd	r24, Z+2	; 0x02
    200a:	93 81       	ldd	r25, Z+3	; 0x03
    200c:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    2010:	88 23       	and	r24, r24
    2012:	3c f4       	brge	.+14     	; 0x2022 <onewireInit+0x94c>
		__ticks = 1;
    2014:	ce 01       	movw	r24, r28
    2016:	81 59       	subi	r24, 0x91	; 145
    2018:	9f 4f       	sbci	r25, 0xFF	; 255
    201a:	21 e0       	ldi	r18, 0x01	; 1
    201c:	fc 01       	movw	r30, r24
    201e:	20 83       	st	Z, r18
    2020:	30 c1       	rjmp	.+608    	; 0x2282 <onewireInit+0xbac>
	else if (__tmp2 > 65535)
    2022:	ce 01       	movw	r24, r28
    2024:	85 59       	subi	r24, 0x95	; 149
    2026:	9f 4f       	sbci	r25, 0xFF	; 255
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	fc 01       	movw	r30, r24
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    203e:	18 16       	cp	r1, r24
    2040:	0c f0       	brlt	.+2      	; 0x2044 <onewireInit+0x96e>
    2042:	d1 c0       	rjmp	.+418    	; 0x21e6 <onewireInit+0xb10>
	{
		_delay_ms(__us / 1000.0);
    2044:	ce 01       	movw	r24, r28
    2046:	8d 59       	subi	r24, 0x9D	; 157
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	4a e7       	ldi	r20, 0x7A	; 122
    2050:	54 e4       	ldi	r21, 0x44	; 68
    2052:	fc 01       	movw	r30, r24
    2054:	60 81       	ld	r22, Z
    2056:	71 81       	ldd	r23, Z+1	; 0x01
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	93 81       	ldd	r25, Z+3	; 0x03
    205c:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__divsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	9e 01       	movw	r18, r28
    2066:	20 59       	subi	r18, 0x90	; 144
    2068:	3f 4f       	sbci	r19, 0xFF	; 255
    206a:	f9 01       	movw	r30, r18
    206c:	80 83       	st	Z, r24
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	a2 83       	std	Z+2, r26	; 0x02
    2072:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2074:	8e 01       	movw	r16, r28
    2076:	0c 58       	subi	r16, 0x8C	; 140
    2078:	1f 4f       	sbci	r17, 0xFF	; 255
    207a:	ce 01       	movw	r24, r28
    207c:	80 59       	subi	r24, 0x90	; 144
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a ef       	ldi	r20, 0xFA	; 250
    2086:	54 e4       	ldi	r21, 0x44	; 68
    2088:	fc 01       	movw	r30, r24
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	f8 01       	movw	r30, r16
    209c:	80 83       	st	Z, r24
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	a2 83       	std	Z+2, r26	; 0x02
    20a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a4:	ce 01       	movw	r24, r28
    20a6:	8c 58       	subi	r24, 0x8C	; 140
    20a8:	9f 4f       	sbci	r25, 0xFF	; 255
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e8       	ldi	r20, 0x80	; 128
    20b0:	5f e3       	ldi	r21, 0x3F	; 63
    20b2:	fc 01       	movw	r30, r24
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	4c f4       	brge	.+18     	; 0x20d6 <onewireInit+0xa00>
		__ticks = 1;
    20c4:	ce 01       	movw	r24, r28
    20c6:	88 58       	subi	r24, 0x88	; 136
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	21 e0       	ldi	r18, 0x01	; 1
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	fc 01       	movw	r30, r24
    20d0:	31 83       	std	Z+1, r19	; 0x01
    20d2:	20 83       	st	Z, r18
    20d4:	6d c0       	rjmp	.+218    	; 0x21b0 <onewireInit+0xada>
	else if (__tmp > 65535)
    20d6:	ce 01       	movw	r24, r28
    20d8:	8c 58       	subi	r24, 0x8C	; 140
    20da:	9f 4f       	sbci	r25, 0xFF	; 255
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	fc 01       	movw	r30, r24
    20e6:	60 81       	ld	r22, Z
    20e8:	71 81       	ldd	r23, Z+1	; 0x01
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	93 81       	ldd	r25, Z+3	; 0x03
    20ee:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    20f2:	18 16       	cp	r1, r24
    20f4:	0c f0       	brlt	.+2      	; 0x20f8 <onewireInit+0xa22>
    20f6:	4a c0       	rjmp	.+148    	; 0x218c <onewireInit+0xab6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f8:	ce 01       	movw	r24, r28
    20fa:	80 59       	subi	r24, 0x90	; 144
    20fc:	9f 4f       	sbci	r25, 0xFF	; 255
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e2       	ldi	r20, 0x20	; 32
    2104:	51 e4       	ldi	r21, 0x41	; 65
    2106:	fc 01       	movw	r30, r24
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	8e 01       	movw	r16, r28
    211a:	08 58       	subi	r16, 0x88	; 136
    211c:	1f 4f       	sbci	r17, 0xFF	; 255
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	f8 01       	movw	r30, r16
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	80 83       	st	Z, r24
    2130:	24 c0       	rjmp	.+72     	; 0x217a <onewireInit+0xaa4>
    2132:	ce 01       	movw	r24, r28
    2134:	86 58       	subi	r24, 0x86	; 134
    2136:	9f 4f       	sbci	r25, 0xFF	; 255
    2138:	28 ec       	ldi	r18, 0xC8	; 200
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	fc 01       	movw	r30, r24
    213e:	31 83       	std	Z+1, r19	; 0x01
    2140:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2142:	ce 01       	movw	r24, r28
    2144:	86 58       	subi	r24, 0x86	; 134
    2146:	9f 4f       	sbci	r25, 0xFF	; 255
    2148:	fc 01       	movw	r30, r24
    214a:	80 81       	ld	r24, Z
    214c:	91 81       	ldd	r25, Z+1	; 0x01
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <onewireInit+0xa78>
    2152:	9e 01       	movw	r18, r28
    2154:	26 58       	subi	r18, 0x86	; 134
    2156:	3f 4f       	sbci	r19, 0xFF	; 255
    2158:	f9 01       	movw	r30, r18
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	ce 01       	movw	r24, r28
    2160:	88 58       	subi	r24, 0x88	; 136
    2162:	9f 4f       	sbci	r25, 0xFF	; 255
    2164:	9e 01       	movw	r18, r28
    2166:	28 58       	subi	r18, 0x88	; 136
    2168:	3f 4f       	sbci	r19, 0xFF	; 255
    216a:	f9 01       	movw	r30, r18
    216c:	20 81       	ld	r18, Z
    216e:	31 81       	ldd	r19, Z+1	; 0x01
    2170:	21 50       	subi	r18, 0x01	; 1
    2172:	31 09       	sbc	r19, r1
    2174:	fc 01       	movw	r30, r24
    2176:	31 83       	std	Z+1, r19	; 0x01
    2178:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217a:	ce 01       	movw	r24, r28
    217c:	88 58       	subi	r24, 0x88	; 136
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	fc 01       	movw	r30, r24
    2182:	80 81       	ld	r24, Z
    2184:	91 81       	ldd	r25, Z+1	; 0x01
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	a1 f6       	brne	.-88     	; 0x2132 <onewireInit+0xa5c>
    218a:	7b c0       	rjmp	.+246    	; 0x2282 <onewireInit+0xbac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218c:	8e 01       	movw	r16, r28
    218e:	08 58       	subi	r16, 0x88	; 136
    2190:	1f 4f       	sbci	r17, 0xFF	; 255
    2192:	ce 01       	movw	r24, r28
    2194:	8c 58       	subi	r24, 0x8C	; 140
    2196:	9f 4f       	sbci	r25, 0xFF	; 255
    2198:	fc 01       	movw	r30, r24
    219a:	60 81       	ld	r22, Z
    219c:	71 81       	ldd	r23, Z+1	; 0x01
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	f8 01       	movw	r30, r16
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	80 83       	st	Z, r24
    21b0:	ce 01       	movw	r24, r28
    21b2:	84 58       	subi	r24, 0x84	; 132
    21b4:	9f 4f       	sbci	r25, 0xFF	; 255
    21b6:	9e 01       	movw	r18, r28
    21b8:	28 58       	subi	r18, 0x88	; 136
    21ba:	3f 4f       	sbci	r19, 0xFF	; 255
    21bc:	f9 01       	movw	r30, r18
    21be:	20 81       	ld	r18, Z
    21c0:	31 81       	ldd	r19, Z+1	; 0x01
    21c2:	fc 01       	movw	r30, r24
    21c4:	31 83       	std	Z+1, r19	; 0x01
    21c6:	20 83       	st	Z, r18
    21c8:	ce 01       	movw	r24, r28
    21ca:	84 58       	subi	r24, 0x84	; 132
    21cc:	9f 4f       	sbci	r25, 0xFF	; 255
    21ce:	fc 01       	movw	r30, r24
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <onewireInit+0xafe>
    21d8:	9e 01       	movw	r18, r28
    21da:	24 58       	subi	r18, 0x84	; 132
    21dc:	3f 4f       	sbci	r19, 0xFF	; 255
    21de:	f9 01       	movw	r30, r18
    21e0:	91 83       	std	Z+1, r25	; 0x01
    21e2:	80 83       	st	Z, r24
    21e4:	4e c0       	rjmp	.+156    	; 0x2282 <onewireInit+0xbac>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    21e6:	ce 01       	movw	r24, r28
    21e8:	89 59       	subi	r24, 0x99	; 153
    21ea:	9f 4f       	sbci	r25, 0xFF	; 255
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4f e7       	ldi	r20, 0x7F	; 127
    21f2:	53 e4       	ldi	r21, 0x43	; 67
    21f4:	fc 01       	movw	r30, r24
    21f6:	60 81       	ld	r22, Z
    21f8:	71 81       	ldd	r23, Z+1	; 0x01
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2202:	18 16       	cp	r1, r24
    2204:	6c f5       	brge	.+90     	; 0x2260 <onewireInit+0xb8a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2206:	8e 01       	movw	r16, r28
    2208:	02 58       	subi	r16, 0x82	; 130
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
    220c:	ce 01       	movw	r24, r28
    220e:	85 59       	subi	r24, 0x95	; 149
    2210:	9f 4f       	sbci	r25, 0xFF	; 255
    2212:	fc 01       	movw	r30, r24
    2214:	60 81       	ld	r22, Z
    2216:	71 81       	ldd	r23, Z+1	; 0x01
    2218:	82 81       	ldd	r24, Z+2	; 0x02
    221a:	93 81       	ldd	r25, Z+3	; 0x03
    221c:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	f8 01       	movw	r30, r16
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
    222a:	ce 01       	movw	r24, r28
    222c:	80 58       	subi	r24, 0x80	; 128
    222e:	9f 4f       	sbci	r25, 0xFF	; 255
    2230:	9e 01       	movw	r18, r28
    2232:	22 58       	subi	r18, 0x82	; 130
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	f9 01       	movw	r30, r18
    2238:	20 81       	ld	r18, Z
    223a:	31 81       	ldd	r19, Z+1	; 0x01
    223c:	fc 01       	movw	r30, r24
    223e:	31 83       	std	Z+1, r19	; 0x01
    2240:	20 83       	st	Z, r18
    2242:	ce 01       	movw	r24, r28
    2244:	80 58       	subi	r24, 0x80	; 128
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	fc 01       	movw	r30, r24
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <onewireInit+0xb78>
    2252:	9e 01       	movw	r18, r28
    2254:	20 58       	subi	r18, 0x80	; 128
    2256:	3f 4f       	sbci	r19, 0xFF	; 255
    2258:	f9 01       	movw	r30, r18
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
    225e:	28 c0       	rjmp	.+80     	; 0x22b0 <onewireInit+0xbda>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2260:	8e 01       	movw	r16, r28
    2262:	01 59       	subi	r16, 0x91	; 145
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	ce 01       	movw	r24, r28
    2268:	89 59       	subi	r24, 0x99	; 153
    226a:	9f 4f       	sbci	r25, 0xFF	; 255
    226c:	fc 01       	movw	r30, r24
    226e:	60 81       	ld	r22, Z
    2270:	71 81       	ldd	r23, Z+1	; 0x01
    2272:	82 81       	ldd	r24, Z+2	; 0x02
    2274:	93 81       	ldd	r25, Z+3	; 0x03
    2276:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	f8 01       	movw	r30, r16
    2280:	80 83       	st	Z, r24
    2282:	ce 01       	movw	r24, r28
    2284:	8e 57       	subi	r24, 0x7E	; 126
    2286:	9f 4f       	sbci	r25, 0xFF	; 255
    2288:	9e 01       	movw	r18, r28
    228a:	21 59       	subi	r18, 0x91	; 145
    228c:	3f 4f       	sbci	r19, 0xFF	; 255
    228e:	f9 01       	movw	r30, r18
    2290:	20 81       	ld	r18, Z
    2292:	fc 01       	movw	r30, r24
    2294:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2296:	ce 01       	movw	r24, r28
    2298:	8e 57       	subi	r24, 0x7E	; 126
    229a:	9f 4f       	sbci	r25, 0xFF	; 255
    229c:	fc 01       	movw	r30, r24
    229e:	80 81       	ld	r24, Z
    22a0:	28 2f       	mov	r18, r24
    22a2:	2a 95       	dec	r18
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <onewireInit+0xbcc>
    22a6:	ce 01       	movw	r24, r28
    22a8:	8e 57       	subi	r24, 0x7E	; 126
    22aa:	9f 4f       	sbci	r25, 0xFF	; 255
    22ac:	fc 01       	movw	r30, r24
    22ae:	20 83       	st	Z, r18

	_delay_us( 600 );

	SREG = sreg; //Restore status register
    22b0:	8f e5       	ldi	r24, 0x5F	; 95
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	2a 81       	ldd	r18, Y+2	; 0x02
    22b6:	fc 01       	movw	r30, r24
    22b8:	20 83       	st	Z, r18

	return response != 0 ? ONEWIRE_ERROR_COMM : ONEWIRE_ERROR_OK;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	99 81       	ldd	r25, Y+1	; 0x01
    22be:	99 23       	and	r25, r25
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <onewireInit+0xbee>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
}
    22c4:	c7 57       	subi	r28, 0x77	; 119
    22c6:	df 4f       	sbci	r29, 0xFF	; 255
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	df 91       	pop	r29
    22d4:	cf 91       	pop	r28
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret

000022dc <onewireWriteBit>:

//! Sends a single bit over the 1wire bus
uint8_t onewireWriteBit( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t bit )
{
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	c9 58       	subi	r28, 0x89	; 137
    22ea:	d1 09       	sbc	r29, r1
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	fe 01       	movw	r30, r28
    22f8:	ee 57       	subi	r30, 0x7E	; 126
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	80 83       	st	Z, r24
    2300:	ce 01       	movw	r24, r28
    2302:	8c 57       	subi	r24, 0x7C	; 124
    2304:	9f 4f       	sbci	r25, 0xFF	; 255
    2306:	fc 01       	movw	r30, r24
    2308:	71 83       	std	Z+1, r23	; 0x01
    230a:	60 83       	st	Z, r22
    230c:	ce 01       	movw	r24, r28
    230e:	8a 57       	subi	r24, 0x7A	; 122
    2310:	9f 4f       	sbci	r25, 0xFF	; 255
    2312:	fc 01       	movw	r30, r24
    2314:	51 83       	std	Z+1, r21	; 0x01
    2316:	40 83       	st	Z, r20
    2318:	ce 01       	movw	r24, r28
    231a:	88 57       	subi	r24, 0x78	; 120
    231c:	9f 4f       	sbci	r25, 0xFF	; 255
    231e:	fc 01       	movw	r30, r24
    2320:	20 83       	st	Z, r18
    2322:	ce 01       	movw	r24, r28
    2324:	87 57       	subi	r24, 0x77	; 119
    2326:	9f 4f       	sbci	r25, 0xFF	; 255
    2328:	fc 01       	movw	r30, r24
    232a:	00 83       	st	Z, r16
	uint8_t sreg = SREG;
    232c:	8f e5       	ldi	r24, 0x5F	; 95
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	fc 01       	movw	r30, r24
    2332:	80 81       	ld	r24, Z
    2334:	89 83       	std	Y+1, r24	; 0x01

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	*port |= mask; //Write 1 to output
    2336:	ce 01       	movw	r24, r28
    2338:	8e 57       	subi	r24, 0x7E	; 126
    233a:	9f 4f       	sbci	r25, 0xFF	; 255
    233c:	fc 01       	movw	r30, r24
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	fc 01       	movw	r30, r24
    2344:	20 81       	ld	r18, Z
    2346:	ce 01       	movw	r24, r28
    2348:	88 57       	subi	r24, 0x78	; 120
    234a:	9f 4f       	sbci	r25, 0xFF	; 255
    234c:	fc 01       	movw	r30, r24
    234e:	80 81       	ld	r24, Z
    2350:	28 2b       	or	r18, r24
    2352:	ce 01       	movw	r24, r28
    2354:	8e 57       	subi	r24, 0x7E	; 126
    2356:	9f 4f       	sbci	r25, 0xFF	; 255
    2358:	fc 01       	movw	r30, r24
    235a:	80 81       	ld	r24, Z
    235c:	91 81       	ldd	r25, Z+1	; 0x01
    235e:	fc 01       	movw	r30, r24
    2360:	20 83       	st	Z, r18
	*direction |= mask;
    2362:	ce 01       	movw	r24, r28
    2364:	8c 57       	subi	r24, 0x7C	; 124
    2366:	9f 4f       	sbci	r25, 0xFF	; 255
    2368:	fc 01       	movw	r30, r24
    236a:	80 81       	ld	r24, Z
    236c:	91 81       	ldd	r25, Z+1	; 0x01
    236e:	fc 01       	movw	r30, r24
    2370:	20 81       	ld	r18, Z
    2372:	ce 01       	movw	r24, r28
    2374:	88 57       	subi	r24, 0x78	; 120
    2376:	9f 4f       	sbci	r25, 0xFF	; 255
    2378:	fc 01       	movw	r30, r24
    237a:	80 81       	ld	r24, Z
    237c:	28 2b       	or	r18, r24
    237e:	ce 01       	movw	r24, r28
    2380:	8c 57       	subi	r24, 0x7C	; 124
    2382:	9f 4f       	sbci	r25, 0xFF	; 255
    2384:	fc 01       	movw	r30, r24
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	fc 01       	movw	r30, r24
    238c:	20 83       	st	Z, r18
	*port &= ~mask; //Write 0 to output
    238e:	ce 01       	movw	r24, r28
    2390:	8e 57       	subi	r24, 0x7E	; 126
    2392:	9f 4f       	sbci	r25, 0xFF	; 255
    2394:	fc 01       	movw	r30, r24
    2396:	80 81       	ld	r24, Z
    2398:	91 81       	ldd	r25, Z+1	; 0x01
    239a:	fc 01       	movw	r30, r24
    239c:	80 81       	ld	r24, Z
    239e:	28 2f       	mov	r18, r24
    23a0:	ce 01       	movw	r24, r28
    23a2:	88 57       	subi	r24, 0x78	; 120
    23a4:	9f 4f       	sbci	r25, 0xFF	; 255
    23a6:	fc 01       	movw	r30, r24
    23a8:	80 81       	ld	r24, Z
    23aa:	80 95       	com	r24
    23ac:	82 23       	and	r24, r18
    23ae:	28 2f       	mov	r18, r24
    23b0:	ce 01       	movw	r24, r28
    23b2:	8e 57       	subi	r24, 0x7E	; 126
    23b4:	9f 4f       	sbci	r25, 0xFF	; 255
    23b6:	fc 01       	movw	r30, r24
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	fc 01       	movw	r30, r24
    23be:	20 83       	st	Z, r18

	if ( bit != 0 ) _delay_us( 8 );
    23c0:	ce 01       	movw	r24, r28
    23c2:	87 57       	subi	r24, 0x77	; 119
    23c4:	9f 4f       	sbci	r25, 0xFF	; 255
    23c6:	fc 01       	movw	r30, r24
    23c8:	80 81       	ld	r24, Z
    23ca:	88 23       	and	r24, r24
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <onewireWriteBit+0xf4>
    23ce:	f0 c0       	rjmp	.+480    	; 0x25b0 <onewireWriteBit+0x2d4>
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	a0 e0       	ldi	r26, 0x00	; 0
    23d6:	b1 e4       	ldi	r27, 0x41	; 65
    23d8:	8a 83       	std	Y+2, r24	; 0x02
    23da:	9b 83       	std	Y+3, r25	; 0x03
    23dc:	ac 83       	std	Y+4, r26	; 0x04
    23de:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    23e0:	2b ea       	ldi	r18, 0xAB	; 171
    23e2:	3a ea       	ldi	r19, 0xAA	; 170
    23e4:	4a e2       	ldi	r20, 0x2A	; 42
    23e6:	50 e4       	ldi	r21, 0x40	; 64
    23e8:	6a 81       	ldd	r22, Y+2	; 0x02
    23ea:	7b 81       	ldd	r23, Y+3	; 0x03
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	9d 81       	ldd	r25, Y+5	; 0x05
    23f0:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	8e 83       	std	Y+6, r24	; 0x06
    23fa:	9f 83       	std	Y+7, r25	; 0x07
    23fc:	a8 87       	std	Y+8, r26	; 0x08
    23fe:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	ac 81       	ldd	r26, Y+4	; 0x04
    2406:	bd 81       	ldd	r27, Y+5	; 0x05
    2408:	9c 01       	movw	r18, r24
    240a:	ad 01       	movw	r20, r26
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__addsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	8a 87       	std	Y+10, r24	; 0x0a
    241a:	9b 87       	std	Y+11, r25	; 0x0b
    241c:	ac 87       	std	Y+12, r26	; 0x0c
    241e:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	5f e3       	ldi	r21, 0x3F	; 63
    2428:	6e 81       	ldd	r22, Y+6	; 0x06
    242a:	7f 81       	ldd	r23, Y+7	; 0x07
    242c:	88 85       	ldd	r24, Y+8	; 0x08
    242e:	99 85       	ldd	r25, Y+9	; 0x09
    2430:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    2434:	88 23       	and	r24, r24
    2436:	1c f4       	brge	.+6      	; 0x243e <onewireWriteBit+0x162>
		__ticks = 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	8e 87       	std	Y+14, r24	; 0x0e
    243c:	b2 c0       	rjmp	.+356    	; 0x25a2 <onewireWriteBit+0x2c6>
	else if (__tmp2 > 65535)
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	3f ef       	ldi	r19, 0xFF	; 255
    2442:	4f e7       	ldi	r20, 0x7F	; 127
    2444:	57 e4       	ldi	r21, 0x47	; 71
    2446:	6a 85       	ldd	r22, Y+10	; 0x0a
    2448:	7b 85       	ldd	r23, Y+11	; 0x0b
    244a:	8c 85       	ldd	r24, Y+12	; 0x0c
    244c:	9d 85       	ldd	r25, Y+13	; 0x0d
    244e:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2452:	18 16       	cp	r1, r24
    2454:	0c f0       	brlt	.+2      	; 0x2458 <onewireWriteBit+0x17c>
    2456:	7b c0       	rjmp	.+246    	; 0x254e <onewireWriteBit+0x272>
	{
		_delay_ms(__us / 1000.0);
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	4a e7       	ldi	r20, 0x7A	; 122
    245e:	54 e4       	ldi	r21, 0x44	; 68
    2460:	6a 81       	ldd	r22, Y+2	; 0x02
    2462:	7b 81       	ldd	r23, Y+3	; 0x03
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	9d 81       	ldd	r25, Y+5	; 0x05
    2468:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__divsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	8f 87       	std	Y+15, r24	; 0x0f
    2472:	98 8b       	std	Y+16, r25	; 0x10
    2474:	a9 8b       	std	Y+17, r26	; 0x11
    2476:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	4a ef       	ldi	r20, 0xFA	; 250
    247e:	54 e4       	ldi	r21, 0x44	; 68
    2480:	6f 85       	ldd	r22, Y+15	; 0x0f
    2482:	78 89       	ldd	r23, Y+16	; 0x10
    2484:	89 89       	ldd	r24, Y+17	; 0x11
    2486:	9a 89       	ldd	r25, Y+18	; 0x12
    2488:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	8b 8b       	std	Y+19, r24	; 0x13
    2492:	9c 8b       	std	Y+20, r25	; 0x14
    2494:	ad 8b       	std	Y+21, r26	; 0x15
    2496:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e8       	ldi	r20, 0x80	; 128
    249e:	5f e3       	ldi	r21, 0x3F	; 63
    24a0:	6b 89       	ldd	r22, Y+19	; 0x13
    24a2:	7c 89       	ldd	r23, Y+20	; 0x14
    24a4:	8d 89       	ldd	r24, Y+21	; 0x15
    24a6:	9e 89       	ldd	r25, Y+22	; 0x16
    24a8:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    24ac:	88 23       	and	r24, r24
    24ae:	2c f4       	brge	.+10     	; 0x24ba <onewireWriteBit+0x1de>
		__ticks = 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	98 8f       	std	Y+24, r25	; 0x18
    24b6:	8f 8b       	std	Y+23, r24	; 0x17
    24b8:	3f c0       	rjmp	.+126    	; 0x2538 <onewireWriteBit+0x25c>
	else if (__tmp > 65535)
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	4f e7       	ldi	r20, 0x7F	; 127
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	6b 89       	ldd	r22, Y+19	; 0x13
    24c4:	7c 89       	ldd	r23, Y+20	; 0x14
    24c6:	8d 89       	ldd	r24, Y+21	; 0x15
    24c8:	9e 89       	ldd	r25, Y+22	; 0x16
    24ca:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    24ce:	18 16       	cp	r1, r24
    24d0:	4c f5       	brge	.+82     	; 0x2524 <onewireWriteBit+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e2       	ldi	r20, 0x20	; 32
    24d8:	51 e4       	ldi	r21, 0x41	; 65
    24da:	6f 85       	ldd	r22, Y+15	; 0x0f
    24dc:	78 89       	ldd	r23, Y+16	; 0x10
    24de:	89 89       	ldd	r24, Y+17	; 0x11
    24e0:	9a 89       	ldd	r25, Y+18	; 0x12
    24e2:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	bc 01       	movw	r22, r24
    24ec:	cd 01       	movw	r24, r26
    24ee:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	98 8f       	std	Y+24, r25	; 0x18
    24f8:	8f 8b       	std	Y+23, r24	; 0x17
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <onewireWriteBit+0x23e>
    24fc:	88 ec       	ldi	r24, 0xC8	; 200
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	9a 8f       	std	Y+26, r25	; 0x1a
    2502:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2504:	89 8d       	ldd	r24, Y+25	; 0x19
    2506:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <onewireWriteBit+0x22c>
    250c:	9a 8f       	std	Y+26, r25	; 0x1a
    250e:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2510:	8f 89       	ldd	r24, Y+23	; 0x17
    2512:	98 8d       	ldd	r25, Y+24	; 0x18
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	98 8f       	std	Y+24, r25	; 0x18
    2518:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251a:	8f 89       	ldd	r24, Y+23	; 0x17
    251c:	98 8d       	ldd	r25, Y+24	; 0x18
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	69 f7       	brne	.-38     	; 0x24fc <onewireWriteBit+0x220>
    2522:	3f c0       	rjmp	.+126    	; 0x25a2 <onewireWriteBit+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2524:	6b 89       	ldd	r22, Y+19	; 0x13
    2526:	7c 89       	ldd	r23, Y+20	; 0x14
    2528:	8d 89       	ldd	r24, Y+21	; 0x15
    252a:	9e 89       	ldd	r25, Y+22	; 0x16
    252c:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	98 8f       	std	Y+24, r25	; 0x18
    2536:	8f 8b       	std	Y+23, r24	; 0x17
    2538:	8f 89       	ldd	r24, Y+23	; 0x17
    253a:	98 8d       	ldd	r25, Y+24	; 0x18
    253c:	9c 8f       	std	Y+28, r25	; 0x1c
    253e:	8b 8f       	std	Y+27, r24	; 0x1b
    2540:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2542:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <onewireWriteBit+0x268>
    2548:	9c 8f       	std	Y+28, r25	; 0x1c
    254a:	8b 8f       	std	Y+27, r24	; 0x1b
    254c:	2a c0       	rjmp	.+84     	; 0x25a2 <onewireWriteBit+0x2c6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4f e7       	ldi	r20, 0x7F	; 127
    2554:	53 e4       	ldi	r21, 0x43	; 67
    2556:	6e 81       	ldd	r22, Y+6	; 0x06
    2558:	7f 81       	ldd	r23, Y+7	; 0x07
    255a:	88 85       	ldd	r24, Y+8	; 0x08
    255c:	99 85       	ldd	r25, Y+9	; 0x09
    255e:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2562:	18 16       	cp	r1, r24
    2564:	ac f4       	brge	.+42     	; 0x2590 <onewireWriteBit+0x2b4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2566:	6a 85       	ldd	r22, Y+10	; 0x0a
    2568:	7b 85       	ldd	r23, Y+11	; 0x0b
    256a:	8c 85       	ldd	r24, Y+12	; 0x0c
    256c:	9d 85       	ldd	r25, Y+13	; 0x0d
    256e:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9e 8f       	std	Y+30, r25	; 0x1e
    2578:	8d 8f       	std	Y+29, r24	; 0x1d
    257a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    257c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    257e:	98 a3       	std	Y+32, r25	; 0x20
    2580:	8f 8f       	std	Y+31, r24	; 0x1f
    2582:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2584:	98 a1       	ldd	r25, Y+32	; 0x20
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <onewireWriteBit+0x2aa>
    258a:	98 a3       	std	Y+32, r25	; 0x20
    258c:	8f 8f       	std	Y+31, r24	; 0x1f
    258e:	16 c1       	rjmp	.+556    	; 0x27bc <onewireWriteBit+0x4e0>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2590:	6e 81       	ldd	r22, Y+6	; 0x06
    2592:	7f 81       	ldd	r23, Y+7	; 0x07
    2594:	88 85       	ldd	r24, Y+8	; 0x08
    2596:	99 85       	ldd	r25, Y+9	; 0x09
    2598:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	8e 87       	std	Y+14, r24	; 0x0e
    25a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a4:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25a6:	89 a1       	ldd	r24, Y+33	; 0x21
    25a8:	8a 95       	dec	r24
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <onewireWriteBit+0x2cc>
    25ac:	89 a3       	std	Y+33, r24	; 0x21
    25ae:	06 c1       	rjmp	.+524    	; 0x27bc <onewireWriteBit+0x4e0>
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	a0 ea       	ldi	r26, 0xA0	; 160
    25b6:	b2 e4       	ldi	r27, 0x42	; 66
    25b8:	8a a3       	std	Y+34, r24	; 0x22
    25ba:	9b a3       	std	Y+35, r25	; 0x23
    25bc:	ac a3       	std	Y+36, r26	; 0x24
    25be:	bd a3       	std	Y+37, r27	; 0x25
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    25c0:	2b ea       	ldi	r18, 0xAB	; 171
    25c2:	3a ea       	ldi	r19, 0xAA	; 170
    25c4:	4a e2       	ldi	r20, 0x2A	; 42
    25c6:	50 e4       	ldi	r21, 0x40	; 64
    25c8:	6a a1       	ldd	r22, Y+34	; 0x22
    25ca:	7b a1       	ldd	r23, Y+35	; 0x23
    25cc:	8c a1       	ldd	r24, Y+36	; 0x24
    25ce:	9d a1       	ldd	r25, Y+37	; 0x25
    25d0:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	8e a3       	std	Y+38, r24	; 0x26
    25da:	9f a3       	std	Y+39, r25	; 0x27
    25dc:	a8 a7       	std	Y+40, r26	; 0x28
    25de:	b9 a7       	std	Y+41, r27	; 0x29
	__tmp2 = ((F_CPU) / 4e6) * __us;
    25e0:	8a a1       	ldd	r24, Y+34	; 0x22
    25e2:	9b a1       	ldd	r25, Y+35	; 0x23
    25e4:	ac a1       	ldd	r26, Y+36	; 0x24
    25e6:	bd a1       	ldd	r27, Y+37	; 0x25
    25e8:	9c 01       	movw	r18, r24
    25ea:	ad 01       	movw	r20, r26
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__addsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8a a7       	std	Y+42, r24	; 0x2a
    25fa:	9b a7       	std	Y+43, r25	; 0x2b
    25fc:	ac a7       	std	Y+44, r26	; 0x2c
    25fe:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	6e a1       	ldd	r22, Y+38	; 0x26
    260a:	7f a1       	ldd	r23, Y+39	; 0x27
    260c:	88 a5       	ldd	r24, Y+40	; 0x28
    260e:	99 a5       	ldd	r25, Y+41	; 0x29
    2610:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    2614:	88 23       	and	r24, r24
    2616:	1c f4       	brge	.+6      	; 0x261e <onewireWriteBit+0x342>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	8e a7       	std	Y+46, r24	; 0x2e
    261c:	bc c0       	rjmp	.+376    	; 0x2796 <onewireWriteBit+0x4ba>
	else if (__tmp2 > 65535)
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	57 e4       	ldi	r21, 0x47	; 71
    2626:	6a a5       	ldd	r22, Y+42	; 0x2a
    2628:	7b a5       	ldd	r23, Y+43	; 0x2b
    262a:	8c a5       	ldd	r24, Y+44	; 0x2c
    262c:	9d a5       	ldd	r25, Y+45	; 0x2d
    262e:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2632:	18 16       	cp	r1, r24
    2634:	0c f0       	brlt	.+2      	; 0x2638 <onewireWriteBit+0x35c>
    2636:	7b c0       	rjmp	.+246    	; 0x272e <onewireWriteBit+0x452>
	{
		_delay_ms(__us / 1000.0);
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	4a e7       	ldi	r20, 0x7A	; 122
    263e:	54 e4       	ldi	r21, 0x44	; 68
    2640:	6a a1       	ldd	r22, Y+34	; 0x22
    2642:	7b a1       	ldd	r23, Y+35	; 0x23
    2644:	8c a1       	ldd	r24, Y+36	; 0x24
    2646:	9d a1       	ldd	r25, Y+37	; 0x25
    2648:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__divsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	8f a7       	std	Y+47, r24	; 0x2f
    2652:	98 ab       	std	Y+48, r25	; 0x30
    2654:	a9 ab       	std	Y+49, r26	; 0x31
    2656:	ba ab       	std	Y+50, r27	; 0x32

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	4a ef       	ldi	r20, 0xFA	; 250
    265e:	54 e4       	ldi	r21, 0x44	; 68
    2660:	6f a5       	ldd	r22, Y+47	; 0x2f
    2662:	78 a9       	ldd	r23, Y+48	; 0x30
    2664:	89 a9       	ldd	r24, Y+49	; 0x31
    2666:	9a a9       	ldd	r25, Y+50	; 0x32
    2668:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8b ab       	std	Y+51, r24	; 0x33
    2672:	9c ab       	std	Y+52, r25	; 0x34
    2674:	ad ab       	std	Y+53, r26	; 0x35
    2676:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	6b a9       	ldd	r22, Y+51	; 0x33
    2682:	7c a9       	ldd	r23, Y+52	; 0x34
    2684:	8d a9       	ldd	r24, Y+53	; 0x35
    2686:	9e a9       	ldd	r25, Y+54	; 0x36
    2688:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    268c:	88 23       	and	r24, r24
    268e:	2c f4       	brge	.+10     	; 0x269a <onewireWriteBit+0x3be>
		__ticks = 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	98 af       	std	Y+56, r25	; 0x38
    2696:	8f ab       	std	Y+55, r24	; 0x37
    2698:	3f c0       	rjmp	.+126    	; 0x2718 <onewireWriteBit+0x43c>
	else if (__tmp > 65535)
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	3f ef       	ldi	r19, 0xFF	; 255
    269e:	4f e7       	ldi	r20, 0x7F	; 127
    26a0:	57 e4       	ldi	r21, 0x47	; 71
    26a2:	6b a9       	ldd	r22, Y+51	; 0x33
    26a4:	7c a9       	ldd	r23, Y+52	; 0x34
    26a6:	8d a9       	ldd	r24, Y+53	; 0x35
    26a8:	9e a9       	ldd	r25, Y+54	; 0x36
    26aa:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    26ae:	18 16       	cp	r1, r24
    26b0:	4c f5       	brge	.+82     	; 0x2704 <onewireWriteBit+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e2       	ldi	r20, 0x20	; 32
    26b8:	51 e4       	ldi	r21, 0x41	; 65
    26ba:	6f a5       	ldd	r22, Y+47	; 0x2f
    26bc:	78 a9       	ldd	r23, Y+48	; 0x30
    26be:	89 a9       	ldd	r24, Y+49	; 0x31
    26c0:	9a a9       	ldd	r25, Y+50	; 0x32
    26c2:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	98 af       	std	Y+56, r25	; 0x38
    26d8:	8f ab       	std	Y+55, r24	; 0x37
    26da:	0f c0       	rjmp	.+30     	; 0x26fa <onewireWriteBit+0x41e>
    26dc:	88 ec       	ldi	r24, 0xC8	; 200
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9a af       	std	Y+58, r25	; 0x3a
    26e2:	89 af       	std	Y+57, r24	; 0x39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26e4:	89 ad       	ldd	r24, Y+57	; 0x39
    26e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <onewireWriteBit+0x40c>
    26ec:	9a af       	std	Y+58, r25	; 0x3a
    26ee:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f0:	8f a9       	ldd	r24, Y+55	; 0x37
    26f2:	98 ad       	ldd	r25, Y+56	; 0x38
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	98 af       	std	Y+56, r25	; 0x38
    26f8:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fa:	8f a9       	ldd	r24, Y+55	; 0x37
    26fc:	98 ad       	ldd	r25, Y+56	; 0x38
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	69 f7       	brne	.-38     	; 0x26dc <onewireWriteBit+0x400>
    2702:	49 c0       	rjmp	.+146    	; 0x2796 <onewireWriteBit+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2704:	6b a9       	ldd	r22, Y+51	; 0x33
    2706:	7c a9       	ldd	r23, Y+52	; 0x34
    2708:	8d a9       	ldd	r24, Y+53	; 0x35
    270a:	9e a9       	ldd	r25, Y+54	; 0x36
    270c:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	98 af       	std	Y+56, r25	; 0x38
    2716:	8f ab       	std	Y+55, r24	; 0x37
    2718:	8f a9       	ldd	r24, Y+55	; 0x37
    271a:	98 ad       	ldd	r25, Y+56	; 0x38
    271c:	9c af       	std	Y+60, r25	; 0x3c
    271e:	8b af       	std	Y+59, r24	; 0x3b
    2720:	8b ad       	ldd	r24, Y+59	; 0x3b
    2722:	9c ad       	ldd	r25, Y+60	; 0x3c
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <onewireWriteBit+0x448>
    2728:	9c af       	std	Y+60, r25	; 0x3c
    272a:	8b af       	std	Y+59, r24	; 0x3b
    272c:	34 c0       	rjmp	.+104    	; 0x2796 <onewireWriteBit+0x4ba>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4f e7       	ldi	r20, 0x7F	; 127
    2734:	53 e4       	ldi	r21, 0x43	; 67
    2736:	6e a1       	ldd	r22, Y+38	; 0x26
    2738:	7f a1       	ldd	r23, Y+39	; 0x27
    273a:	88 a5       	ldd	r24, Y+40	; 0x28
    273c:	99 a5       	ldd	r25, Y+41	; 0x29
    273e:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2742:	18 16       	cp	r1, r24
    2744:	fc f4       	brge	.+62     	; 0x2784 <onewireWriteBit+0x4a8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2746:	6a a5       	ldd	r22, Y+42	; 0x2a
    2748:	7b a5       	ldd	r23, Y+43	; 0x2b
    274a:	8c a5       	ldd	r24, Y+44	; 0x2c
    274c:	9d a5       	ldd	r25, Y+45	; 0x2d
    274e:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	9e af       	std	Y+62, r25	; 0x3e
    2758:	8d af       	std	Y+61, r24	; 0x3d
    275a:	2d ad       	ldd	r18, Y+61	; 0x3d
    275c:	3e ad       	ldd	r19, Y+62	; 0x3e
    275e:	ce 01       	movw	r24, r28
    2760:	cf 96       	adiw	r24, 0x3f	; 63
    2762:	fc 01       	movw	r30, r24
    2764:	31 83       	std	Z+1, r19	; 0x01
    2766:	20 83       	st	Z, r18
    2768:	ce 01       	movw	r24, r28
    276a:	cf 96       	adiw	r24, 0x3f	; 63
    276c:	fc 01       	movw	r30, r24
    276e:	80 81       	ld	r24, Z
    2770:	91 81       	ldd	r25, Z+1	; 0x01
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <onewireWriteBit+0x496>
    2776:	9e 01       	movw	r18, r28
    2778:	21 5c       	subi	r18, 0xC1	; 193
    277a:	3f 4f       	sbci	r19, 0xFF	; 255
    277c:	f9 01       	movw	r30, r18
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	80 83       	st	Z, r24
    2782:	1c c0       	rjmp	.+56     	; 0x27bc <onewireWriteBit+0x4e0>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2784:	6e a1       	ldd	r22, Y+38	; 0x26
    2786:	7f a1       	ldd	r23, Y+39	; 0x27
    2788:	88 a5       	ldd	r24, Y+40	; 0x28
    278a:	99 a5       	ldd	r25, Y+41	; 0x29
    278c:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	8e a7       	std	Y+46, r24	; 0x2e
    2796:	ce 01       	movw	r24, r28
    2798:	8f 5b       	subi	r24, 0xBF	; 191
    279a:	9f 4f       	sbci	r25, 0xFF	; 255
    279c:	2e a5       	ldd	r18, Y+46	; 0x2e
    279e:	fc 01       	movw	r30, r24
    27a0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27a2:	ce 01       	movw	r24, r28
    27a4:	8f 5b       	subi	r24, 0xBF	; 191
    27a6:	9f 4f       	sbci	r25, 0xFF	; 255
    27a8:	fc 01       	movw	r30, r24
    27aa:	80 81       	ld	r24, Z
    27ac:	28 2f       	mov	r18, r24
    27ae:	2a 95       	dec	r18
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <onewireWriteBit+0x4d2>
    27b2:	ce 01       	movw	r24, r28
    27b4:	8f 5b       	subi	r24, 0xBF	; 191
    27b6:	9f 4f       	sbci	r25, 0xFF	; 255
    27b8:	fc 01       	movw	r30, r24
    27ba:	20 83       	st	Z, r18
	else _delay_us( 80 );

	*port |= mask;
    27bc:	ce 01       	movw	r24, r28
    27be:	8e 57       	subi	r24, 0x7E	; 126
    27c0:	9f 4f       	sbci	r25, 0xFF	; 255
    27c2:	fc 01       	movw	r30, r24
    27c4:	80 81       	ld	r24, Z
    27c6:	91 81       	ldd	r25, Z+1	; 0x01
    27c8:	fc 01       	movw	r30, r24
    27ca:	20 81       	ld	r18, Z
    27cc:	ce 01       	movw	r24, r28
    27ce:	88 57       	subi	r24, 0x78	; 120
    27d0:	9f 4f       	sbci	r25, 0xFF	; 255
    27d2:	fc 01       	movw	r30, r24
    27d4:	80 81       	ld	r24, Z
    27d6:	28 2b       	or	r18, r24
    27d8:	ce 01       	movw	r24, r28
    27da:	8e 57       	subi	r24, 0x7E	; 126
    27dc:	9f 4f       	sbci	r25, 0xFF	; 255
    27de:	fc 01       	movw	r30, r24
    27e0:	80 81       	ld	r24, Z
    27e2:	91 81       	ldd	r25, Z+1	; 0x01
    27e4:	fc 01       	movw	r30, r24
    27e6:	20 83       	st	Z, r18

	if ( bit != 0 ) _delay_us( 80 );
    27e8:	ce 01       	movw	r24, r28
    27ea:	87 57       	subi	r24, 0x77	; 119
    27ec:	9f 4f       	sbci	r25, 0xFF	; 255
    27ee:	fc 01       	movw	r30, r24
    27f0:	80 81       	ld	r24, Z
    27f2:	88 23       	and	r24, r24
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <onewireWriteBit+0x51c>
    27f6:	9b c1       	rjmp	.+822    	; 0x2b2e <onewireWriteBit+0x852>
    27f8:	9e 01       	movw	r18, r28
    27fa:	2e 5b       	subi	r18, 0xBE	; 190
    27fc:	3f 4f       	sbci	r19, 0xFF	; 255
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	a0 ea       	ldi	r26, 0xA0	; 160
    2804:	b2 e4       	ldi	r27, 0x42	; 66
    2806:	f9 01       	movw	r30, r18
    2808:	80 83       	st	Z, r24
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	a2 83       	std	Z+2, r26	; 0x02
    280e:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    2810:	8e 01       	movw	r16, r28
    2812:	0a 5b       	subi	r16, 0xBA	; 186
    2814:	1f 4f       	sbci	r17, 0xFF	; 255
    2816:	ce 01       	movw	r24, r28
    2818:	8e 5b       	subi	r24, 0xBE	; 190
    281a:	9f 4f       	sbci	r25, 0xFF	; 255
    281c:	2b ea       	ldi	r18, 0xAB	; 171
    281e:	3a ea       	ldi	r19, 0xAA	; 170
    2820:	4a e2       	ldi	r20, 0x2A	; 42
    2822:	50 e4       	ldi	r21, 0x40	; 64
    2824:	fc 01       	movw	r30, r24
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	f8 01       	movw	r30, r16
    2838:	80 83       	st	Z, r24
    283a:	91 83       	std	Z+1, r25	; 0x01
    283c:	a2 83       	std	Z+2, r26	; 0x02
    283e:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2840:	8e 01       	movw	r16, r28
    2842:	06 5b       	subi	r16, 0xB6	; 182
    2844:	1f 4f       	sbci	r17, 0xFF	; 255
    2846:	ce 01       	movw	r24, r28
    2848:	8e 5b       	subi	r24, 0xBE	; 190
    284a:	9f 4f       	sbci	r25, 0xFF	; 255
    284c:	fc 01       	movw	r30, r24
    284e:	80 81       	ld	r24, Z
    2850:	91 81       	ldd	r25, Z+1	; 0x01
    2852:	a2 81       	ldd	r26, Z+2	; 0x02
    2854:	b3 81       	ldd	r27, Z+3	; 0x03
    2856:	9c 01       	movw	r18, r24
    2858:	ad 01       	movw	r20, r26
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__addsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	f8 01       	movw	r30, r16
    2868:	80 83       	st	Z, r24
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	a2 83       	std	Z+2, r26	; 0x02
    286e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2870:	ce 01       	movw	r24, r28
    2872:	8a 5b       	subi	r24, 0xBA	; 186
    2874:	9f 4f       	sbci	r25, 0xFF	; 255
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e8       	ldi	r20, 0x80	; 128
    287c:	5f e3       	ldi	r21, 0x3F	; 63
    287e:	fc 01       	movw	r30, r24
    2880:	60 81       	ld	r22, Z
    2882:	71 81       	ldd	r23, Z+1	; 0x01
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	93 81       	ldd	r25, Z+3	; 0x03
    2888:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    288c:	88 23       	and	r24, r24
    288e:	3c f4       	brge	.+14     	; 0x289e <onewireWriteBit+0x5c2>
		__ticks = 1;
    2890:	ce 01       	movw	r24, r28
    2892:	82 5b       	subi	r24, 0xB2	; 178
    2894:	9f 4f       	sbci	r25, 0xFF	; 255
    2896:	21 e0       	ldi	r18, 0x01	; 1
    2898:	fc 01       	movw	r30, r24
    289a:	20 83       	st	Z, r18
    289c:	30 c1       	rjmp	.+608    	; 0x2afe <onewireWriteBit+0x822>
	else if (__tmp2 > 65535)
    289e:	ce 01       	movw	r24, r28
    28a0:	86 5b       	subi	r24, 0xB6	; 182
    28a2:	9f 4f       	sbci	r25, 0xFF	; 255
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	3f ef       	ldi	r19, 0xFF	; 255
    28a8:	4f e7       	ldi	r20, 0x7F	; 127
    28aa:	57 e4       	ldi	r21, 0x47	; 71
    28ac:	fc 01       	movw	r30, r24
    28ae:	60 81       	ld	r22, Z
    28b0:	71 81       	ldd	r23, Z+1	; 0x01
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    28ba:	18 16       	cp	r1, r24
    28bc:	0c f0       	brlt	.+2      	; 0x28c0 <onewireWriteBit+0x5e4>
    28be:	d1 c0       	rjmp	.+418    	; 0x2a62 <onewireWriteBit+0x786>
	{
		_delay_ms(__us / 1000.0);
    28c0:	ce 01       	movw	r24, r28
    28c2:	8e 5b       	subi	r24, 0xBE	; 190
    28c4:	9f 4f       	sbci	r25, 0xFF	; 255
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	4a e7       	ldi	r20, 0x7A	; 122
    28cc:	54 e4       	ldi	r21, 0x44	; 68
    28ce:	fc 01       	movw	r30, r24
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	93 81       	ldd	r25, Z+3	; 0x03
    28d8:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__divsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9e 01       	movw	r18, r28
    28e2:	21 5b       	subi	r18, 0xB1	; 177
    28e4:	3f 4f       	sbci	r19, 0xFF	; 255
    28e6:	f9 01       	movw	r30, r18
    28e8:	80 83       	st	Z, r24
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	a2 83       	std	Z+2, r26	; 0x02
    28ee:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    28f0:	8e 01       	movw	r16, r28
    28f2:	0d 5a       	subi	r16, 0xAD	; 173
    28f4:	1f 4f       	sbci	r17, 0xFF	; 255
    28f6:	ce 01       	movw	r24, r28
    28f8:	81 5b       	subi	r24, 0xB1	; 177
    28fa:	9f 4f       	sbci	r25, 0xFF	; 255
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4a ef       	ldi	r20, 0xFA	; 250
    2902:	54 e4       	ldi	r21, 0x44	; 68
    2904:	fc 01       	movw	r30, r24
    2906:	60 81       	ld	r22, Z
    2908:	71 81       	ldd	r23, Z+1	; 0x01
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	93 81       	ldd	r25, Z+3	; 0x03
    290e:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	f8 01       	movw	r30, r16
    2918:	80 83       	st	Z, r24
    291a:	91 83       	std	Z+1, r25	; 0x01
    291c:	a2 83       	std	Z+2, r26	; 0x02
    291e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2920:	ce 01       	movw	r24, r28
    2922:	8d 5a       	subi	r24, 0xAD	; 173
    2924:	9f 4f       	sbci	r25, 0xFF	; 255
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e8       	ldi	r20, 0x80	; 128
    292c:	5f e3       	ldi	r21, 0x3F	; 63
    292e:	fc 01       	movw	r30, r24
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    293c:	88 23       	and	r24, r24
    293e:	4c f4       	brge	.+18     	; 0x2952 <onewireWriteBit+0x676>
		__ticks = 1;
    2940:	ce 01       	movw	r24, r28
    2942:	89 5a       	subi	r24, 0xA9	; 169
    2944:	9f 4f       	sbci	r25, 0xFF	; 255
    2946:	21 e0       	ldi	r18, 0x01	; 1
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	fc 01       	movw	r30, r24
    294c:	31 83       	std	Z+1, r19	; 0x01
    294e:	20 83       	st	Z, r18
    2950:	6d c0       	rjmp	.+218    	; 0x2a2c <onewireWriteBit+0x750>
	else if (__tmp > 65535)
    2952:	ce 01       	movw	r24, r28
    2954:	8d 5a       	subi	r24, 0xAD	; 173
    2956:	9f 4f       	sbci	r25, 0xFF	; 255
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	57 e4       	ldi	r21, 0x47	; 71
    2960:	fc 01       	movw	r30, r24
    2962:	60 81       	ld	r22, Z
    2964:	71 81       	ldd	r23, Z+1	; 0x01
    2966:	82 81       	ldd	r24, Z+2	; 0x02
    2968:	93 81       	ldd	r25, Z+3	; 0x03
    296a:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    296e:	18 16       	cp	r1, r24
    2970:	0c f0       	brlt	.+2      	; 0x2974 <onewireWriteBit+0x698>
    2972:	4a c0       	rjmp	.+148    	; 0x2a08 <onewireWriteBit+0x72c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2974:	ce 01       	movw	r24, r28
    2976:	81 5b       	subi	r24, 0xB1	; 177
    2978:	9f 4f       	sbci	r25, 0xFF	; 255
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e2       	ldi	r20, 0x20	; 32
    2980:	51 e4       	ldi	r21, 0x41	; 65
    2982:	fc 01       	movw	r30, r24
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	8e 01       	movw	r16, r28
    2996:	09 5a       	subi	r16, 0xA9	; 169
    2998:	1f 4f       	sbci	r17, 0xFF	; 255
    299a:	bc 01       	movw	r22, r24
    299c:	cd 01       	movw	r24, r26
    299e:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	f8 01       	movw	r30, r16
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	80 83       	st	Z, r24
    29ac:	24 c0       	rjmp	.+72     	; 0x29f6 <onewireWriteBit+0x71a>
    29ae:	ce 01       	movw	r24, r28
    29b0:	87 5a       	subi	r24, 0xA7	; 167
    29b2:	9f 4f       	sbci	r25, 0xFF	; 255
    29b4:	28 ec       	ldi	r18, 0xC8	; 200
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	fc 01       	movw	r30, r24
    29ba:	31 83       	std	Z+1, r19	; 0x01
    29bc:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29be:	ce 01       	movw	r24, r28
    29c0:	87 5a       	subi	r24, 0xA7	; 167
    29c2:	9f 4f       	sbci	r25, 0xFF	; 255
    29c4:	fc 01       	movw	r30, r24
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <onewireWriteBit+0x6ee>
    29ce:	9e 01       	movw	r18, r28
    29d0:	27 5a       	subi	r18, 0xA7	; 167
    29d2:	3f 4f       	sbci	r19, 0xFF	; 255
    29d4:	f9 01       	movw	r30, r18
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29da:	ce 01       	movw	r24, r28
    29dc:	89 5a       	subi	r24, 0xA9	; 169
    29de:	9f 4f       	sbci	r25, 0xFF	; 255
    29e0:	9e 01       	movw	r18, r28
    29e2:	29 5a       	subi	r18, 0xA9	; 169
    29e4:	3f 4f       	sbci	r19, 0xFF	; 255
    29e6:	f9 01       	movw	r30, r18
    29e8:	20 81       	ld	r18, Z
    29ea:	31 81       	ldd	r19, Z+1	; 0x01
    29ec:	21 50       	subi	r18, 0x01	; 1
    29ee:	31 09       	sbc	r19, r1
    29f0:	fc 01       	movw	r30, r24
    29f2:	31 83       	std	Z+1, r19	; 0x01
    29f4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f6:	ce 01       	movw	r24, r28
    29f8:	89 5a       	subi	r24, 0xA9	; 169
    29fa:	9f 4f       	sbci	r25, 0xFF	; 255
    29fc:	fc 01       	movw	r30, r24
    29fe:	80 81       	ld	r24, Z
    2a00:	91 81       	ldd	r25, Z+1	; 0x01
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	a1 f6       	brne	.-88     	; 0x29ae <onewireWriteBit+0x6d2>
    2a06:	7b c0       	rjmp	.+246    	; 0x2afe <onewireWriteBit+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	8e 01       	movw	r16, r28
    2a0a:	09 5a       	subi	r16, 0xA9	; 169
    2a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0e:	ce 01       	movw	r24, r28
    2a10:	8d 5a       	subi	r24, 0xAD	; 173
    2a12:	9f 4f       	sbci	r25, 0xFF	; 255
    2a14:	fc 01       	movw	r30, r24
    2a16:	60 81       	ld	r22, Z
    2a18:	71 81       	ldd	r23, Z+1	; 0x01
    2a1a:	82 81       	ldd	r24, Z+2	; 0x02
    2a1c:	93 81       	ldd	r25, Z+3	; 0x03
    2a1e:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	f8 01       	movw	r30, r16
    2a28:	91 83       	std	Z+1, r25	; 0x01
    2a2a:	80 83       	st	Z, r24
    2a2c:	ce 01       	movw	r24, r28
    2a2e:	85 5a       	subi	r24, 0xA5	; 165
    2a30:	9f 4f       	sbci	r25, 0xFF	; 255
    2a32:	9e 01       	movw	r18, r28
    2a34:	29 5a       	subi	r18, 0xA9	; 169
    2a36:	3f 4f       	sbci	r19, 0xFF	; 255
    2a38:	f9 01       	movw	r30, r18
    2a3a:	20 81       	ld	r18, Z
    2a3c:	31 81       	ldd	r19, Z+1	; 0x01
    2a3e:	fc 01       	movw	r30, r24
    2a40:	31 83       	std	Z+1, r19	; 0x01
    2a42:	20 83       	st	Z, r18
    2a44:	ce 01       	movw	r24, r28
    2a46:	85 5a       	subi	r24, 0xA5	; 165
    2a48:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	80 81       	ld	r24, Z
    2a4e:	91 81       	ldd	r25, Z+1	; 0x01
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <onewireWriteBit+0x774>
    2a54:	9e 01       	movw	r18, r28
    2a56:	25 5a       	subi	r18, 0xA5	; 165
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5a:	f9 01       	movw	r30, r18
    2a5c:	91 83       	std	Z+1, r25	; 0x01
    2a5e:	80 83       	st	Z, r24
    2a60:	4e c0       	rjmp	.+156    	; 0x2afe <onewireWriteBit+0x822>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2a62:	ce 01       	movw	r24, r28
    2a64:	8a 5b       	subi	r24, 0xBA	; 186
    2a66:	9f 4f       	sbci	r25, 0xFF	; 255
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	4f e7       	ldi	r20, 0x7F	; 127
    2a6e:	53 e4       	ldi	r21, 0x43	; 67
    2a70:	fc 01       	movw	r30, r24
    2a72:	60 81       	ld	r22, Z
    2a74:	71 81       	ldd	r23, Z+1	; 0x01
    2a76:	82 81       	ldd	r24, Z+2	; 0x02
    2a78:	93 81       	ldd	r25, Z+3	; 0x03
    2a7a:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2a7e:	18 16       	cp	r1, r24
    2a80:	6c f5       	brge	.+90     	; 0x2adc <onewireWriteBit+0x800>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2a82:	8e 01       	movw	r16, r28
    2a84:	03 5a       	subi	r16, 0xA3	; 163
    2a86:	1f 4f       	sbci	r17, 0xFF	; 255
    2a88:	ce 01       	movw	r24, r28
    2a8a:	86 5b       	subi	r24, 0xB6	; 182
    2a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8e:	fc 01       	movw	r30, r24
    2a90:	60 81       	ld	r22, Z
    2a92:	71 81       	ldd	r23, Z+1	; 0x01
    2a94:	82 81       	ldd	r24, Z+2	; 0x02
    2a96:	93 81       	ldd	r25, Z+3	; 0x03
    2a98:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	80 83       	st	Z, r24
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	81 5a       	subi	r24, 0xA1	; 161
    2aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2aac:	9e 01       	movw	r18, r28
    2aae:	23 5a       	subi	r18, 0xA3	; 163
    2ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab2:	f9 01       	movw	r30, r18
    2ab4:	20 81       	ld	r18, Z
    2ab6:	31 81       	ldd	r19, Z+1	; 0x01
    2ab8:	fc 01       	movw	r30, r24
    2aba:	31 83       	std	Z+1, r19	; 0x01
    2abc:	20 83       	st	Z, r18
    2abe:	ce 01       	movw	r24, r28
    2ac0:	81 5a       	subi	r24, 0xA1	; 161
    2ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	80 81       	ld	r24, Z
    2ac8:	91 81       	ldd	r25, Z+1	; 0x01
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <onewireWriteBit+0x7ee>
    2ace:	9e 01       	movw	r18, r28
    2ad0:	21 5a       	subi	r18, 0xA1	; 161
    2ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad4:	f9 01       	movw	r30, r18
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	80 83       	st	Z, r24
    2ada:	c3 c1       	rjmp	.+902    	; 0x2e62 <onewireWriteBit+0xb86>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2adc:	8e 01       	movw	r16, r28
    2ade:	02 5b       	subi	r16, 0xB2	; 178
    2ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	8a 5b       	subi	r24, 0xBA	; 186
    2ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae8:	fc 01       	movw	r30, r24
    2aea:	60 81       	ld	r22, Z
    2aec:	71 81       	ldd	r23, Z+1	; 0x01
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	93 81       	ldd	r25, Z+3	; 0x03
    2af2:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	f8 01       	movw	r30, r16
    2afc:	80 83       	st	Z, r24
    2afe:	ce 01       	movw	r24, r28
    2b00:	8f 59       	subi	r24, 0x9F	; 159
    2b02:	9f 4f       	sbci	r25, 0xFF	; 255
    2b04:	9e 01       	movw	r18, r28
    2b06:	22 5b       	subi	r18, 0xB2	; 178
    2b08:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0a:	f9 01       	movw	r30, r18
    2b0c:	20 81       	ld	r18, Z
    2b0e:	fc 01       	movw	r30, r24
    2b10:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b12:	ce 01       	movw	r24, r28
    2b14:	8f 59       	subi	r24, 0x9F	; 159
    2b16:	9f 4f       	sbci	r25, 0xFF	; 255
    2b18:	fc 01       	movw	r30, r24
    2b1a:	80 81       	ld	r24, Z
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	2a 95       	dec	r18
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <onewireWriteBit+0x842>
    2b22:	ce 01       	movw	r24, r28
    2b24:	8f 59       	subi	r24, 0x9F	; 159
    2b26:	9f 4f       	sbci	r25, 0xFF	; 255
    2b28:	fc 01       	movw	r30, r24
    2b2a:	20 83       	st	Z, r18
    2b2c:	9a c1       	rjmp	.+820    	; 0x2e62 <onewireWriteBit+0xb86>
    2b2e:	9e 01       	movw	r18, r28
    2b30:	2e 59       	subi	r18, 0x9E	; 158
    2b32:	3f 4f       	sbci	r19, 0xFF	; 255
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	a0 e0       	ldi	r26, 0x00	; 0
    2b3a:	b0 e4       	ldi	r27, 0x40	; 64
    2b3c:	f9 01       	movw	r30, r18
    2b3e:	80 83       	st	Z, r24
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	a2 83       	std	Z+2, r26	; 0x02
    2b44:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    2b46:	8e 01       	movw	r16, r28
    2b48:	0a 59       	subi	r16, 0x9A	; 154
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	8e 59       	subi	r24, 0x9E	; 158
    2b50:	9f 4f       	sbci	r25, 0xFF	; 255
    2b52:	2b ea       	ldi	r18, 0xAB	; 171
    2b54:	3a ea       	ldi	r19, 0xAA	; 170
    2b56:	4a e2       	ldi	r20, 0x2A	; 42
    2b58:	50 e4       	ldi	r21, 0x40	; 64
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	60 81       	ld	r22, Z
    2b5e:	71 81       	ldd	r23, Z+1	; 0x01
    2b60:	82 81       	ldd	r24, Z+2	; 0x02
    2b62:	93 81       	ldd	r25, Z+3	; 0x03
    2b64:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	f8 01       	movw	r30, r16
    2b6e:	80 83       	st	Z, r24
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	a2 83       	std	Z+2, r26	; 0x02
    2b74:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2b76:	8e 01       	movw	r16, r28
    2b78:	06 59       	subi	r16, 0x96	; 150
    2b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	8e 59       	subi	r24, 0x9E	; 158
    2b80:	9f 4f       	sbci	r25, 0xFF	; 255
    2b82:	fc 01       	movw	r30, r24
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	a2 81       	ldd	r26, Z+2	; 0x02
    2b8a:	b3 81       	ldd	r27, Z+3	; 0x03
    2b8c:	9c 01       	movw	r18, r24
    2b8e:	ad 01       	movw	r20, r26
    2b90:	bc 01       	movw	r22, r24
    2b92:	cd 01       	movw	r24, r26
    2b94:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__addsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	f8 01       	movw	r30, r16
    2b9e:	80 83       	st	Z, r24
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	a2 83       	std	Z+2, r26	; 0x02
    2ba4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	8a 59       	subi	r24, 0x9A	; 154
    2baa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	60 81       	ld	r22, Z
    2bb8:	71 81       	ldd	r23, Z+1	; 0x01
    2bba:	82 81       	ldd	r24, Z+2	; 0x02
    2bbc:	93 81       	ldd	r25, Z+3	; 0x03
    2bbe:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    2bc2:	88 23       	and	r24, r24
    2bc4:	3c f4       	brge	.+14     	; 0x2bd4 <onewireWriteBit+0x8f8>
		__ticks = 1;
    2bc6:	ce 01       	movw	r24, r28
    2bc8:	82 59       	subi	r24, 0x92	; 146
    2bca:	9f 4f       	sbci	r25, 0xFF	; 255
    2bcc:	21 e0       	ldi	r18, 0x01	; 1
    2bce:	fc 01       	movw	r30, r24
    2bd0:	20 83       	st	Z, r18
    2bd2:	30 c1       	rjmp	.+608    	; 0x2e34 <onewireWriteBit+0xb58>
	else if (__tmp2 > 65535)
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	86 59       	subi	r24, 0x96	; 150
    2bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	3f ef       	ldi	r19, 0xFF	; 255
    2bde:	4f e7       	ldi	r20, 0x7F	; 127
    2be0:	57 e4       	ldi	r21, 0x47	; 71
    2be2:	fc 01       	movw	r30, r24
    2be4:	60 81       	ld	r22, Z
    2be6:	71 81       	ldd	r23, Z+1	; 0x01
    2be8:	82 81       	ldd	r24, Z+2	; 0x02
    2bea:	93 81       	ldd	r25, Z+3	; 0x03
    2bec:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2bf0:	18 16       	cp	r1, r24
    2bf2:	0c f0       	brlt	.+2      	; 0x2bf6 <onewireWriteBit+0x91a>
    2bf4:	d1 c0       	rjmp	.+418    	; 0x2d98 <onewireWriteBit+0xabc>
	{
		_delay_ms(__us / 1000.0);
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	8e 59       	subi	r24, 0x9E	; 158
    2bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	4a e7       	ldi	r20, 0x7A	; 122
    2c02:	54 e4       	ldi	r21, 0x44	; 68
    2c04:	fc 01       	movw	r30, r24
    2c06:	60 81       	ld	r22, Z
    2c08:	71 81       	ldd	r23, Z+1	; 0x01
    2c0a:	82 81       	ldd	r24, Z+2	; 0x02
    2c0c:	93 81       	ldd	r25, Z+3	; 0x03
    2c0e:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__divsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	9e 01       	movw	r18, r28
    2c18:	21 59       	subi	r18, 0x91	; 145
    2c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1c:	f9 01       	movw	r30, r18
    2c1e:	80 83       	st	Z, r24
    2c20:	91 83       	std	Z+1, r25	; 0x01
    2c22:	a2 83       	std	Z+2, r26	; 0x02
    2c24:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2c26:	8e 01       	movw	r16, r28
    2c28:	0d 58       	subi	r16, 0x8D	; 141
    2c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	81 59       	subi	r24, 0x91	; 145
    2c30:	9f 4f       	sbci	r25, 0xFF	; 255
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4a ef       	ldi	r20, 0xFA	; 250
    2c38:	54 e4       	ldi	r21, 0x44	; 68
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	80 83       	st	Z, r24
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	a2 83       	std	Z+2, r26	; 0x02
    2c54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c56:	ce 01       	movw	r24, r28
    2c58:	8d 58       	subi	r24, 0x8D	; 141
    2c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	5f e3       	ldi	r21, 0x3F	; 63
    2c64:	fc 01       	movw	r30, r24
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	82 81       	ldd	r24, Z+2	; 0x02
    2c6c:	93 81       	ldd	r25, Z+3	; 0x03
    2c6e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	4c f4       	brge	.+18     	; 0x2c88 <onewireWriteBit+0x9ac>
		__ticks = 1;
    2c76:	ce 01       	movw	r24, r28
    2c78:	89 58       	subi	r24, 0x89	; 137
    2c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7c:	21 e0       	ldi	r18, 0x01	; 1
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	fc 01       	movw	r30, r24
    2c82:	31 83       	std	Z+1, r19	; 0x01
    2c84:	20 83       	st	Z, r18
    2c86:	6d c0       	rjmp	.+218    	; 0x2d62 <onewireWriteBit+0xa86>
	else if (__tmp > 65535)
    2c88:	ce 01       	movw	r24, r28
    2c8a:	8d 58       	subi	r24, 0x8D	; 141
    2c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	3f ef       	ldi	r19, 0xFF	; 255
    2c92:	4f e7       	ldi	r20, 0x7F	; 127
    2c94:	57 e4       	ldi	r21, 0x47	; 71
    2c96:	fc 01       	movw	r30, r24
    2c98:	60 81       	ld	r22, Z
    2c9a:	71 81       	ldd	r23, Z+1	; 0x01
    2c9c:	82 81       	ldd	r24, Z+2	; 0x02
    2c9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ca0:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2ca4:	18 16       	cp	r1, r24
    2ca6:	0c f0       	brlt	.+2      	; 0x2caa <onewireWriteBit+0x9ce>
    2ca8:	4a c0       	rjmp	.+148    	; 0x2d3e <onewireWriteBit+0xa62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2caa:	ce 01       	movw	r24, r28
    2cac:	81 59       	subi	r24, 0x91	; 145
    2cae:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e2       	ldi	r20, 0x20	; 32
    2cb6:	51 e4       	ldi	r21, 0x41	; 65
    2cb8:	fc 01       	movw	r30, r24
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	8e 01       	movw	r16, r28
    2ccc:	09 58       	subi	r16, 0x89	; 137
    2cce:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	cd 01       	movw	r24, r26
    2cd4:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	f8 01       	movw	r30, r16
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	80 83       	st	Z, r24
    2ce2:	24 c0       	rjmp	.+72     	; 0x2d2c <onewireWriteBit+0xa50>
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	87 58       	subi	r24, 0x87	; 135
    2ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cea:	28 ec       	ldi	r18, 0xC8	; 200
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	fc 01       	movw	r30, r24
    2cf0:	31 83       	std	Z+1, r19	; 0x01
    2cf2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	87 58       	subi	r24, 0x87	; 135
    2cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	80 81       	ld	r24, Z
    2cfe:	91 81       	ldd	r25, Z+1	; 0x01
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <onewireWriteBit+0xa24>
    2d04:	9e 01       	movw	r18, r28
    2d06:	27 58       	subi	r18, 0x87	; 135
    2d08:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0a:	f9 01       	movw	r30, r18
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d10:	ce 01       	movw	r24, r28
    2d12:	89 58       	subi	r24, 0x89	; 137
    2d14:	9f 4f       	sbci	r25, 0xFF	; 255
    2d16:	9e 01       	movw	r18, r28
    2d18:	29 58       	subi	r18, 0x89	; 137
    2d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1c:	f9 01       	movw	r30, r18
    2d1e:	20 81       	ld	r18, Z
    2d20:	31 81       	ldd	r19, Z+1	; 0x01
    2d22:	21 50       	subi	r18, 0x01	; 1
    2d24:	31 09       	sbc	r19, r1
    2d26:	fc 01       	movw	r30, r24
    2d28:	31 83       	std	Z+1, r19	; 0x01
    2d2a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2c:	ce 01       	movw	r24, r28
    2d2e:	89 58       	subi	r24, 0x89	; 137
    2d30:	9f 4f       	sbci	r25, 0xFF	; 255
    2d32:	fc 01       	movw	r30, r24
    2d34:	80 81       	ld	r24, Z
    2d36:	91 81       	ldd	r25, Z+1	; 0x01
    2d38:	00 97       	sbiw	r24, 0x00	; 0
    2d3a:	a1 f6       	brne	.-88     	; 0x2ce4 <onewireWriteBit+0xa08>
    2d3c:	7b c0       	rjmp	.+246    	; 0x2e34 <onewireWriteBit+0xb58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3e:	8e 01       	movw	r16, r28
    2d40:	09 58       	subi	r16, 0x89	; 137
    2d42:	1f 4f       	sbci	r17, 0xFF	; 255
    2d44:	ce 01       	movw	r24, r28
    2d46:	8d 58       	subi	r24, 0x8D	; 141
    2d48:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	91 83       	std	Z+1, r25	; 0x01
    2d60:	80 83       	st	Z, r24
    2d62:	ce 01       	movw	r24, r28
    2d64:	85 58       	subi	r24, 0x85	; 133
    2d66:	9f 4f       	sbci	r25, 0xFF	; 255
    2d68:	9e 01       	movw	r18, r28
    2d6a:	29 58       	subi	r18, 0x89	; 137
    2d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6e:	f9 01       	movw	r30, r18
    2d70:	20 81       	ld	r18, Z
    2d72:	31 81       	ldd	r19, Z+1	; 0x01
    2d74:	fc 01       	movw	r30, r24
    2d76:	31 83       	std	Z+1, r19	; 0x01
    2d78:	20 83       	st	Z, r18
    2d7a:	ce 01       	movw	r24, r28
    2d7c:	85 58       	subi	r24, 0x85	; 133
    2d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d80:	fc 01       	movw	r30, r24
    2d82:	80 81       	ld	r24, Z
    2d84:	91 81       	ldd	r25, Z+1	; 0x01
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <onewireWriteBit+0xaaa>
    2d8a:	9e 01       	movw	r18, r28
    2d8c:	25 58       	subi	r18, 0x85	; 133
    2d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d90:	f9 01       	movw	r30, r18
    2d92:	91 83       	std	Z+1, r25	; 0x01
    2d94:	80 83       	st	Z, r24
    2d96:	4e c0       	rjmp	.+156    	; 0x2e34 <onewireWriteBit+0xb58>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2d98:	ce 01       	movw	r24, r28
    2d9a:	8a 59       	subi	r24, 0x9A	; 154
    2d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	4f e7       	ldi	r20, 0x7F	; 127
    2da4:	53 e4       	ldi	r21, 0x43	; 67
    2da6:	fc 01       	movw	r30, r24
    2da8:	60 81       	ld	r22, Z
    2daa:	71 81       	ldd	r23, Z+1	; 0x01
    2dac:	82 81       	ldd	r24, Z+2	; 0x02
    2dae:	93 81       	ldd	r25, Z+3	; 0x03
    2db0:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    2db4:	18 16       	cp	r1, r24
    2db6:	6c f5       	brge	.+90     	; 0x2e12 <onewireWriteBit+0xb36>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2db8:	8e 01       	movw	r16, r28
    2dba:	03 58       	subi	r16, 0x83	; 131
    2dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	86 59       	subi	r24, 0x96	; 150
    2dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	60 81       	ld	r22, Z
    2dc8:	71 81       	ldd	r23, Z+1	; 0x01
    2dca:	82 81       	ldd	r24, Z+2	; 0x02
    2dcc:	93 81       	ldd	r25, Z+3	; 0x03
    2dce:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	f8 01       	movw	r30, r16
    2dd8:	91 83       	std	Z+1, r25	; 0x01
    2dda:	80 83       	st	Z, r24
    2ddc:	ce 01       	movw	r24, r28
    2dde:	81 58       	subi	r24, 0x81	; 129
    2de0:	9f 4f       	sbci	r25, 0xFF	; 255
    2de2:	9e 01       	movw	r18, r28
    2de4:	23 58       	subi	r18, 0x83	; 131
    2de6:	3f 4f       	sbci	r19, 0xFF	; 255
    2de8:	f9 01       	movw	r30, r18
    2dea:	20 81       	ld	r18, Z
    2dec:	31 81       	ldd	r19, Z+1	; 0x01
    2dee:	fc 01       	movw	r30, r24
    2df0:	31 83       	std	Z+1, r19	; 0x01
    2df2:	20 83       	st	Z, r18
    2df4:	ce 01       	movw	r24, r28
    2df6:	81 58       	subi	r24, 0x81	; 129
    2df8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <onewireWriteBit+0xb24>
    2e04:	9e 01       	movw	r18, r28
    2e06:	21 58       	subi	r18, 0x81	; 129
    2e08:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0a:	f9 01       	movw	r30, r18
    2e0c:	91 83       	std	Z+1, r25	; 0x01
    2e0e:	80 83       	st	Z, r24
    2e10:	28 c0       	rjmp	.+80     	; 0x2e62 <onewireWriteBit+0xb86>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e12:	8e 01       	movw	r16, r28
    2e14:	02 59       	subi	r16, 0x92	; 146
    2e16:	1f 4f       	sbci	r17, 0xFF	; 255
    2e18:	ce 01       	movw	r24, r28
    2e1a:	8a 59       	subi	r24, 0x9A	; 154
    2e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1e:	fc 01       	movw	r30, r24
    2e20:	60 81       	ld	r22, Z
    2e22:	71 81       	ldd	r23, Z+1	; 0x01
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	93 81       	ldd	r25, Z+3	; 0x03
    2e28:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	f8 01       	movw	r30, r16
    2e32:	80 83       	st	Z, r24
    2e34:	ce 01       	movw	r24, r28
    2e36:	8f 57       	subi	r24, 0x7F	; 127
    2e38:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3a:	9e 01       	movw	r18, r28
    2e3c:	22 59       	subi	r18, 0x92	; 146
    2e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e40:	f9 01       	movw	r30, r18
    2e42:	20 81       	ld	r18, Z
    2e44:	fc 01       	movw	r30, r24
    2e46:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e48:	ce 01       	movw	r24, r28
    2e4a:	8f 57       	subi	r24, 0x7F	; 127
    2e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4e:	fc 01       	movw	r30, r24
    2e50:	80 81       	ld	r24, Z
    2e52:	28 2f       	mov	r18, r24
    2e54:	2a 95       	dec	r18
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <onewireWriteBit+0xb78>
    2e58:	ce 01       	movw	r24, r28
    2e5a:	8f 57       	subi	r24, 0x7F	; 127
    2e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e5e:	fc 01       	movw	r30, r24
    2e60:	20 83       	st	Z, r18
	else _delay_us( 2 );

	SREG = sreg;
    2e62:	8f e5       	ldi	r24, 0x5F	; 95
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	29 81       	ldd	r18, Y+1	; 0x01
    2e68:	fc 01       	movw	r30, r24
    2e6a:	20 83       	st	Z, r18

	return bit != 0;
    2e6c:	ce 01       	movw	r24, r28
    2e6e:	87 57       	subi	r24, 0x77	; 119
    2e70:	9f 4f       	sbci	r25, 0xFF	; 255
    2e72:	21 e0       	ldi	r18, 0x01	; 1
    2e74:	fc 01       	movw	r30, r24
    2e76:	80 81       	ld	r24, Z
    2e78:	88 23       	and	r24, r24
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <onewireWriteBit+0xba2>
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	82 2f       	mov	r24, r18
}
    2e80:	c7 57       	subi	r28, 0x77	; 119
    2e82:	df 4f       	sbci	r29, 0xFF	; 255
    2e84:	0f b6       	in	r0, 0x3f	; 63
    2e86:	f8 94       	cli
    2e88:	de bf       	out	0x3e, r29	; 62
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	cd bf       	out	0x3d, r28	; 61
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	1f 91       	pop	r17
    2e94:	0f 91       	pop	r16
    2e96:	08 95       	ret

00002e98 <onewireWrite>:

//! Transmits a byte over 1wire bus
void onewireWrite( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t data )
{
    2e98:	0f 93       	push	r16
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    2ea2:	2a 97       	sbiw	r28, 0x0a	; 10
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	9c 83       	std	Y+4, r25	; 0x04
    2eb0:	8b 83       	std	Y+3, r24	; 0x03
    2eb2:	7e 83       	std	Y+6, r23	; 0x06
    2eb4:	6d 83       	std	Y+5, r22	; 0x05
    2eb6:	58 87       	std	Y+8, r21	; 0x08
    2eb8:	4f 83       	std	Y+7, r20	; 0x07
    2eba:	29 87       	std	Y+9, r18	; 0x09
    2ebc:	0a 87       	std	Y+10, r16	; 0x0a
	uint8_t sreg = SREG; //Store status register
    2ebe:	8f e5       	ldi	r24, 0x5F	; 95
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	80 81       	ld	r24, Z
    2ec6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    2ec8:	19 82       	std	Y+1, r1	; 0x01

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Write byte in 8 single bit writes
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	89 83       	std	Y+1, r24	; 0x01
    2ece:	11 c0       	rjmp	.+34     	; 0x2ef2 <onewireWrite+0x5a>
		onewireWriteBit( port, direction, portin, mask, data & i );
    2ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	29 2f       	mov	r18, r25
    2ed6:	28 23       	and	r18, r24
    2ed8:	4f 81       	ldd	r20, Y+7	; 0x07
    2eda:	58 85       	ldd	r21, Y+8	; 0x08
    2edc:	6d 81       	ldd	r22, Y+5	; 0x05
    2ede:	7e 81       	ldd	r23, Y+6	; 0x06
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee4:	02 2f       	mov	r16, r18
    2ee6:	29 85       	ldd	r18, Y+9	; 0x09
    2ee8:	0e 94 6e 11 	call	0x22dc	; 0x22dc <onewireWriteBit>

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Write byte in 8 single bit writes
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	88 0f       	add	r24, r24
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	88 23       	and	r24, r24
    2ef6:	61 f7       	brne	.-40     	; 0x2ed0 <onewireWrite+0x38>
		onewireWriteBit( port, direction, portin, mask, data & i );

	SREG = sreg;
    2ef8:	8f e5       	ldi	r24, 0x5F	; 95
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	2a 81       	ldd	r18, Y+2	; 0x02
    2efe:	fc 01       	movw	r30, r24
    2f00:	20 83       	st	Z, r18
}
    2f02:	2a 96       	adiw	r28, 0x0a	; 10
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	df 91       	pop	r29
    2f10:	cf 91       	pop	r28
    2f12:	0f 91       	pop	r16
    2f14:	08 95       	ret

00002f16 <onewireReadBit>:

//! Reads a bit from the 1wire bus
uint8_t onewireReadBit( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	c9 56       	subi	r28, 0x69	; 105
    2f24:	d1 09       	sbc	r29, r1
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	fe 01       	movw	r30, r28
    2f32:	ed 59       	subi	r30, 0x9D	; 157
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	91 83       	std	Z+1, r25	; 0x01
    2f38:	80 83       	st	Z, r24
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	8b 59       	subi	r24, 0x9B	; 155
    2f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f40:	fc 01       	movw	r30, r24
    2f42:	71 83       	std	Z+1, r23	; 0x01
    2f44:	60 83       	st	Z, r22
    2f46:	ce 01       	movw	r24, r28
    2f48:	89 59       	subi	r24, 0x99	; 153
    2f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	51 83       	std	Z+1, r21	; 0x01
    2f50:	40 83       	st	Z, r20
    2f52:	ce 01       	movw	r24, r28
    2f54:	87 59       	subi	r24, 0x97	; 151
    2f56:	9f 4f       	sbci	r25, 0xFF	; 255
    2f58:	fc 01       	movw	r30, r24
    2f5a:	20 83       	st	Z, r18
	uint8_t bit = 0;
    2f5c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t sreg = SREG;
    2f5e:	8f e5       	ldi	r24, 0x5F	; 95
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	fc 01       	movw	r30, r24
    2f64:	80 81       	ld	r24, Z
    2f66:	8a 83       	std	Y+2, r24	; 0x02

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	*port |= mask; //Write 1 to output
    2f68:	ce 01       	movw	r24, r28
    2f6a:	8d 59       	subi	r24, 0x9D	; 157
    2f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6e:	fc 01       	movw	r30, r24
    2f70:	80 81       	ld	r24, Z
    2f72:	91 81       	ldd	r25, Z+1	; 0x01
    2f74:	fc 01       	movw	r30, r24
    2f76:	20 81       	ld	r18, Z
    2f78:	ce 01       	movw	r24, r28
    2f7a:	87 59       	subi	r24, 0x97	; 151
    2f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7e:	fc 01       	movw	r30, r24
    2f80:	80 81       	ld	r24, Z
    2f82:	28 2b       	or	r18, r24
    2f84:	ce 01       	movw	r24, r28
    2f86:	8d 59       	subi	r24, 0x9D	; 157
    2f88:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	fc 01       	movw	r30, r24
    2f92:	20 83       	st	Z, r18
	*direction |= mask;
    2f94:	ce 01       	movw	r24, r28
    2f96:	8b 59       	subi	r24, 0x9B	; 155
    2f98:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	20 81       	ld	r18, Z
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	87 59       	subi	r24, 0x97	; 151
    2fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2faa:	fc 01       	movw	r30, r24
    2fac:	80 81       	ld	r24, Z
    2fae:	28 2b       	or	r18, r24
    2fb0:	ce 01       	movw	r24, r28
    2fb2:	8b 59       	subi	r24, 0x9B	; 155
    2fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	80 81       	ld	r24, Z
    2fba:	91 81       	ldd	r25, Z+1	; 0x01
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	20 83       	st	Z, r18
	*port &= ~mask; //Write 0 to output
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	8d 59       	subi	r24, 0x9D	; 157
    2fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	80 81       	ld	r24, Z
    2fca:	91 81       	ldd	r25, Z+1	; 0x01
    2fcc:	fc 01       	movw	r30, r24
    2fce:	80 81       	ld	r24, Z
    2fd0:	28 2f       	mov	r18, r24
    2fd2:	ce 01       	movw	r24, r28
    2fd4:	87 59       	subi	r24, 0x97	; 151
    2fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd8:	fc 01       	movw	r30, r24
    2fda:	80 81       	ld	r24, Z
    2fdc:	80 95       	com	r24
    2fde:	82 23       	and	r24, r18
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	ce 01       	movw	r24, r28
    2fe4:	8d 59       	subi	r24, 0x9D	; 157
    2fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe8:	fc 01       	movw	r30, r24
    2fea:	80 81       	ld	r24, Z
    2fec:	91 81       	ldd	r25, Z+1	; 0x01
    2fee:	fc 01       	movw	r30, r24
    2ff0:	20 83       	st	Z, r18
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	a0 e0       	ldi	r26, 0x00	; 0
    2ff8:	b0 e4       	ldi	r27, 0x40	; 64
    2ffa:	8b 83       	std	Y+3, r24	; 0x03
    2ffc:	9c 83       	std	Y+4, r25	; 0x04
    2ffe:	ad 83       	std	Y+5, r26	; 0x05
    3000:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    3002:	2b ea       	ldi	r18, 0xAB	; 171
    3004:	3a ea       	ldi	r19, 0xAA	; 170
    3006:	4a e2       	ldi	r20, 0x2A	; 42
    3008:	50 e4       	ldi	r21, 0x40	; 64
    300a:	6b 81       	ldd	r22, Y+3	; 0x03
    300c:	7c 81       	ldd	r23, Y+4	; 0x04
    300e:	8d 81       	ldd	r24, Y+5	; 0x05
    3010:	9e 81       	ldd	r25, Y+6	; 0x06
    3012:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	8f 83       	std	Y+7, r24	; 0x07
    301c:	98 87       	std	Y+8, r25	; 0x08
    301e:	a9 87       	std	Y+9, r26	; 0x09
    3020:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3022:	8b 81       	ldd	r24, Y+3	; 0x03
    3024:	9c 81       	ldd	r25, Y+4	; 0x04
    3026:	ad 81       	ldd	r26, Y+5	; 0x05
    3028:	be 81       	ldd	r27, Y+6	; 0x06
    302a:	9c 01       	movw	r18, r24
    302c:	ad 01       	movw	r20, r26
    302e:	bc 01       	movw	r22, r24
    3030:	cd 01       	movw	r24, r26
    3032:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__addsf3>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	8b 87       	std	Y+11, r24	; 0x0b
    303c:	9c 87       	std	Y+12, r25	; 0x0c
    303e:	ad 87       	std	Y+13, r26	; 0x0d
    3040:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e8       	ldi	r20, 0x80	; 128
    3048:	5f e3       	ldi	r21, 0x3F	; 63
    304a:	6f 81       	ldd	r22, Y+7	; 0x07
    304c:	78 85       	ldd	r23, Y+8	; 0x08
    304e:	89 85       	ldd	r24, Y+9	; 0x09
    3050:	9a 85       	ldd	r25, Y+10	; 0x0a
    3052:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    3056:	88 23       	and	r24, r24
    3058:	1c f4       	brge	.+6      	; 0x3060 <onewireReadBit+0x14a>
		__ticks = 1;
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	8f 87       	std	Y+15, r24	; 0x0f
    305e:	b2 c0       	rjmp	.+356    	; 0x31c4 <onewireReadBit+0x2ae>
	else if (__tmp2 > 65535)
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	3f ef       	ldi	r19, 0xFF	; 255
    3064:	4f e7       	ldi	r20, 0x7F	; 127
    3066:	57 e4       	ldi	r21, 0x47	; 71
    3068:	6b 85       	ldd	r22, Y+11	; 0x0b
    306a:	7c 85       	ldd	r23, Y+12	; 0x0c
    306c:	8d 85       	ldd	r24, Y+13	; 0x0d
    306e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3070:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    3074:	18 16       	cp	r1, r24
    3076:	0c f0       	brlt	.+2      	; 0x307a <onewireReadBit+0x164>
    3078:	7b c0       	rjmp	.+246    	; 0x3170 <onewireReadBit+0x25a>
	{
		_delay_ms(__us / 1000.0);
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	4a e7       	ldi	r20, 0x7A	; 122
    3080:	54 e4       	ldi	r21, 0x44	; 68
    3082:	6b 81       	ldd	r22, Y+3	; 0x03
    3084:	7c 81       	ldd	r23, Y+4	; 0x04
    3086:	8d 81       	ldd	r24, Y+5	; 0x05
    3088:	9e 81       	ldd	r25, Y+6	; 0x06
    308a:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__divsf3>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	88 8b       	std	Y+16, r24	; 0x10
    3094:	99 8b       	std	Y+17, r25	; 0x11
    3096:	aa 8b       	std	Y+18, r26	; 0x12
    3098:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	4a ef       	ldi	r20, 0xFA	; 250
    30a0:	54 e4       	ldi	r21, 0x44	; 68
    30a2:	68 89       	ldd	r22, Y+16	; 0x10
    30a4:	79 89       	ldd	r23, Y+17	; 0x11
    30a6:	8a 89       	ldd	r24, Y+18	; 0x12
    30a8:	9b 89       	ldd	r25, Y+19	; 0x13
    30aa:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	8c 8b       	std	Y+20, r24	; 0x14
    30b4:	9d 8b       	std	Y+21, r25	; 0x15
    30b6:	ae 8b       	std	Y+22, r26	; 0x16
    30b8:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e8       	ldi	r20, 0x80	; 128
    30c0:	5f e3       	ldi	r21, 0x3F	; 63
    30c2:	6c 89       	ldd	r22, Y+20	; 0x14
    30c4:	7d 89       	ldd	r23, Y+21	; 0x15
    30c6:	8e 89       	ldd	r24, Y+22	; 0x16
    30c8:	9f 89       	ldd	r25, Y+23	; 0x17
    30ca:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    30ce:	88 23       	and	r24, r24
    30d0:	2c f4       	brge	.+10     	; 0x30dc <onewireReadBit+0x1c6>
		__ticks = 1;
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	99 8f       	std	Y+25, r25	; 0x19
    30d8:	88 8f       	std	Y+24, r24	; 0x18
    30da:	3f c0       	rjmp	.+126    	; 0x315a <onewireReadBit+0x244>
	else if (__tmp > 65535)
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	3f ef       	ldi	r19, 0xFF	; 255
    30e0:	4f e7       	ldi	r20, 0x7F	; 127
    30e2:	57 e4       	ldi	r21, 0x47	; 71
    30e4:	6c 89       	ldd	r22, Y+20	; 0x14
    30e6:	7d 89       	ldd	r23, Y+21	; 0x15
    30e8:	8e 89       	ldd	r24, Y+22	; 0x16
    30ea:	9f 89       	ldd	r25, Y+23	; 0x17
    30ec:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    30f0:	18 16       	cp	r1, r24
    30f2:	4c f5       	brge	.+82     	; 0x3146 <onewireReadBit+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e2       	ldi	r20, 0x20	; 32
    30fa:	51 e4       	ldi	r21, 0x41	; 65
    30fc:	68 89       	ldd	r22, Y+16	; 0x10
    30fe:	79 89       	ldd	r23, Y+17	; 0x11
    3100:	8a 89       	ldd	r24, Y+18	; 0x12
    3102:	9b 89       	ldd	r25, Y+19	; 0x13
    3104:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	bc 01       	movw	r22, r24
    310e:	cd 01       	movw	r24, r26
    3110:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	99 8f       	std	Y+25, r25	; 0x19
    311a:	88 8f       	std	Y+24, r24	; 0x18
    311c:	0f c0       	rjmp	.+30     	; 0x313c <onewireReadBit+0x226>
    311e:	88 ec       	ldi	r24, 0xC8	; 200
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	9b 8f       	std	Y+27, r25	; 0x1b
    3124:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3126:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3128:	9b 8d       	ldd	r25, Y+27	; 0x1b
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	f1 f7       	brne	.-4      	; 0x312a <onewireReadBit+0x214>
    312e:	9b 8f       	std	Y+27, r25	; 0x1b
    3130:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3132:	88 8d       	ldd	r24, Y+24	; 0x18
    3134:	99 8d       	ldd	r25, Y+25	; 0x19
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	99 8f       	std	Y+25, r25	; 0x19
    313a:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313c:	88 8d       	ldd	r24, Y+24	; 0x18
    313e:	99 8d       	ldd	r25, Y+25	; 0x19
    3140:	00 97       	sbiw	r24, 0x00	; 0
    3142:	69 f7       	brne	.-38     	; 0x311e <onewireReadBit+0x208>
    3144:	3f c0       	rjmp	.+126    	; 0x31c4 <onewireReadBit+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3146:	6c 89       	ldd	r22, Y+20	; 0x14
    3148:	7d 89       	ldd	r23, Y+21	; 0x15
    314a:	8e 89       	ldd	r24, Y+22	; 0x16
    314c:	9f 89       	ldd	r25, Y+23	; 0x17
    314e:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	99 8f       	std	Y+25, r25	; 0x19
    3158:	88 8f       	std	Y+24, r24	; 0x18
    315a:	88 8d       	ldd	r24, Y+24	; 0x18
    315c:	99 8d       	ldd	r25, Y+25	; 0x19
    315e:	9d 8f       	std	Y+29, r25	; 0x1d
    3160:	8c 8f       	std	Y+28, r24	; 0x1c
    3162:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3164:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	f1 f7       	brne	.-4      	; 0x3166 <onewireReadBit+0x250>
    316a:	9d 8f       	std	Y+29, r25	; 0x1d
    316c:	8c 8f       	std	Y+28, r24	; 0x1c
    316e:	2a c0       	rjmp	.+84     	; 0x31c4 <onewireReadBit+0x2ae>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	4f e7       	ldi	r20, 0x7F	; 127
    3176:	53 e4       	ldi	r21, 0x43	; 67
    3178:	6f 81       	ldd	r22, Y+7	; 0x07
    317a:	78 85       	ldd	r23, Y+8	; 0x08
    317c:	89 85       	ldd	r24, Y+9	; 0x09
    317e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3180:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    3184:	18 16       	cp	r1, r24
    3186:	ac f4       	brge	.+42     	; 0x31b2 <onewireReadBit+0x29c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    3188:	6b 85       	ldd	r22, Y+11	; 0x0b
    318a:	7c 85       	ldd	r23, Y+12	; 0x0c
    318c:	8d 85       	ldd	r24, Y+13	; 0x0d
    318e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3190:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	9f 8f       	std	Y+31, r25	; 0x1f
    319a:	8e 8f       	std	Y+30, r24	; 0x1e
    319c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    319e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31a0:	99 a3       	std	Y+33, r25	; 0x21
    31a2:	88 a3       	std	Y+32, r24	; 0x20
    31a4:	88 a1       	ldd	r24, Y+32	; 0x20
    31a6:	99 a1       	ldd	r25, Y+33	; 0x21
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	f1 f7       	brne	.-4      	; 0x31a8 <onewireReadBit+0x292>
    31ac:	99 a3       	std	Y+33, r25	; 0x21
    31ae:	88 a3       	std	Y+32, r24	; 0x20
    31b0:	0f c0       	rjmp	.+30     	; 0x31d0 <onewireReadBit+0x2ba>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31b2:	6f 81       	ldd	r22, Y+7	; 0x07
    31b4:	78 85       	ldd	r23, Y+8	; 0x08
    31b6:	89 85       	ldd	r24, Y+9	; 0x09
    31b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ba:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	8f 87       	std	Y+15, r24	; 0x0f
    31c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31c6:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31c8:	8a a1       	ldd	r24, Y+34	; 0x22
    31ca:	8a 95       	dec	r24
    31cc:	f1 f7       	brne	.-4      	; 0x31ca <onewireReadBit+0x2b4>
    31ce:	8a a3       	std	Y+34, r24	; 0x22
	_delay_us( 2 );
	*direction &= ~mask; //Set port to input
    31d0:	ce 01       	movw	r24, r28
    31d2:	8b 59       	subi	r24, 0x9B	; 155
    31d4:	9f 4f       	sbci	r25, 0xFF	; 255
    31d6:	fc 01       	movw	r30, r24
    31d8:	80 81       	ld	r24, Z
    31da:	91 81       	ldd	r25, Z+1	; 0x01
    31dc:	fc 01       	movw	r30, r24
    31de:	80 81       	ld	r24, Z
    31e0:	28 2f       	mov	r18, r24
    31e2:	ce 01       	movw	r24, r28
    31e4:	87 59       	subi	r24, 0x97	; 151
    31e6:	9f 4f       	sbci	r25, 0xFF	; 255
    31e8:	fc 01       	movw	r30, r24
    31ea:	80 81       	ld	r24, Z
    31ec:	80 95       	com	r24
    31ee:	82 23       	and	r24, r18
    31f0:	28 2f       	mov	r18, r24
    31f2:	ce 01       	movw	r24, r28
    31f4:	8b 59       	subi	r24, 0x9B	; 155
    31f6:	9f 4f       	sbci	r25, 0xFF	; 255
    31f8:	fc 01       	movw	r30, r24
    31fa:	80 81       	ld	r24, Z
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	fc 01       	movw	r30, r24
    3200:	20 83       	st	Z, r18
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a0 ea       	ldi	r26, 0xA0	; 160
    3208:	b0 e4       	ldi	r27, 0x40	; 64
    320a:	8b a3       	std	Y+35, r24	; 0x23
    320c:	9c a3       	std	Y+36, r25	; 0x24
    320e:	ad a3       	std	Y+37, r26	; 0x25
    3210:	be a3       	std	Y+38, r27	; 0x26
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    3212:	2b ea       	ldi	r18, 0xAB	; 171
    3214:	3a ea       	ldi	r19, 0xAA	; 170
    3216:	4a e2       	ldi	r20, 0x2A	; 42
    3218:	50 e4       	ldi	r21, 0x40	; 64
    321a:	6b a1       	ldd	r22, Y+35	; 0x23
    321c:	7c a1       	ldd	r23, Y+36	; 0x24
    321e:	8d a1       	ldd	r24, Y+37	; 0x25
    3220:	9e a1       	ldd	r25, Y+38	; 0x26
    3222:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	8f a3       	std	Y+39, r24	; 0x27
    322c:	98 a7       	std	Y+40, r25	; 0x28
    322e:	a9 a7       	std	Y+41, r26	; 0x29
    3230:	ba a7       	std	Y+42, r27	; 0x2a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3232:	8b a1       	ldd	r24, Y+35	; 0x23
    3234:	9c a1       	ldd	r25, Y+36	; 0x24
    3236:	ad a1       	ldd	r26, Y+37	; 0x25
    3238:	be a1       	ldd	r27, Y+38	; 0x26
    323a:	9c 01       	movw	r18, r24
    323c:	ad 01       	movw	r20, r26
    323e:	bc 01       	movw	r22, r24
    3240:	cd 01       	movw	r24, r26
    3242:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__addsf3>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	8b a7       	std	Y+43, r24	; 0x2b
    324c:	9c a7       	std	Y+44, r25	; 0x2c
    324e:	ad a7       	std	Y+45, r26	; 0x2d
    3250:	be a7       	std	Y+46, r27	; 0x2e
	if (__tmp < 1.0)
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	40 e8       	ldi	r20, 0x80	; 128
    3258:	5f e3       	ldi	r21, 0x3F	; 63
    325a:	6f a1       	ldd	r22, Y+39	; 0x27
    325c:	78 a5       	ldd	r23, Y+40	; 0x28
    325e:	89 a5       	ldd	r24, Y+41	; 0x29
    3260:	9a a5       	ldd	r25, Y+42	; 0x2a
    3262:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    3266:	88 23       	and	r24, r24
    3268:	1c f4       	brge	.+6      	; 0x3270 <onewireReadBit+0x35a>
		__ticks = 1;
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	8f a7       	std	Y+47, r24	; 0x2f
    326e:	be c0       	rjmp	.+380    	; 0x33ec <onewireReadBit+0x4d6>
	else if (__tmp2 > 65535)
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	3f ef       	ldi	r19, 0xFF	; 255
    3274:	4f e7       	ldi	r20, 0x7F	; 127
    3276:	57 e4       	ldi	r21, 0x47	; 71
    3278:	6b a5       	ldd	r22, Y+43	; 0x2b
    327a:	7c a5       	ldd	r23, Y+44	; 0x2c
    327c:	8d a5       	ldd	r24, Y+45	; 0x2d
    327e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3280:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    3284:	18 16       	cp	r1, r24
    3286:	0c f0       	brlt	.+2      	; 0x328a <onewireReadBit+0x374>
    3288:	7b c0       	rjmp	.+246    	; 0x3380 <onewireReadBit+0x46a>
	{
		_delay_ms(__us / 1000.0);
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	4a e7       	ldi	r20, 0x7A	; 122
    3290:	54 e4       	ldi	r21, 0x44	; 68
    3292:	6b a1       	ldd	r22, Y+35	; 0x23
    3294:	7c a1       	ldd	r23, Y+36	; 0x24
    3296:	8d a1       	ldd	r24, Y+37	; 0x25
    3298:	9e a1       	ldd	r25, Y+38	; 0x26
    329a:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__divsf3>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	88 ab       	std	Y+48, r24	; 0x30
    32a4:	99 ab       	std	Y+49, r25	; 0x31
    32a6:	aa ab       	std	Y+50, r26	; 0x32
    32a8:	bb ab       	std	Y+51, r27	; 0x33

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	4a ef       	ldi	r20, 0xFA	; 250
    32b0:	54 e4       	ldi	r21, 0x44	; 68
    32b2:	68 a9       	ldd	r22, Y+48	; 0x30
    32b4:	79 a9       	ldd	r23, Y+49	; 0x31
    32b6:	8a a9       	ldd	r24, Y+50	; 0x32
    32b8:	9b a9       	ldd	r25, Y+51	; 0x33
    32ba:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	8c ab       	std	Y+52, r24	; 0x34
    32c4:	9d ab       	std	Y+53, r25	; 0x35
    32c6:	ae ab       	std	Y+54, r26	; 0x36
    32c8:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e8       	ldi	r20, 0x80	; 128
    32d0:	5f e3       	ldi	r21, 0x3F	; 63
    32d2:	6c a9       	ldd	r22, Y+52	; 0x34
    32d4:	7d a9       	ldd	r23, Y+53	; 0x35
    32d6:	8e a9       	ldd	r24, Y+54	; 0x36
    32d8:	9f a9       	ldd	r25, Y+55	; 0x37
    32da:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    32de:	88 23       	and	r24, r24
    32e0:	2c f4       	brge	.+10     	; 0x32ec <onewireReadBit+0x3d6>
		__ticks = 1;
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	99 af       	std	Y+57, r25	; 0x39
    32e8:	88 af       	std	Y+56, r24	; 0x38
    32ea:	3f c0       	rjmp	.+126    	; 0x336a <onewireReadBit+0x454>
	else if (__tmp > 65535)
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	3f ef       	ldi	r19, 0xFF	; 255
    32f0:	4f e7       	ldi	r20, 0x7F	; 127
    32f2:	57 e4       	ldi	r21, 0x47	; 71
    32f4:	6c a9       	ldd	r22, Y+52	; 0x34
    32f6:	7d a9       	ldd	r23, Y+53	; 0x35
    32f8:	8e a9       	ldd	r24, Y+54	; 0x36
    32fa:	9f a9       	ldd	r25, Y+55	; 0x37
    32fc:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    3300:	18 16       	cp	r1, r24
    3302:	4c f5       	brge	.+82     	; 0x3356 <onewireReadBit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e2       	ldi	r20, 0x20	; 32
    330a:	51 e4       	ldi	r21, 0x41	; 65
    330c:	68 a9       	ldd	r22, Y+48	; 0x30
    330e:	79 a9       	ldd	r23, Y+49	; 0x31
    3310:	8a a9       	ldd	r24, Y+50	; 0x32
    3312:	9b a9       	ldd	r25, Y+51	; 0x33
    3314:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	bc 01       	movw	r22, r24
    331e:	cd 01       	movw	r24, r26
    3320:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	99 af       	std	Y+57, r25	; 0x39
    332a:	88 af       	std	Y+56, r24	; 0x38
    332c:	0f c0       	rjmp	.+30     	; 0x334c <onewireReadBit+0x436>
    332e:	88 ec       	ldi	r24, 0xC8	; 200
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	9b af       	std	Y+59, r25	; 0x3b
    3334:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3336:	8a ad       	ldd	r24, Y+58	; 0x3a
    3338:	9b ad       	ldd	r25, Y+59	; 0x3b
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	f1 f7       	brne	.-4      	; 0x333a <onewireReadBit+0x424>
    333e:	9b af       	std	Y+59, r25	; 0x3b
    3340:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3342:	88 ad       	ldd	r24, Y+56	; 0x38
    3344:	99 ad       	ldd	r25, Y+57	; 0x39
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	99 af       	std	Y+57, r25	; 0x39
    334a:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334c:	88 ad       	ldd	r24, Y+56	; 0x38
    334e:	99 ad       	ldd	r25, Y+57	; 0x39
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	69 f7       	brne	.-38     	; 0x332e <onewireReadBit+0x418>
    3354:	4b c0       	rjmp	.+150    	; 0x33ec <onewireReadBit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3356:	6c a9       	ldd	r22, Y+52	; 0x34
    3358:	7d a9       	ldd	r23, Y+53	; 0x35
    335a:	8e a9       	ldd	r24, Y+54	; 0x36
    335c:	9f a9       	ldd	r25, Y+55	; 0x37
    335e:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	99 af       	std	Y+57, r25	; 0x39
    3368:	88 af       	std	Y+56, r24	; 0x38
    336a:	88 ad       	ldd	r24, Y+56	; 0x38
    336c:	99 ad       	ldd	r25, Y+57	; 0x39
    336e:	9d af       	std	Y+61, r25	; 0x3d
    3370:	8c af       	std	Y+60, r24	; 0x3c
    3372:	8c ad       	ldd	r24, Y+60	; 0x3c
    3374:	9d ad       	ldd	r25, Y+61	; 0x3d
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	f1 f7       	brne	.-4      	; 0x3376 <onewireReadBit+0x460>
    337a:	9d af       	std	Y+61, r25	; 0x3d
    337c:	8c af       	std	Y+60, r24	; 0x3c
    337e:	36 c0       	rjmp	.+108    	; 0x33ec <onewireReadBit+0x4d6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	4f e7       	ldi	r20, 0x7F	; 127
    3386:	53 e4       	ldi	r21, 0x43	; 67
    3388:	6f a1       	ldd	r22, Y+39	; 0x27
    338a:	78 a5       	ldd	r23, Y+40	; 0x28
    338c:	89 a5       	ldd	r24, Y+41	; 0x29
    338e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3390:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    3394:	18 16       	cp	r1, r24
    3396:	0c f5       	brge	.+66     	; 0x33da <onewireReadBit+0x4c4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    3398:	6b a5       	ldd	r22, Y+43	; 0x2b
    339a:	7c a5       	ldd	r23, Y+44	; 0x2c
    339c:	8d a5       	ldd	r24, Y+45	; 0x2d
    339e:	9e a5       	ldd	r25, Y+46	; 0x2e
    33a0:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	9f af       	std	Y+63, r25	; 0x3f
    33aa:	8e af       	std	Y+62, r24	; 0x3e
    33ac:	ce 01       	movw	r24, r28
    33ae:	80 5c       	subi	r24, 0xC0	; 192
    33b0:	9f 4f       	sbci	r25, 0xFF	; 255
    33b2:	2e ad       	ldd	r18, Y+62	; 0x3e
    33b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    33b6:	fc 01       	movw	r30, r24
    33b8:	31 83       	std	Z+1, r19	; 0x01
    33ba:	20 83       	st	Z, r18
    33bc:	ce 01       	movw	r24, r28
    33be:	80 5c       	subi	r24, 0xC0	; 192
    33c0:	9f 4f       	sbci	r25, 0xFF	; 255
    33c2:	fc 01       	movw	r30, r24
    33c4:	80 81       	ld	r24, Z
    33c6:	91 81       	ldd	r25, Z+1	; 0x01
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	f1 f7       	brne	.-4      	; 0x33c8 <onewireReadBit+0x4b2>
    33cc:	9e 01       	movw	r18, r28
    33ce:	20 5c       	subi	r18, 0xC0	; 192
    33d0:	3f 4f       	sbci	r19, 0xFF	; 255
    33d2:	f9 01       	movw	r30, r18
    33d4:	91 83       	std	Z+1, r25	; 0x01
    33d6:	80 83       	st	Z, r24
    33d8:	1c c0       	rjmp	.+56     	; 0x3412 <onewireReadBit+0x4fc>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33da:	6f a1       	ldd	r22, Y+39	; 0x27
    33dc:	78 a5       	ldd	r23, Y+40	; 0x28
    33de:	89 a5       	ldd	r24, Y+41	; 0x29
    33e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    33e2:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	8f a7       	std	Y+47, r24	; 0x2f
    33ec:	ce 01       	movw	r24, r28
    33ee:	8e 5b       	subi	r24, 0xBE	; 190
    33f0:	9f 4f       	sbci	r25, 0xFF	; 255
    33f2:	2f a5       	ldd	r18, Y+47	; 0x2f
    33f4:	fc 01       	movw	r30, r24
    33f6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33f8:	ce 01       	movw	r24, r28
    33fa:	8e 5b       	subi	r24, 0xBE	; 190
    33fc:	9f 4f       	sbci	r25, 0xFF	; 255
    33fe:	fc 01       	movw	r30, r24
    3400:	80 81       	ld	r24, Z
    3402:	28 2f       	mov	r18, r24
    3404:	2a 95       	dec	r18
    3406:	f1 f7       	brne	.-4      	; 0x3404 <onewireReadBit+0x4ee>
    3408:	ce 01       	movw	r24, r28
    340a:	8e 5b       	subi	r24, 0xBE	; 190
    340c:	9f 4f       	sbci	r25, 0xFF	; 255
    340e:	fc 01       	movw	r30, r24
    3410:	20 83       	st	Z, r18
	_delay_us( 5 );
	bit = ( ( *portin & mask ) != 0 ); //Read input
    3412:	ce 01       	movw	r24, r28
    3414:	89 59       	subi	r24, 0x99	; 153
    3416:	9f 4f       	sbci	r25, 0xFF	; 255
    3418:	fc 01       	movw	r30, r24
    341a:	80 81       	ld	r24, Z
    341c:	91 81       	ldd	r25, Z+1	; 0x01
    341e:	fc 01       	movw	r30, r24
    3420:	20 81       	ld	r18, Z
    3422:	ce 01       	movw	r24, r28
    3424:	87 59       	subi	r24, 0x97	; 151
    3426:	9f 4f       	sbci	r25, 0xFF	; 255
    3428:	fc 01       	movw	r30, r24
    342a:	80 81       	ld	r24, Z
    342c:	92 2f       	mov	r25, r18
    342e:	98 23       	and	r25, r24
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	99 23       	and	r25, r25
    3434:	09 f4       	brne	.+2      	; 0x3438 <onewireReadBit+0x522>
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	89 83       	std	Y+1, r24	; 0x01
    343a:	9e 01       	movw	r18, r28
    343c:	2d 5b       	subi	r18, 0xBD	; 189
    343e:	3f 4f       	sbci	r19, 0xFF	; 255
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	a0 e7       	ldi	r26, 0x70	; 112
    3446:	b2 e4       	ldi	r27, 0x42	; 66
    3448:	f9 01       	movw	r30, r18
    344a:	80 83       	st	Z, r24
    344c:	91 83       	std	Z+1, r25	; 0x01
    344e:	a2 83       	std	Z+2, r26	; 0x02
    3450:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    3452:	8e 01       	movw	r16, r28
    3454:	09 5b       	subi	r16, 0xB9	; 185
    3456:	1f 4f       	sbci	r17, 0xFF	; 255
    3458:	ce 01       	movw	r24, r28
    345a:	8d 5b       	subi	r24, 0xBD	; 189
    345c:	9f 4f       	sbci	r25, 0xFF	; 255
    345e:	2b ea       	ldi	r18, 0xAB	; 171
    3460:	3a ea       	ldi	r19, 0xAA	; 170
    3462:	4a e2       	ldi	r20, 0x2A	; 42
    3464:	50 e4       	ldi	r21, 0x40	; 64
    3466:	fc 01       	movw	r30, r24
    3468:	60 81       	ld	r22, Z
    346a:	71 81       	ldd	r23, Z+1	; 0x01
    346c:	82 81       	ldd	r24, Z+2	; 0x02
    346e:	93 81       	ldd	r25, Z+3	; 0x03
    3470:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	f8 01       	movw	r30, r16
    347a:	80 83       	st	Z, r24
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	a2 83       	std	Z+2, r26	; 0x02
    3480:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3482:	8e 01       	movw	r16, r28
    3484:	05 5b       	subi	r16, 0xB5	; 181
    3486:	1f 4f       	sbci	r17, 0xFF	; 255
    3488:	ce 01       	movw	r24, r28
    348a:	8d 5b       	subi	r24, 0xBD	; 189
    348c:	9f 4f       	sbci	r25, 0xFF	; 255
    348e:	fc 01       	movw	r30, r24
    3490:	80 81       	ld	r24, Z
    3492:	91 81       	ldd	r25, Z+1	; 0x01
    3494:	a2 81       	ldd	r26, Z+2	; 0x02
    3496:	b3 81       	ldd	r27, Z+3	; 0x03
    3498:	9c 01       	movw	r18, r24
    349a:	ad 01       	movw	r20, r26
    349c:	bc 01       	movw	r22, r24
    349e:	cd 01       	movw	r24, r26
    34a0:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__addsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	f8 01       	movw	r30, r16
    34aa:	80 83       	st	Z, r24
    34ac:	91 83       	std	Z+1, r25	; 0x01
    34ae:	a2 83       	std	Z+2, r26	; 0x02
    34b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34b2:	ce 01       	movw	r24, r28
    34b4:	89 5b       	subi	r24, 0xB9	; 185
    34b6:	9f 4f       	sbci	r25, 0xFF	; 255
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e8       	ldi	r20, 0x80	; 128
    34be:	5f e3       	ldi	r21, 0x3F	; 63
    34c0:	fc 01       	movw	r30, r24
    34c2:	60 81       	ld	r22, Z
    34c4:	71 81       	ldd	r23, Z+1	; 0x01
    34c6:	82 81       	ldd	r24, Z+2	; 0x02
    34c8:	93 81       	ldd	r25, Z+3	; 0x03
    34ca:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    34ce:	88 23       	and	r24, r24
    34d0:	3c f4       	brge	.+14     	; 0x34e0 <onewireReadBit+0x5ca>
		__ticks = 1;
    34d2:	ce 01       	movw	r24, r28
    34d4:	81 5b       	subi	r24, 0xB1	; 177
    34d6:	9f 4f       	sbci	r25, 0xFF	; 255
    34d8:	21 e0       	ldi	r18, 0x01	; 1
    34da:	fc 01       	movw	r30, r24
    34dc:	20 83       	st	Z, r18
    34de:	30 c1       	rjmp	.+608    	; 0x3740 <onewireReadBit+0x82a>
	else if (__tmp2 > 65535)
    34e0:	ce 01       	movw	r24, r28
    34e2:	85 5b       	subi	r24, 0xB5	; 181
    34e4:	9f 4f       	sbci	r25, 0xFF	; 255
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	3f ef       	ldi	r19, 0xFF	; 255
    34ea:	4f e7       	ldi	r20, 0x7F	; 127
    34ec:	57 e4       	ldi	r21, 0x47	; 71
    34ee:	fc 01       	movw	r30, r24
    34f0:	60 81       	ld	r22, Z
    34f2:	71 81       	ldd	r23, Z+1	; 0x01
    34f4:	82 81       	ldd	r24, Z+2	; 0x02
    34f6:	93 81       	ldd	r25, Z+3	; 0x03
    34f8:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    34fc:	18 16       	cp	r1, r24
    34fe:	0c f0       	brlt	.+2      	; 0x3502 <onewireReadBit+0x5ec>
    3500:	d1 c0       	rjmp	.+418    	; 0x36a4 <onewireReadBit+0x78e>
	{
		_delay_ms(__us / 1000.0);
    3502:	ce 01       	movw	r24, r28
    3504:	8d 5b       	subi	r24, 0xBD	; 189
    3506:	9f 4f       	sbci	r25, 0xFF	; 255
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	4a e7       	ldi	r20, 0x7A	; 122
    350e:	54 e4       	ldi	r21, 0x44	; 68
    3510:	fc 01       	movw	r30, r24
    3512:	60 81       	ld	r22, Z
    3514:	71 81       	ldd	r23, Z+1	; 0x01
    3516:	82 81       	ldd	r24, Z+2	; 0x02
    3518:	93 81       	ldd	r25, Z+3	; 0x03
    351a:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__divsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	9e 01       	movw	r18, r28
    3524:	20 5b       	subi	r18, 0xB0	; 176
    3526:	3f 4f       	sbci	r19, 0xFF	; 255
    3528:	f9 01       	movw	r30, r18
    352a:	80 83       	st	Z, r24
    352c:	91 83       	std	Z+1, r25	; 0x01
    352e:	a2 83       	std	Z+2, r26	; 0x02
    3530:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3532:	8e 01       	movw	r16, r28
    3534:	0c 5a       	subi	r16, 0xAC	; 172
    3536:	1f 4f       	sbci	r17, 0xFF	; 255
    3538:	ce 01       	movw	r24, r28
    353a:	80 5b       	subi	r24, 0xB0	; 176
    353c:	9f 4f       	sbci	r25, 0xFF	; 255
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	4a ef       	ldi	r20, 0xFA	; 250
    3544:	54 e4       	ldi	r21, 0x44	; 68
    3546:	fc 01       	movw	r30, r24
    3548:	60 81       	ld	r22, Z
    354a:	71 81       	ldd	r23, Z+1	; 0x01
    354c:	82 81       	ldd	r24, Z+2	; 0x02
    354e:	93 81       	ldd	r25, Z+3	; 0x03
    3550:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	f8 01       	movw	r30, r16
    355a:	80 83       	st	Z, r24
    355c:	91 83       	std	Z+1, r25	; 0x01
    355e:	a2 83       	std	Z+2, r26	; 0x02
    3560:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3562:	ce 01       	movw	r24, r28
    3564:	8c 5a       	subi	r24, 0xAC	; 172
    3566:	9f 4f       	sbci	r25, 0xFF	; 255
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	40 e8       	ldi	r20, 0x80	; 128
    356e:	5f e3       	ldi	r21, 0x3F	; 63
    3570:	fc 01       	movw	r30, r24
    3572:	60 81       	ld	r22, Z
    3574:	71 81       	ldd	r23, Z+1	; 0x01
    3576:	82 81       	ldd	r24, Z+2	; 0x02
    3578:	93 81       	ldd	r25, Z+3	; 0x03
    357a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__cmpsf2>
    357e:	88 23       	and	r24, r24
    3580:	4c f4       	brge	.+18     	; 0x3594 <onewireReadBit+0x67e>
		__ticks = 1;
    3582:	ce 01       	movw	r24, r28
    3584:	88 5a       	subi	r24, 0xA8	; 168
    3586:	9f 4f       	sbci	r25, 0xFF	; 255
    3588:	21 e0       	ldi	r18, 0x01	; 1
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	fc 01       	movw	r30, r24
    358e:	31 83       	std	Z+1, r19	; 0x01
    3590:	20 83       	st	Z, r18
    3592:	6d c0       	rjmp	.+218    	; 0x366e <onewireReadBit+0x758>
	else if (__tmp > 65535)
    3594:	ce 01       	movw	r24, r28
    3596:	8c 5a       	subi	r24, 0xAC	; 172
    3598:	9f 4f       	sbci	r25, 0xFF	; 255
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	3f ef       	ldi	r19, 0xFF	; 255
    359e:	4f e7       	ldi	r20, 0x7F	; 127
    35a0:	57 e4       	ldi	r21, 0x47	; 71
    35a2:	fc 01       	movw	r30, r24
    35a4:	60 81       	ld	r22, Z
    35a6:	71 81       	ldd	r23, Z+1	; 0x01
    35a8:	82 81       	ldd	r24, Z+2	; 0x02
    35aa:	93 81       	ldd	r25, Z+3	; 0x03
    35ac:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    35b0:	18 16       	cp	r1, r24
    35b2:	0c f0       	brlt	.+2      	; 0x35b6 <onewireReadBit+0x6a0>
    35b4:	4a c0       	rjmp	.+148    	; 0x364a <onewireReadBit+0x734>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b6:	ce 01       	movw	r24, r28
    35b8:	80 5b       	subi	r24, 0xB0	; 176
    35ba:	9f 4f       	sbci	r25, 0xFF	; 255
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	40 e2       	ldi	r20, 0x20	; 32
    35c2:	51 e4       	ldi	r21, 0x41	; 65
    35c4:	fc 01       	movw	r30, r24
    35c6:	60 81       	ld	r22, Z
    35c8:	71 81       	ldd	r23, Z+1	; 0x01
    35ca:	82 81       	ldd	r24, Z+2	; 0x02
    35cc:	93 81       	ldd	r25, Z+3	; 0x03
    35ce:	0e 94 3e 20 	call	0x407c	; 0x407c <__mulsf3>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	8e 01       	movw	r16, r28
    35d8:	08 5a       	subi	r16, 0xA8	; 168
    35da:	1f 4f       	sbci	r17, 0xFF	; 255
    35dc:	bc 01       	movw	r22, r24
    35de:	cd 01       	movw	r24, r26
    35e0:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	f8 01       	movw	r30, r16
    35ea:	91 83       	std	Z+1, r25	; 0x01
    35ec:	80 83       	st	Z, r24
    35ee:	24 c0       	rjmp	.+72     	; 0x3638 <onewireReadBit+0x722>
    35f0:	ce 01       	movw	r24, r28
    35f2:	86 5a       	subi	r24, 0xA6	; 166
    35f4:	9f 4f       	sbci	r25, 0xFF	; 255
    35f6:	28 ec       	ldi	r18, 0xC8	; 200
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	fc 01       	movw	r30, r24
    35fc:	31 83       	std	Z+1, r19	; 0x01
    35fe:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3600:	ce 01       	movw	r24, r28
    3602:	86 5a       	subi	r24, 0xA6	; 166
    3604:	9f 4f       	sbci	r25, 0xFF	; 255
    3606:	fc 01       	movw	r30, r24
    3608:	80 81       	ld	r24, Z
    360a:	91 81       	ldd	r25, Z+1	; 0x01
    360c:	01 97       	sbiw	r24, 0x01	; 1
    360e:	f1 f7       	brne	.-4      	; 0x360c <onewireReadBit+0x6f6>
    3610:	9e 01       	movw	r18, r28
    3612:	26 5a       	subi	r18, 0xA6	; 166
    3614:	3f 4f       	sbci	r19, 0xFF	; 255
    3616:	f9 01       	movw	r30, r18
    3618:	91 83       	std	Z+1, r25	; 0x01
    361a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361c:	ce 01       	movw	r24, r28
    361e:	88 5a       	subi	r24, 0xA8	; 168
    3620:	9f 4f       	sbci	r25, 0xFF	; 255
    3622:	9e 01       	movw	r18, r28
    3624:	28 5a       	subi	r18, 0xA8	; 168
    3626:	3f 4f       	sbci	r19, 0xFF	; 255
    3628:	f9 01       	movw	r30, r18
    362a:	20 81       	ld	r18, Z
    362c:	31 81       	ldd	r19, Z+1	; 0x01
    362e:	21 50       	subi	r18, 0x01	; 1
    3630:	31 09       	sbc	r19, r1
    3632:	fc 01       	movw	r30, r24
    3634:	31 83       	std	Z+1, r19	; 0x01
    3636:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3638:	ce 01       	movw	r24, r28
    363a:	88 5a       	subi	r24, 0xA8	; 168
    363c:	9f 4f       	sbci	r25, 0xFF	; 255
    363e:	fc 01       	movw	r30, r24
    3640:	80 81       	ld	r24, Z
    3642:	91 81       	ldd	r25, Z+1	; 0x01
    3644:	00 97       	sbiw	r24, 0x00	; 0
    3646:	a1 f6       	brne	.-88     	; 0x35f0 <onewireReadBit+0x6da>
    3648:	7b c0       	rjmp	.+246    	; 0x3740 <onewireReadBit+0x82a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    364a:	8e 01       	movw	r16, r28
    364c:	08 5a       	subi	r16, 0xA8	; 168
    364e:	1f 4f       	sbci	r17, 0xFF	; 255
    3650:	ce 01       	movw	r24, r28
    3652:	8c 5a       	subi	r24, 0xAC	; 172
    3654:	9f 4f       	sbci	r25, 0xFF	; 255
    3656:	fc 01       	movw	r30, r24
    3658:	60 81       	ld	r22, Z
    365a:	71 81       	ldd	r23, Z+1	; 0x01
    365c:	82 81       	ldd	r24, Z+2	; 0x02
    365e:	93 81       	ldd	r25, Z+3	; 0x03
    3660:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	f8 01       	movw	r30, r16
    366a:	91 83       	std	Z+1, r25	; 0x01
    366c:	80 83       	st	Z, r24
    366e:	ce 01       	movw	r24, r28
    3670:	84 5a       	subi	r24, 0xA4	; 164
    3672:	9f 4f       	sbci	r25, 0xFF	; 255
    3674:	9e 01       	movw	r18, r28
    3676:	28 5a       	subi	r18, 0xA8	; 168
    3678:	3f 4f       	sbci	r19, 0xFF	; 255
    367a:	f9 01       	movw	r30, r18
    367c:	20 81       	ld	r18, Z
    367e:	31 81       	ldd	r19, Z+1	; 0x01
    3680:	fc 01       	movw	r30, r24
    3682:	31 83       	std	Z+1, r19	; 0x01
    3684:	20 83       	st	Z, r18
    3686:	ce 01       	movw	r24, r28
    3688:	84 5a       	subi	r24, 0xA4	; 164
    368a:	9f 4f       	sbci	r25, 0xFF	; 255
    368c:	fc 01       	movw	r30, r24
    368e:	80 81       	ld	r24, Z
    3690:	91 81       	ldd	r25, Z+1	; 0x01
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	f1 f7       	brne	.-4      	; 0x3692 <onewireReadBit+0x77c>
    3696:	9e 01       	movw	r18, r28
    3698:	24 5a       	subi	r18, 0xA4	; 164
    369a:	3f 4f       	sbci	r19, 0xFF	; 255
    369c:	f9 01       	movw	r30, r18
    369e:	91 83       	std	Z+1, r25	; 0x01
    36a0:	80 83       	st	Z, r24
    36a2:	4e c0       	rjmp	.+156    	; 0x3740 <onewireReadBit+0x82a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    36a4:	ce 01       	movw	r24, r28
    36a6:	89 5b       	subi	r24, 0xB9	; 185
    36a8:	9f 4f       	sbci	r25, 0xFF	; 255
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	4f e7       	ldi	r20, 0x7F	; 127
    36b0:	53 e4       	ldi	r21, 0x43	; 67
    36b2:	fc 01       	movw	r30, r24
    36b4:	60 81       	ld	r22, Z
    36b6:	71 81       	ldd	r23, Z+1	; 0x01
    36b8:	82 81       	ldd	r24, Z+2	; 0x02
    36ba:	93 81       	ldd	r25, Z+3	; 0x03
    36bc:	0e 94 3a 20 	call	0x4074	; 0x4074 <__gesf2>
    36c0:	18 16       	cp	r1, r24
    36c2:	6c f5       	brge	.+90     	; 0x371e <onewireReadBit+0x808>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    36c4:	8e 01       	movw	r16, r28
    36c6:	02 5a       	subi	r16, 0xA2	; 162
    36c8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ca:	ce 01       	movw	r24, r28
    36cc:	85 5b       	subi	r24, 0xB5	; 181
    36ce:	9f 4f       	sbci	r25, 0xFF	; 255
    36d0:	fc 01       	movw	r30, r24
    36d2:	60 81       	ld	r22, Z
    36d4:	71 81       	ldd	r23, Z+1	; 0x01
    36d6:	82 81       	ldd	r24, Z+2	; 0x02
    36d8:	93 81       	ldd	r25, Z+3	; 0x03
    36da:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	f8 01       	movw	r30, r16
    36e4:	91 83       	std	Z+1, r25	; 0x01
    36e6:	80 83       	st	Z, r24
    36e8:	ce 01       	movw	r24, r28
    36ea:	80 5a       	subi	r24, 0xA0	; 160
    36ec:	9f 4f       	sbci	r25, 0xFF	; 255
    36ee:	9e 01       	movw	r18, r28
    36f0:	22 5a       	subi	r18, 0xA2	; 162
    36f2:	3f 4f       	sbci	r19, 0xFF	; 255
    36f4:	f9 01       	movw	r30, r18
    36f6:	20 81       	ld	r18, Z
    36f8:	31 81       	ldd	r19, Z+1	; 0x01
    36fa:	fc 01       	movw	r30, r24
    36fc:	31 83       	std	Z+1, r19	; 0x01
    36fe:	20 83       	st	Z, r18
    3700:	ce 01       	movw	r24, r28
    3702:	80 5a       	subi	r24, 0xA0	; 160
    3704:	9f 4f       	sbci	r25, 0xFF	; 255
    3706:	fc 01       	movw	r30, r24
    3708:	80 81       	ld	r24, Z
    370a:	91 81       	ldd	r25, Z+1	; 0x01
    370c:	01 97       	sbiw	r24, 0x01	; 1
    370e:	f1 f7       	brne	.-4      	; 0x370c <onewireReadBit+0x7f6>
    3710:	9e 01       	movw	r18, r28
    3712:	20 5a       	subi	r18, 0xA0	; 160
    3714:	3f 4f       	sbci	r19, 0xFF	; 255
    3716:	f9 01       	movw	r30, r18
    3718:	91 83       	std	Z+1, r25	; 0x01
    371a:	80 83       	st	Z, r24
    371c:	28 c0       	rjmp	.+80     	; 0x376e <onewireReadBit+0x858>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    371e:	8e 01       	movw	r16, r28
    3720:	01 5b       	subi	r16, 0xB1	; 177
    3722:	1f 4f       	sbci	r17, 0xFF	; 255
    3724:	ce 01       	movw	r24, r28
    3726:	89 5b       	subi	r24, 0xB9	; 185
    3728:	9f 4f       	sbci	r25, 0xFF	; 255
    372a:	fc 01       	movw	r30, r24
    372c:	60 81       	ld	r22, Z
    372e:	71 81       	ldd	r23, Z+1	; 0x01
    3730:	82 81       	ldd	r24, Z+2	; 0x02
    3732:	93 81       	ldd	r25, Z+3	; 0x03
    3734:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__fixunssfsi>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	f8 01       	movw	r30, r16
    373e:	80 83       	st	Z, r24
    3740:	ce 01       	movw	r24, r28
    3742:	8e 59       	subi	r24, 0x9E	; 158
    3744:	9f 4f       	sbci	r25, 0xFF	; 255
    3746:	9e 01       	movw	r18, r28
    3748:	21 5b       	subi	r18, 0xB1	; 177
    374a:	3f 4f       	sbci	r19, 0xFF	; 255
    374c:	f9 01       	movw	r30, r18
    374e:	20 81       	ld	r18, Z
    3750:	fc 01       	movw	r30, r24
    3752:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3754:	ce 01       	movw	r24, r28
    3756:	8e 59       	subi	r24, 0x9E	; 158
    3758:	9f 4f       	sbci	r25, 0xFF	; 255
    375a:	fc 01       	movw	r30, r24
    375c:	80 81       	ld	r24, Z
    375e:	28 2f       	mov	r18, r24
    3760:	2a 95       	dec	r18
    3762:	f1 f7       	brne	.-4      	; 0x3760 <onewireReadBit+0x84a>
    3764:	ce 01       	movw	r24, r28
    3766:	8e 59       	subi	r24, 0x9E	; 158
    3768:	9f 4f       	sbci	r25, 0xFF	; 255
    376a:	fc 01       	movw	r30, r24
    376c:	20 83       	st	Z, r18
	_delay_us( 60 );
	SREG = sreg;
    376e:	8f e5       	ldi	r24, 0x5F	; 95
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	2a 81       	ldd	r18, Y+2	; 0x02
    3774:	fc 01       	movw	r30, r24
    3776:	20 83       	st	Z, r18

	return bit;
    3778:	89 81       	ldd	r24, Y+1	; 0x01
}
    377a:	c7 59       	subi	r28, 0x97	; 151
    377c:	df 4f       	sbci	r29, 0xFF	; 255
    377e:	0f b6       	in	r0, 0x3f	; 63
    3780:	f8 94       	cli
    3782:	de bf       	out	0x3e, r29	; 62
    3784:	0f be       	out	0x3f, r0	; 63
    3786:	cd bf       	out	0x3d, r28	; 61
    3788:	df 91       	pop	r29
    378a:	cf 91       	pop	r28
    378c:	1f 91       	pop	r17
    378e:	0f 91       	pop	r16
    3790:	08 95       	ret

00003792 <onewireRead>:

//! Reads a byte from the 1wire bus
uint8_t onewireRead( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
    3792:	cf 93       	push	r28
    3794:	df 93       	push	r29
    3796:	cd b7       	in	r28, 0x3d	; 61
    3798:	de b7       	in	r29, 0x3e	; 62
    379a:	2a 97       	sbiw	r28, 0x0a	; 10
    379c:	0f b6       	in	r0, 0x3f	; 63
    379e:	f8 94       	cli
    37a0:	de bf       	out	0x3e, r29	; 62
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	cd bf       	out	0x3d, r28	; 61
    37a6:	9d 83       	std	Y+5, r25	; 0x05
    37a8:	8c 83       	std	Y+4, r24	; 0x04
    37aa:	7f 83       	std	Y+7, r23	; 0x07
    37ac:	6e 83       	std	Y+6, r22	; 0x06
    37ae:	59 87       	std	Y+9, r21	; 0x09
    37b0:	48 87       	std	Y+8, r20	; 0x08
    37b2:	2a 87       	std	Y+10, r18	; 0x0a
	uint8_t sreg = SREG; //Store status register
    37b4:	8f e5       	ldi	r24, 0x5F	; 95
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	fc 01       	movw	r30, r24
    37ba:	80 81       	ld	r24, Z
    37bc:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t data = 0;
    37be:	19 82       	std	Y+1, r1	; 0x01
	uint8_t i = 0;
    37c0:	1a 82       	std	Y+2, r1	; 0x02

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Read byte in 8 single bit reads
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	8a 83       	std	Y+2, r24	; 0x02
    37c6:	15 c0       	rjmp	.+42     	; 0x37f2 <onewireRead+0x60>
		data |= onewireReadBit( port, direction, portin, mask ) * i;
    37c8:	48 85       	ldd	r20, Y+8	; 0x08
    37ca:	59 85       	ldd	r21, Y+9	; 0x09
    37cc:	6e 81       	ldd	r22, Y+6	; 0x06
    37ce:	7f 81       	ldd	r23, Y+7	; 0x07
    37d0:	8c 81       	ldd	r24, Y+4	; 0x04
    37d2:	9d 81       	ldd	r25, Y+5	; 0x05
    37d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    37d6:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <onewireReadBit>
    37da:	98 2f       	mov	r25, r24
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
    37de:	98 9f       	mul	r25, r24
    37e0:	80 2d       	mov	r24, r0
    37e2:	11 24       	eor	r1, r1
    37e4:	98 2f       	mov	r25, r24
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	89 2b       	or	r24, r25
    37ea:	89 83       	std	Y+1, r24	; 0x01

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Read byte in 8 single bit reads
    37ec:	8a 81       	ldd	r24, Y+2	; 0x02
    37ee:	88 0f       	add	r24, r24
    37f0:	8a 83       	std	Y+2, r24	; 0x02
    37f2:	8a 81       	ldd	r24, Y+2	; 0x02
    37f4:	88 23       	and	r24, r24
    37f6:	41 f7       	brne	.-48     	; 0x37c8 <onewireRead+0x36>
		data |= onewireReadBit( port, direction, portin, mask ) * i;

	SREG = sreg;
    37f8:	8f e5       	ldi	r24, 0x5F	; 95
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	2b 81       	ldd	r18, Y+3	; 0x03
    37fe:	fc 01       	movw	r30, r24
    3800:	20 83       	st	Z, r18

	return data;
    3802:	89 81       	ldd	r24, Y+1	; 0x01
}
    3804:	2a 96       	adiw	r28, 0x0a	; 10
    3806:	0f b6       	in	r0, 0x3f	; 63
    3808:	f8 94       	cli
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	cd bf       	out	0x3d, r28	; 61
    3810:	df 91       	pop	r29
    3812:	cf 91       	pop	r28
    3814:	08 95       	ret

00003816 <ds18b20search>:
#include <ds18b20/ds18b20.h>
#include <ds18b20/romsearch.h>

//! Searches for connected sensors
uint8_t ds18b20search( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *romcnt, uint8_t *roms, uint16_t buflen )
{
    3816:	2f 92       	push	r2
    3818:	3f 92       	push	r3
    381a:	4f 92       	push	r4
    381c:	5f 92       	push	r5
    381e:	6f 92       	push	r6
    3820:	7f 92       	push	r7
    3822:	8f 92       	push	r8
    3824:	9f 92       	push	r9
    3826:	af 92       	push	r10
    3828:	bf 92       	push	r11
    382a:	cf 92       	push	r12
    382c:	df 92       	push	r13
    382e:	ef 92       	push	r14
    3830:	ff 92       	push	r15
    3832:	0f 93       	push	r16
    3834:	1f 93       	push	r17
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	cd b7       	in	r28, 0x3d	; 61
    383c:	de b7       	in	r29, 0x3e	; 62
    383e:	c0 54       	subi	r28, 0x40	; 64
    3840:	d1 09       	sbc	r29, r1
    3842:	0f b6       	in	r0, 0x3f	; 63
    3844:	f8 94       	cli
    3846:	de bf       	out	0x3e, r29	; 62
    3848:	0f be       	out	0x3f, r0	; 63
    384a:	cd bf       	out	0x3d, r28	; 61
    384c:	9d 8f       	std	Y+29, r25	; 0x1d
    384e:	8c 8f       	std	Y+28, r24	; 0x1c
    3850:	7f 8f       	std	Y+31, r23	; 0x1f
    3852:	6e 8f       	std	Y+30, r22	; 0x1e
    3854:	59 a3       	std	Y+33, r21	; 0x21
    3856:	48 a3       	std	Y+32, r20	; 0x20
    3858:	2a a3       	std	Y+34, r18	; 0x22
    385a:	1c a3       	std	Y+36, r17	; 0x24
    385c:	0b a3       	std	Y+35, r16	; 0x23
    385e:	fe a2       	std	Y+38, r15	; 0x26
    3860:	ed a2       	std	Y+37, r14	; 0x25
    3862:	d8 a6       	std	Y+40, r13	; 0x28
    3864:	cf a2       	std	Y+39, r12	; 0x27
	uint8_t bit, currom = 0;
    3866:	1a 82       	std	Y+2, r1	; 0x02
	uint64_t i, junction = 0, rom;
    3868:	1b 86       	std	Y+11, r1	; 0x0b
    386a:	1c 86       	std	Y+12, r1	; 0x0c
    386c:	1d 86       	std	Y+13, r1	; 0x0d
    386e:	1e 86       	std	Y+14, r1	; 0x0e
    3870:	1f 86       	std	Y+15, r1	; 0x0f
    3872:	18 8a       	std	Y+16, r1	; 0x10
    3874:	19 8a       	std	Y+17, r1	; 0x11
    3876:	1a 8a       	std	Y+18, r1	; 0x12
	uint8_t sreg = SREG;
    3878:	8f e5       	ldi	r24, 0x5F	; 95
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	fc 01       	movw	r30, r24
    387e:	80 81       	ld	r24, Z
    3880:	8b 8b       	std	Y+19, r24	; 0x13

	//romcnt is crucial
	if ( romcnt == NULL ) return DS18B20_ERROR_OTHER;
    3882:	8b a1       	ldd	r24, Y+35	; 0x23
    3884:	9c a1       	ldd	r25, Y+36	; 0x24
    3886:	00 97       	sbiw	r24, 0x00	; 0
    3888:	11 f4       	brne	.+4      	; 0x388e <ds18b20search+0x78>
    388a:	84 e0       	ldi	r24, 0x04	; 4
    388c:	17 c2       	rjmp	.+1070   	; 0x3cbc <ds18b20search+0x4a6>

	// 1 loop - 1 thermometer discovered
	do
	{
		// Reset current ROM buffer
		rom = 0;
    388e:	1c 8a       	std	Y+20, r1	; 0x14
    3890:	1d 8a       	std	Y+21, r1	; 0x15
    3892:	1e 8a       	std	Y+22, r1	; 0x16
    3894:	1f 8a       	std	Y+23, r1	; 0x17
    3896:	18 8e       	std	Y+24, r1	; 0x18
    3898:	19 8e       	std	Y+25, r1	; 0x19
    389a:	1a 8e       	std	Y+26, r1	; 0x1a
    389c:	1b 8e       	std	Y+27, r1	; 0x1b

		// Initiate ROM search
		if ( onewireInit( port, direction, portin, mask ) == ONEWIRE_ERROR_COMM )
    389e:	88 a1       	ldd	r24, Y+32	; 0x20
    38a0:	99 a1       	ldd	r25, Y+33	; 0x21
    38a2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    38a4:	7f 8d       	ldd	r23, Y+31	; 0x1f
    38a6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    38a8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    38aa:	2a a1       	ldd	r18, Y+34	; 0x22
    38ac:	ac 01       	movw	r20, r24
    38ae:	cf 01       	movw	r24, r30
    38b0:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <onewireInit>
    38b4:	81 30       	cpi	r24, 0x01	; 1
    38b6:	59 f4       	brne	.+22     	; 0x38ce <ds18b20search+0xb8>
		{
			*romcnt = 0;
    38b8:	8b a1       	ldd	r24, Y+35	; 0x23
    38ba:	9c a1       	ldd	r25, Y+36	; 0x24
    38bc:	fc 01       	movw	r30, r24
    38be:	10 82       	st	Z, r1
			SREG = sreg;
    38c0:	8f e5       	ldi	r24, 0x5F	; 95
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	2b 89       	ldd	r18, Y+19	; 0x13
    38c6:	fc 01       	movw	r30, r24
    38c8:	20 83       	st	Z, r18
			return DS18B20_ERROR_COMM;
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	f7 c1       	rjmp	.+1006   	; 0x3cbc <ds18b20search+0x4a6>
		}
		onewireWrite( port, direction, portin, mask, DS18B20_COMMAND_SEARCH_ROM );
    38ce:	88 a1       	ldd	r24, Y+32	; 0x20
    38d0:	99 a1       	ldd	r25, Y+33	; 0x21
    38d2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    38d4:	7f 8d       	ldd	r23, Y+31	; 0x1f
    38d6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    38d8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    38da:	00 ef       	ldi	r16, 0xF0	; 240
    38dc:	2a a1       	ldd	r18, Y+34	; 0x22
    38de:	ac 01       	movw	r20, r24
    38e0:	cf 01       	movw	r24, r30
    38e2:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <onewireWrite>

		// Access 64 bits of ROM
		for ( i = 1; i; i <<= 1 )
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	8b 83       	std	Y+3, r24	; 0x03
    38ea:	1c 82       	std	Y+4, r1	; 0x04
    38ec:	1d 82       	std	Y+5, r1	; 0x05
    38ee:	1e 82       	std	Y+6, r1	; 0x06
    38f0:	1f 82       	std	Y+7, r1	; 0x07
    38f2:	18 86       	std	Y+8, r1	; 0x08
    38f4:	19 86       	std	Y+9, r1	; 0x09
    38f6:	1a 86       	std	Y+10, r1	; 0x0a
    38f8:	6f c1       	rjmp	.+734    	; 0x3bd8 <ds18b20search+0x3c2>
		{
			//Request two complementary bits from sensors
			bit = 0;
    38fa:	19 82       	std	Y+1, r1	; 0x01
			bit |= onewireReadBit( port, direction, portin, mask );
    38fc:	88 a1       	ldd	r24, Y+32	; 0x20
    38fe:	99 a1       	ldd	r25, Y+33	; 0x21
    3900:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3902:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3904:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3906:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3908:	2a a1       	ldd	r18, Y+34	; 0x22
    390a:	ac 01       	movw	r20, r24
    390c:	cf 01       	movw	r24, r30
    390e:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <onewireReadBit>
    3912:	99 81       	ldd	r25, Y+1	; 0x01
    3914:	89 2b       	or	r24, r25
    3916:	89 83       	std	Y+1, r24	; 0x01
			bit |= onewireReadBit( port, direction, portin, mask ) << 1;
    3918:	88 a1       	ldd	r24, Y+32	; 0x20
    391a:	99 a1       	ldd	r25, Y+33	; 0x21
    391c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    391e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3920:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3922:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3924:	2a a1       	ldd	r18, Y+34	; 0x22
    3926:	ac 01       	movw	r20, r24
    3928:	cf 01       	movw	r24, r30
    392a:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <onewireReadBit>
    392e:	88 2f       	mov	r24, r24
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	88 0f       	add	r24, r24
    3934:	99 1f       	adc	r25, r25
    3936:	98 2f       	mov	r25, r24
    3938:	89 81       	ldd	r24, Y+1	; 0x01
    393a:	89 2b       	or	r24, r25
    393c:	89 83       	std	Y+1, r24	; 0x01

			switch ( bit )
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	88 2f       	mov	r24, r24
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	83 30       	cpi	r24, 0x03	; 3
    3946:	91 05       	cpc	r25, r1
    3948:	34 f4       	brge	.+12     	; 0x3956 <ds18b20search+0x140>
    394a:	81 30       	cpi	r24, 0x01	; 1
    394c:	91 05       	cpc	r25, r1
    394e:	94 f4       	brge	.+36     	; 0x3974 <ds18b20search+0x15e>
    3950:	00 97       	sbiw	r24, 0x00	; 0
    3952:	a1 f0       	breq	.+40     	; 0x397c <ds18b20search+0x166>
    3954:	d2 c0       	rjmp	.+420    	; 0x3afa <ds18b20search+0x2e4>
    3956:	83 30       	cpi	r24, 0x03	; 3
    3958:	91 05       	cpc	r25, r1
    395a:	09 f0       	breq	.+2      	; 0x395e <ds18b20search+0x148>
    395c:	ce c0       	rjmp	.+412    	; 0x3afa <ds18b20search+0x2e4>
			{
				//Received 11 - no sensors connected
				case 3:
					*romcnt = 0; //Null pointer check is at the begining
    395e:	8b a1       	ldd	r24, Y+35	; 0x23
    3960:	9c a1       	ldd	r25, Y+36	; 0x24
    3962:	fc 01       	movw	r30, r24
    3964:	10 82       	st	Z, r1
					SREG = sreg;
    3966:	8f e5       	ldi	r24, 0x5F	; 95
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	2b 89       	ldd	r18, Y+19	; 0x13
    396c:	fc 01       	movw	r30, r24
    396e:	20 83       	st	Z, r18
					return DS18B20_ERROR_COMM;
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	a4 c1       	rjmp	.+840    	; 0x3cbc <ds18b20search+0x4a6>
					break;

				//Received 10 or 01 - ROM bits match
				case 1:
				case 2:
					bit &= 1;
    3974:	89 81       	ldd	r24, Y+1	; 0x01
    3976:	81 70       	andi	r24, 0x01	; 1
    3978:	89 83       	std	Y+1, r24	; 0x01
					break;
    397a:	bf c0       	rjmp	.+382    	; 0x3afa <ds18b20search+0x2e4>
				//Received 00 - ROM bits differ
				case 0:
					// Check if there are older junction bits set
					// If there are older bits set, junction value
					// shall be at least equal to i*2
					if ( junction >= ( i << 1 ) )
    397c:	2b 81       	ldd	r18, Y+3	; 0x03
    397e:	3c 81       	ldd	r19, Y+4	; 0x04
    3980:	4d 81       	ldd	r20, Y+5	; 0x05
    3982:	5e 81       	ldd	r21, Y+6	; 0x06
    3984:	6f 81       	ldd	r22, Y+7	; 0x07
    3986:	78 85       	ldd	r23, Y+8	; 0x08
    3988:	89 85       	ldd	r24, Y+9	; 0x09
    398a:	9a 85       	ldd	r25, Y+10	; 0x0a
    398c:	01 e0       	ldi	r16, 0x01	; 1
    398e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__ashldi3>
    3992:	a2 2e       	mov	r10, r18
    3994:	b3 2e       	mov	r11, r19
    3996:	c4 2e       	mov	r12, r20
    3998:	d5 2e       	mov	r13, r21
    399a:	e6 2e       	mov	r14, r22
    399c:	f7 2e       	mov	r15, r23
    399e:	08 2f       	mov	r16, r24
    39a0:	19 2f       	mov	r17, r25
    39a2:	2b 84       	ldd	r2, Y+11	; 0x0b
    39a4:	3c 84       	ldd	r3, Y+12	; 0x0c
    39a6:	4d 84       	ldd	r4, Y+13	; 0x0d
    39a8:	5e 84       	ldd	r5, Y+14	; 0x0e
    39aa:	6f 84       	ldd	r6, Y+15	; 0x0f
    39ac:	78 88       	ldd	r7, Y+16	; 0x10
    39ae:	89 88       	ldd	r8, Y+17	; 0x11
    39b0:	9a 88       	ldd	r9, Y+18	; 0x12
    39b2:	2a 2d       	mov	r18, r10
    39b4:	3b 2d       	mov	r19, r11
    39b6:	4c 2d       	mov	r20, r12
    39b8:	5d 2d       	mov	r21, r13
    39ba:	6e 2d       	mov	r22, r14
    39bc:	7f 2d       	mov	r23, r15
    39be:	80 2f       	mov	r24, r16
    39c0:	91 2f       	mov	r25, r17
    39c2:	a2 2c       	mov	r10, r2
    39c4:	b3 2c       	mov	r11, r3
    39c6:	c4 2c       	mov	r12, r4
    39c8:	d5 2c       	mov	r13, r5
    39ca:	e6 2c       	mov	r14, r6
    39cc:	f7 2c       	mov	r15, r7
    39ce:	08 2d       	mov	r16, r8
    39d0:	19 2d       	mov	r17, r9
    39d2:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__cmpdi2>
    39d6:	09 f0       	breq	.+2      	; 0x39da <ds18b20search+0x1c4>
    39d8:	c0 f5       	brcc	.+112    	; 0x3a4a <ds18b20search+0x234>
					// if ( junction >= ( 2 << i ) )
					{
						// Send complement of junction bit
						bit = !( junction & i );
    39da:	9b 85       	ldd	r25, Y+11	; 0x0b
    39dc:	8b 81       	ldd	r24, Y+3	; 0x03
    39de:	f9 2f       	mov	r31, r25
    39e0:	f8 23       	and	r31, r24
    39e2:	f9 a7       	std	Y+41, r31	; 0x29
    39e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    39e6:	8c 81       	ldd	r24, Y+4	; 0x04
    39e8:	29 2f       	mov	r18, r25
    39ea:	28 23       	and	r18, r24
    39ec:	2a a7       	std	Y+42, r18	; 0x2a
    39ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    39f0:	8d 81       	ldd	r24, Y+5	; 0x05
    39f2:	e9 2f       	mov	r30, r25
    39f4:	e8 23       	and	r30, r24
    39f6:	eb a7       	std	Y+43, r30	; 0x2b
    39f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fa:	8e 81       	ldd	r24, Y+6	; 0x06
    39fc:	f9 2f       	mov	r31, r25
    39fe:	f8 23       	and	r31, r24
    3a00:	fc a7       	std	Y+44, r31	; 0x2c
    3a02:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a04:	8f 81       	ldd	r24, Y+7	; 0x07
    3a06:	29 2f       	mov	r18, r25
    3a08:	28 23       	and	r18, r24
    3a0a:	2d a7       	std	Y+45, r18	; 0x2d
    3a0c:	98 89       	ldd	r25, Y+16	; 0x10
    3a0e:	88 85       	ldd	r24, Y+8	; 0x08
    3a10:	e9 2f       	mov	r30, r25
    3a12:	e8 23       	and	r30, r24
    3a14:	ee a7       	std	Y+46, r30	; 0x2e
    3a16:	99 89       	ldd	r25, Y+17	; 0x11
    3a18:	89 85       	ldd	r24, Y+9	; 0x09
    3a1a:	f9 2f       	mov	r31, r25
    3a1c:	f8 23       	and	r31, r24
    3a1e:	ff a7       	std	Y+47, r31	; 0x2f
    3a20:	9a 89       	ldd	r25, Y+18	; 0x12
    3a22:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a24:	29 2f       	mov	r18, r25
    3a26:	28 23       	and	r18, r24
    3a28:	28 ab       	std	Y+48, r18	; 0x30
    3a2a:	e1 e0       	ldi	r30, 0x01	; 1
    3a2c:	29 a5       	ldd	r18, Y+41	; 0x29
    3a2e:	3a a5       	ldd	r19, Y+42	; 0x2a
    3a30:	4b a5       	ldd	r20, Y+43	; 0x2b
    3a32:	5c a5       	ldd	r21, Y+44	; 0x2c
    3a34:	6d a5       	ldd	r22, Y+45	; 0x2d
    3a36:	7e a5       	ldd	r23, Y+46	; 0x2e
    3a38:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a3a:	98 a9       	ldd	r25, Y+48	; 0x30
    3a3c:	a0 e0       	ldi	r26, 0x00	; 0
    3a3e:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__cmpdi2_s8>
    3a42:	09 f0       	breq	.+2      	; 0x3a46 <ds18b20search+0x230>
    3a44:	e0 e0       	ldi	r30, 0x00	; 0
    3a46:	e9 83       	std	Y+1, r30	; 0x01
					{
						// Send value of junction bit and toggle it afterwards
						bit = ( junction & i ) != 0;
						junction ^= i;
					}
					break;
    3a48:	57 c0       	rjmp	.+174    	; 0x3af8 <ds18b20search+0x2e2>
						bit = !( junction & i );
					}
					else
					{
						// Send value of junction bit and toggle it afterwards
						bit = ( junction & i ) != 0;
    3a4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4e:	e9 2f       	mov	r30, r25
    3a50:	e8 23       	and	r30, r24
    3a52:	e9 ab       	std	Y+49, r30	; 0x31
    3a54:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a56:	8c 81       	ldd	r24, Y+4	; 0x04
    3a58:	f9 2f       	mov	r31, r25
    3a5a:	f8 23       	and	r31, r24
    3a5c:	fa ab       	std	Y+50, r31	; 0x32
    3a5e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a60:	8d 81       	ldd	r24, Y+5	; 0x05
    3a62:	29 2f       	mov	r18, r25
    3a64:	28 23       	and	r18, r24
    3a66:	2b ab       	std	Y+51, r18	; 0x33
    3a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a6a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a6c:	e9 2f       	mov	r30, r25
    3a6e:	e8 23       	and	r30, r24
    3a70:	ec ab       	std	Y+52, r30	; 0x34
    3a72:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a74:	8f 81       	ldd	r24, Y+7	; 0x07
    3a76:	f9 2f       	mov	r31, r25
    3a78:	f8 23       	and	r31, r24
    3a7a:	fd ab       	std	Y+53, r31	; 0x35
    3a7c:	98 89       	ldd	r25, Y+16	; 0x10
    3a7e:	88 85       	ldd	r24, Y+8	; 0x08
    3a80:	29 2f       	mov	r18, r25
    3a82:	28 23       	and	r18, r24
    3a84:	2e ab       	std	Y+54, r18	; 0x36
    3a86:	99 89       	ldd	r25, Y+17	; 0x11
    3a88:	89 85       	ldd	r24, Y+9	; 0x09
    3a8a:	e9 2f       	mov	r30, r25
    3a8c:	e8 23       	and	r30, r24
    3a8e:	ef ab       	std	Y+55, r30	; 0x37
    3a90:	9a 89       	ldd	r25, Y+18	; 0x12
    3a92:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a94:	f9 2f       	mov	r31, r25
    3a96:	f8 23       	and	r31, r24
    3a98:	f8 af       	std	Y+56, r31	; 0x38
    3a9a:	e1 e0       	ldi	r30, 0x01	; 1
    3a9c:	29 a9       	ldd	r18, Y+49	; 0x31
    3a9e:	3a a9       	ldd	r19, Y+50	; 0x32
    3aa0:	4b a9       	ldd	r20, Y+51	; 0x33
    3aa2:	5c a9       	ldd	r21, Y+52	; 0x34
    3aa4:	6d a9       	ldd	r22, Y+53	; 0x35
    3aa6:	7e a9       	ldd	r23, Y+54	; 0x36
    3aa8:	8f a9       	ldd	r24, Y+55	; 0x37
    3aaa:	98 ad       	ldd	r25, Y+56	; 0x38
    3aac:	a0 e0       	ldi	r26, 0x00	; 0
    3aae:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__cmpdi2_s8>
    3ab2:	09 f4       	brne	.+2      	; 0x3ab6 <ds18b20search+0x2a0>
    3ab4:	e0 e0       	ldi	r30, 0x00	; 0
    3ab6:	e9 83       	std	Y+1, r30	; 0x01
						junction ^= i;
    3ab8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3aba:	8b 81       	ldd	r24, Y+3	; 0x03
    3abc:	89 27       	eor	r24, r25
    3abe:	8b 87       	std	Y+11, r24	; 0x0b
    3ac0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ac4:	89 27       	eor	r24, r25
    3ac6:	8c 87       	std	Y+12, r24	; 0x0c
    3ac8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3aca:	8d 81       	ldd	r24, Y+5	; 0x05
    3acc:	89 27       	eor	r24, r25
    3ace:	8d 87       	std	Y+13, r24	; 0x0d
    3ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ad4:	89 27       	eor	r24, r25
    3ad6:	8e 87       	std	Y+14, r24	; 0x0e
    3ad8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ada:	8f 81       	ldd	r24, Y+7	; 0x07
    3adc:	89 27       	eor	r24, r25
    3ade:	8f 87       	std	Y+15, r24	; 0x0f
    3ae0:	98 89       	ldd	r25, Y+16	; 0x10
    3ae2:	88 85       	ldd	r24, Y+8	; 0x08
    3ae4:	89 27       	eor	r24, r25
    3ae6:	88 8b       	std	Y+16, r24	; 0x10
    3ae8:	99 89       	ldd	r25, Y+17	; 0x11
    3aea:	89 85       	ldd	r24, Y+9	; 0x09
    3aec:	89 27       	eor	r24, r25
    3aee:	89 8b       	std	Y+17, r24	; 0x11
    3af0:	9a 89       	ldd	r25, Y+18	; 0x12
    3af2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3af4:	89 27       	eor	r24, r25
    3af6:	8a 8b       	std	Y+18, r24	; 0x12
					}
					break;
    3af8:	00 00       	nop
			}

			// Send response bit depending on junction status
			// At this point bit is either 0 or 1 and corresponds
			// to the discovered ROM value
			onewireWriteBit( port, direction, portin, mask, bit );
    3afa:	88 a1       	ldd	r24, Y+32	; 0x20
    3afc:	99 a1       	ldd	r25, Y+33	; 0x21
    3afe:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3b00:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3b02:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3b04:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3b06:	09 81       	ldd	r16, Y+1	; 0x01
    3b08:	2a a1       	ldd	r18, Y+34	; 0x22
    3b0a:	ac 01       	movw	r20, r24
    3b0c:	cf 01       	movw	r24, r30
    3b0e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <onewireWriteBit>

			// Set bit in temporary ROM buffer
			rom |= bit ? i : 0;
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
    3b14:	88 23       	and	r24, r24
    3b16:	49 f0       	breq	.+18     	; 0x3b2a <ds18b20search+0x314>
    3b18:	ab 80       	ldd	r10, Y+3	; 0x03
    3b1a:	bc 80       	ldd	r11, Y+4	; 0x04
    3b1c:	cd 80       	ldd	r12, Y+5	; 0x05
    3b1e:	de 80       	ldd	r13, Y+6	; 0x06
    3b20:	ef 80       	ldd	r14, Y+7	; 0x07
    3b22:	f8 84       	ldd	r15, Y+8	; 0x08
    3b24:	09 85       	ldd	r16, Y+9	; 0x09
    3b26:	1a 85       	ldd	r17, Y+10	; 0x0a
    3b28:	08 c0       	rjmp	.+16     	; 0x3b3a <ds18b20search+0x324>
    3b2a:	a1 2c       	mov	r10, r1
    3b2c:	b1 2c       	mov	r11, r1
    3b2e:	c1 2c       	mov	r12, r1
    3b30:	d1 2c       	mov	r13, r1
    3b32:	e1 2c       	mov	r14, r1
    3b34:	f1 2c       	mov	r15, r1
    3b36:	00 e0       	ldi	r16, 0x00	; 0
    3b38:	10 e0       	ldi	r17, 0x00	; 0
    3b3a:	2c 89       	ldd	r18, Y+20	; 0x14
    3b3c:	3d 89       	ldd	r19, Y+21	; 0x15
    3b3e:	4e 89       	ldd	r20, Y+22	; 0x16
    3b40:	5f 89       	ldd	r21, Y+23	; 0x17
    3b42:	68 8d       	ldd	r22, Y+24	; 0x18
    3b44:	79 8d       	ldd	r23, Y+25	; 0x19
    3b46:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b48:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b4a:	ea 2d       	mov	r30, r10
    3b4c:	e2 2b       	or	r30, r18
    3b4e:	e9 af       	std	Y+57, r30	; 0x39
    3b50:	fb 2d       	mov	r31, r11
    3b52:	f3 2b       	or	r31, r19
    3b54:	fa af       	std	Y+58, r31	; 0x3a
    3b56:	ec 2d       	mov	r30, r12
    3b58:	e4 2b       	or	r30, r20
    3b5a:	eb af       	std	Y+59, r30	; 0x3b
    3b5c:	fd 2d       	mov	r31, r13
    3b5e:	f5 2b       	or	r31, r21
    3b60:	fc af       	std	Y+60, r31	; 0x3c
    3b62:	ee 2d       	mov	r30, r14
    3b64:	e6 2b       	or	r30, r22
    3b66:	ed af       	std	Y+61, r30	; 0x3d
    3b68:	ff 2d       	mov	r31, r15
    3b6a:	f7 2b       	or	r31, r23
    3b6c:	fe af       	std	Y+62, r31	; 0x3e
    3b6e:	e0 2f       	mov	r30, r16
    3b70:	e8 2b       	or	r30, r24
    3b72:	ef af       	std	Y+63, r30	; 0x3f
    3b74:	f1 2f       	mov	r31, r17
    3b76:	f9 2b       	or	r31, r25
    3b78:	21 96       	adiw	r28, 0x01	; 1
    3b7a:	ff af       	std	Y+63, r31	; 0x3f
    3b7c:	21 97       	sbiw	r28, 0x01	; 1
    3b7e:	29 ad       	ldd	r18, Y+57	; 0x39
    3b80:	2c 8b       	std	Y+20, r18	; 0x14
    3b82:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b84:	8d 8b       	std	Y+21, r24	; 0x15
    3b86:	eb ad       	ldd	r30, Y+59	; 0x3b
    3b88:	ee 8b       	std	Y+22, r30	; 0x16
    3b8a:	fc ad       	ldd	r31, Y+60	; 0x3c
    3b8c:	ff 8b       	std	Y+23, r31	; 0x17
    3b8e:	2d ad       	ldd	r18, Y+61	; 0x3d
    3b90:	28 8f       	std	Y+24, r18	; 0x18
    3b92:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b94:	89 8f       	std	Y+25, r24	; 0x19
    3b96:	ef ad       	ldd	r30, Y+63	; 0x3f
    3b98:	ea 8f       	std	Y+26, r30	; 0x1a
    3b9a:	21 96       	adiw	r28, 0x01	; 1
    3b9c:	ff ad       	ldd	r31, Y+63	; 0x3f
    3b9e:	21 97       	sbiw	r28, 0x01	; 1
    3ba0:	fb 8f       	std	Y+27, r31	; 0x1b
			return DS18B20_ERROR_COMM;
		}
		onewireWrite( port, direction, portin, mask, DS18B20_COMMAND_SEARCH_ROM );

		// Access 64 bits of ROM
		for ( i = 1; i; i <<= 1 )
    3ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    3ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    3ba6:	4d 81       	ldd	r20, Y+5	; 0x05
    3ba8:	5e 81       	ldd	r21, Y+6	; 0x06
    3baa:	6f 81       	ldd	r22, Y+7	; 0x07
    3bac:	78 85       	ldd	r23, Y+8	; 0x08
    3bae:	89 85       	ldd	r24, Y+9	; 0x09
    3bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb2:	01 e0       	ldi	r16, 0x01	; 1
    3bb4:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__ashldi3>
    3bb8:	a2 2e       	mov	r10, r18
    3bba:	b3 2e       	mov	r11, r19
    3bbc:	c4 2e       	mov	r12, r20
    3bbe:	d5 2e       	mov	r13, r21
    3bc0:	e6 2e       	mov	r14, r22
    3bc2:	f7 2e       	mov	r15, r23
    3bc4:	08 2f       	mov	r16, r24
    3bc6:	19 2f       	mov	r17, r25
    3bc8:	ab 82       	std	Y+3, r10	; 0x03
    3bca:	bc 82       	std	Y+4, r11	; 0x04
    3bcc:	cd 82       	std	Y+5, r12	; 0x05
    3bce:	de 82       	std	Y+6, r13	; 0x06
    3bd0:	ef 82       	std	Y+7, r14	; 0x07
    3bd2:	f8 86       	std	Y+8, r15	; 0x08
    3bd4:	09 87       	std	Y+9, r16	; 0x09
    3bd6:	1a 87       	std	Y+10, r17	; 0x0a
    3bd8:	ab 80       	ldd	r10, Y+3	; 0x03
    3bda:	bc 80       	ldd	r11, Y+4	; 0x04
    3bdc:	cd 80       	ldd	r12, Y+5	; 0x05
    3bde:	de 80       	ldd	r13, Y+6	; 0x06
    3be0:	ef 80       	ldd	r14, Y+7	; 0x07
    3be2:	f8 84       	ldd	r15, Y+8	; 0x08
    3be4:	09 85       	ldd	r16, Y+9	; 0x09
    3be6:	1a 85       	ldd	r17, Y+10	; 0x0a
    3be8:	2a 2d       	mov	r18, r10
    3bea:	3b 2d       	mov	r19, r11
    3bec:	4c 2d       	mov	r20, r12
    3bee:	5d 2d       	mov	r21, r13
    3bf0:	6e 2d       	mov	r22, r14
    3bf2:	7f 2d       	mov	r23, r15
    3bf4:	80 2f       	mov	r24, r16
    3bf6:	91 2f       	mov	r25, r17
    3bf8:	a0 e0       	ldi	r26, 0x00	; 0
    3bfa:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__cmpdi2_s8>
    3bfe:	09 f0       	breq	.+2      	; 0x3c02 <ds18b20search+0x3ec>
    3c00:	7c ce       	rjmp	.-776    	; 0x38fa <ds18b20search+0xe4>
			// Set bit in temporary ROM buffer
			rom |= bit ? i : 0;
		}

		// Copy prepared ROM to its destination
		if ( roms != NULL && ( currom + 1 ) << 3 <= buflen )
    3c02:	8d a1       	ldd	r24, Y+37	; 0x25
    3c04:	9e a1       	ldd	r25, Y+38	; 0x26
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	71 f1       	breq	.+92     	; 0x3c66 <ds18b20search+0x450>
    3c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0c:	88 2f       	mov	r24, r24
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	01 96       	adiw	r24, 0x01	; 1
    3c12:	88 0f       	add	r24, r24
    3c14:	99 1f       	adc	r25, r25
    3c16:	88 0f       	add	r24, r24
    3c18:	99 1f       	adc	r25, r25
    3c1a:	88 0f       	add	r24, r24
    3c1c:	99 1f       	adc	r25, r25
    3c1e:	9c 01       	movw	r18, r24
    3c20:	8f a1       	ldd	r24, Y+39	; 0x27
    3c22:	98 a5       	ldd	r25, Y+40	; 0x28
    3c24:	82 17       	cp	r24, r18
    3c26:	93 07       	cpc	r25, r19
    3c28:	f0 f0       	brcs	.+60     	; 0x3c66 <ds18b20search+0x450>
			memcpy( roms + ( currom << 3 ), &rom, 8 );
    3c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2c:	88 2f       	mov	r24, r24
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	88 0f       	add	r24, r24
    3c32:	99 1f       	adc	r25, r25
    3c34:	88 0f       	add	r24, r24
    3c36:	99 1f       	adc	r25, r25
    3c38:	88 0f       	add	r24, r24
    3c3a:	99 1f       	adc	r25, r25
    3c3c:	2d a1       	ldd	r18, Y+37	; 0x25
    3c3e:	3e a1       	ldd	r19, Y+38	; 0x26
    3c40:	f9 01       	movw	r30, r18
    3c42:	e8 0f       	add	r30, r24
    3c44:	f9 1f       	adc	r31, r25
    3c46:	2c 89       	ldd	r18, Y+20	; 0x14
    3c48:	3d 89       	ldd	r19, Y+21	; 0x15
    3c4a:	4e 89       	ldd	r20, Y+22	; 0x16
    3c4c:	5f 89       	ldd	r21, Y+23	; 0x17
    3c4e:	68 8d       	ldd	r22, Y+24	; 0x18
    3c50:	79 8d       	ldd	r23, Y+25	; 0x19
    3c52:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c54:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c56:	20 83       	st	Z, r18
    3c58:	31 83       	std	Z+1, r19	; 0x01
    3c5a:	42 83       	std	Z+2, r20	; 0x02
    3c5c:	53 83       	std	Z+3, r21	; 0x03
    3c5e:	64 83       	std	Z+4, r22	; 0x04
    3c60:	75 83       	std	Z+5, r23	; 0x05
    3c62:	86 83       	std	Z+6, r24	; 0x06
    3c64:	97 83       	std	Z+7, r25	; 0x07
	}
	while ( ++currom && junction ); // As long as there are junction bits set
    3c66:	8a 81       	ldd	r24, Y+2	; 0x02
    3c68:	8f 5f       	subi	r24, 0xFF	; 255
    3c6a:	8a 83       	std	Y+2, r24	; 0x02
    3c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6e:	88 23       	and	r24, r24
    3c70:	a9 f0       	breq	.+42     	; 0x3c9c <ds18b20search+0x486>
    3c72:	ab 84       	ldd	r10, Y+11	; 0x0b
    3c74:	bc 84       	ldd	r11, Y+12	; 0x0c
    3c76:	cd 84       	ldd	r12, Y+13	; 0x0d
    3c78:	de 84       	ldd	r13, Y+14	; 0x0e
    3c7a:	ef 84       	ldd	r14, Y+15	; 0x0f
    3c7c:	f8 88       	ldd	r15, Y+16	; 0x10
    3c7e:	09 89       	ldd	r16, Y+17	; 0x11
    3c80:	1a 89       	ldd	r17, Y+18	; 0x12
    3c82:	2a 2d       	mov	r18, r10
    3c84:	3b 2d       	mov	r19, r11
    3c86:	4c 2d       	mov	r20, r12
    3c88:	5d 2d       	mov	r21, r13
    3c8a:	6e 2d       	mov	r22, r14
    3c8c:	7f 2d       	mov	r23, r15
    3c8e:	80 2f       	mov	r24, r16
    3c90:	91 2f       	mov	r25, r17
    3c92:	a0 e0       	ldi	r26, 0x00	; 0
    3c94:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__cmpdi2_s8>
    3c98:	09 f0       	breq	.+2      	; 0x3c9c <ds18b20search+0x486>
    3c9a:	f9 cd       	rjmp	.-1038   	; 0x388e <ds18b20search+0x78>

	*romcnt = currom;
    3c9c:	8b a1       	ldd	r24, Y+35	; 0x23
    3c9e:	9c a1       	ldd	r25, Y+36	; 0x24
    3ca0:	2a 81       	ldd	r18, Y+2	; 0x02
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	20 83       	st	Z, r18
	SREG = sreg;
    3ca6:	8f e5       	ldi	r24, 0x5F	; 95
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	2b 89       	ldd	r18, Y+19	; 0x13
    3cac:	fc 01       	movw	r30, r24
    3cae:	20 83       	st	Z, r18
	if ( currom == 0 ) return DS18B20_ERROR_COMM; // Exit because of currom overflow (junction broken?)
    3cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb2:	88 23       	and	r24, r24
    3cb4:	11 f4       	brne	.+4      	; 0x3cba <ds18b20search+0x4a4>
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	01 c0       	rjmp	.+2      	; 0x3cbc <ds18b20search+0x4a6>
	return DS18B20_ERROR_OK;
    3cba:	80 e0       	ldi	r24, 0x00	; 0
}
    3cbc:	c0 5c       	subi	r28, 0xC0	; 192
    3cbe:	df 4f       	sbci	r29, 0xFF	; 255
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	f8 94       	cli
    3cc4:	de bf       	out	0x3e, r29	; 62
    3cc6:	0f be       	out	0x3f, r0	; 63
    3cc8:	cd bf       	out	0x3d, r28	; 61
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	1f 91       	pop	r17
    3cd0:	0f 91       	pop	r16
    3cd2:	ff 90       	pop	r15
    3cd4:	ef 90       	pop	r14
    3cd6:	df 90       	pop	r13
    3cd8:	cf 90       	pop	r12
    3cda:	bf 90       	pop	r11
    3cdc:	af 90       	pop	r10
    3cde:	9f 90       	pop	r9
    3ce0:	8f 90       	pop	r8
    3ce2:	7f 90       	pop	r7
    3ce4:	6f 90       	pop	r6
    3ce6:	5f 90       	pop	r5
    3ce8:	4f 90       	pop	r4
    3cea:	3f 90       	pop	r3
    3cec:	2f 90       	pop	r2
    3cee:	08 95       	ret

00003cf0 <__udivmodsi4>:
    3cf0:	a1 e2       	ldi	r26, 0x21	; 33
    3cf2:	1a 2e       	mov	r1, r26
    3cf4:	aa 1b       	sub	r26, r26
    3cf6:	bb 1b       	sub	r27, r27
    3cf8:	fd 01       	movw	r30, r26
    3cfa:	0d c0       	rjmp	.+26     	; 0x3d16 <__udivmodsi4_ep>

00003cfc <__udivmodsi4_loop>:
    3cfc:	aa 1f       	adc	r26, r26
    3cfe:	bb 1f       	adc	r27, r27
    3d00:	ee 1f       	adc	r30, r30
    3d02:	ff 1f       	adc	r31, r31
    3d04:	a2 17       	cp	r26, r18
    3d06:	b3 07       	cpc	r27, r19
    3d08:	e4 07       	cpc	r30, r20
    3d0a:	f5 07       	cpc	r31, r21
    3d0c:	20 f0       	brcs	.+8      	; 0x3d16 <__udivmodsi4_ep>
    3d0e:	a2 1b       	sub	r26, r18
    3d10:	b3 0b       	sbc	r27, r19
    3d12:	e4 0b       	sbc	r30, r20
    3d14:	f5 0b       	sbc	r31, r21

00003d16 <__udivmodsi4_ep>:
    3d16:	66 1f       	adc	r22, r22
    3d18:	77 1f       	adc	r23, r23
    3d1a:	88 1f       	adc	r24, r24
    3d1c:	99 1f       	adc	r25, r25
    3d1e:	1a 94       	dec	r1
    3d20:	69 f7       	brne	.-38     	; 0x3cfc <__udivmodsi4_loop>
    3d22:	60 95       	com	r22
    3d24:	70 95       	com	r23
    3d26:	80 95       	com	r24
    3d28:	90 95       	com	r25
    3d2a:	9b 01       	movw	r18, r22
    3d2c:	ac 01       	movw	r20, r24
    3d2e:	bd 01       	movw	r22, r26
    3d30:	cf 01       	movw	r24, r30
    3d32:	08 95       	ret

00003d34 <__ashldi3>:
    3d34:	0f 93       	push	r16
    3d36:	08 30       	cpi	r16, 0x08	; 8
    3d38:	90 f0       	brcs	.+36     	; 0x3d5e <__ashldi3+0x2a>
    3d3a:	98 2f       	mov	r25, r24
    3d3c:	87 2f       	mov	r24, r23
    3d3e:	76 2f       	mov	r23, r22
    3d40:	65 2f       	mov	r22, r21
    3d42:	54 2f       	mov	r21, r20
    3d44:	43 2f       	mov	r20, r19
    3d46:	32 2f       	mov	r19, r18
    3d48:	22 27       	eor	r18, r18
    3d4a:	08 50       	subi	r16, 0x08	; 8
    3d4c:	f4 cf       	rjmp	.-24     	; 0x3d36 <__ashldi3+0x2>
    3d4e:	22 0f       	add	r18, r18
    3d50:	33 1f       	adc	r19, r19
    3d52:	44 1f       	adc	r20, r20
    3d54:	55 1f       	adc	r21, r21
    3d56:	66 1f       	adc	r22, r22
    3d58:	77 1f       	adc	r23, r23
    3d5a:	88 1f       	adc	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	0a 95       	dec	r16
    3d60:	b2 f7       	brpl	.-20     	; 0x3d4e <__ashldi3+0x1a>
    3d62:	0f 91       	pop	r16
    3d64:	08 95       	ret

00003d66 <__cmpdi2>:
    3d66:	2a 15       	cp	r18, r10
    3d68:	3b 05       	cpc	r19, r11
    3d6a:	4c 05       	cpc	r20, r12
    3d6c:	5d 05       	cpc	r21, r13
    3d6e:	6e 05       	cpc	r22, r14
    3d70:	7f 05       	cpc	r23, r15
    3d72:	80 07       	cpc	r24, r16
    3d74:	91 07       	cpc	r25, r17
    3d76:	08 95       	ret

00003d78 <__cmpdi2_s8>:
    3d78:	00 24       	eor	r0, r0
    3d7a:	a7 fd       	sbrc	r26, 7
    3d7c:	00 94       	com	r0
    3d7e:	2a 17       	cp	r18, r26
    3d80:	30 05       	cpc	r19, r0
    3d82:	40 05       	cpc	r20, r0
    3d84:	50 05       	cpc	r21, r0
    3d86:	60 05       	cpc	r22, r0
    3d88:	70 05       	cpc	r23, r0
    3d8a:	80 05       	cpc	r24, r0
    3d8c:	90 05       	cpc	r25, r0
    3d8e:	08 95       	ret

00003d90 <__subsf3>:
    3d90:	50 58       	subi	r21, 0x80	; 128

00003d92 <__addsf3>:
    3d92:	bb 27       	eor	r27, r27
    3d94:	aa 27       	eor	r26, r26
    3d96:	0e d0       	rcall	.+28     	; 0x3db4 <__addsf3x>
    3d98:	33 c1       	rjmp	.+614    	; 0x4000 <__fp_round>
    3d9a:	24 d1       	rcall	.+584    	; 0x3fe4 <__fp_pscA>
    3d9c:	30 f0       	brcs	.+12     	; 0x3daa <__addsf3+0x18>
    3d9e:	29 d1       	rcall	.+594    	; 0x3ff2 <__fp_pscB>
    3da0:	20 f0       	brcs	.+8      	; 0x3daa <__addsf3+0x18>
    3da2:	31 f4       	brne	.+12     	; 0x3db0 <__addsf3+0x1e>
    3da4:	9f 3f       	cpi	r25, 0xFF	; 255
    3da6:	11 f4       	brne	.+4      	; 0x3dac <__addsf3+0x1a>
    3da8:	1e f4       	brtc	.+6      	; 0x3db0 <__addsf3+0x1e>
    3daa:	19 c1       	rjmp	.+562    	; 0x3fde <__fp_nan>
    3dac:	0e f4       	brtc	.+2      	; 0x3db0 <__addsf3+0x1e>
    3dae:	e0 95       	com	r30
    3db0:	e7 fb       	bst	r30, 7
    3db2:	0f c1       	rjmp	.+542    	; 0x3fd2 <__fp_inf>

00003db4 <__addsf3x>:
    3db4:	e9 2f       	mov	r30, r25
    3db6:	35 d1       	rcall	.+618    	; 0x4022 <__fp_split3>
    3db8:	80 f3       	brcs	.-32     	; 0x3d9a <__addsf3+0x8>
    3dba:	ba 17       	cp	r27, r26
    3dbc:	62 07       	cpc	r22, r18
    3dbe:	73 07       	cpc	r23, r19
    3dc0:	84 07       	cpc	r24, r20
    3dc2:	95 07       	cpc	r25, r21
    3dc4:	18 f0       	brcs	.+6      	; 0x3dcc <__addsf3x+0x18>
    3dc6:	71 f4       	brne	.+28     	; 0x3de4 <__addsf3x+0x30>
    3dc8:	9e f5       	brtc	.+102    	; 0x3e30 <__addsf3x+0x7c>
    3dca:	4d c1       	rjmp	.+666    	; 0x4066 <__fp_zero>
    3dcc:	0e f4       	brtc	.+2      	; 0x3dd0 <__addsf3x+0x1c>
    3dce:	e0 95       	com	r30
    3dd0:	0b 2e       	mov	r0, r27
    3dd2:	ba 2f       	mov	r27, r26
    3dd4:	a0 2d       	mov	r26, r0
    3dd6:	0b 01       	movw	r0, r22
    3dd8:	b9 01       	movw	r22, r18
    3dda:	90 01       	movw	r18, r0
    3ddc:	0c 01       	movw	r0, r24
    3dde:	ca 01       	movw	r24, r20
    3de0:	a0 01       	movw	r20, r0
    3de2:	11 24       	eor	r1, r1
    3de4:	ff 27       	eor	r31, r31
    3de6:	59 1b       	sub	r21, r25
    3de8:	99 f0       	breq	.+38     	; 0x3e10 <__addsf3x+0x5c>
    3dea:	59 3f       	cpi	r21, 0xF9	; 249
    3dec:	50 f4       	brcc	.+20     	; 0x3e02 <__addsf3x+0x4e>
    3dee:	50 3e       	cpi	r21, 0xE0	; 224
    3df0:	68 f1       	brcs	.+90     	; 0x3e4c <__addsf3x+0x98>
    3df2:	1a 16       	cp	r1, r26
    3df4:	f0 40       	sbci	r31, 0x00	; 0
    3df6:	a2 2f       	mov	r26, r18
    3df8:	23 2f       	mov	r18, r19
    3dfa:	34 2f       	mov	r19, r20
    3dfc:	44 27       	eor	r20, r20
    3dfe:	58 5f       	subi	r21, 0xF8	; 248
    3e00:	f3 cf       	rjmp	.-26     	; 0x3de8 <__addsf3x+0x34>
    3e02:	46 95       	lsr	r20
    3e04:	37 95       	ror	r19
    3e06:	27 95       	ror	r18
    3e08:	a7 95       	ror	r26
    3e0a:	f0 40       	sbci	r31, 0x00	; 0
    3e0c:	53 95       	inc	r21
    3e0e:	c9 f7       	brne	.-14     	; 0x3e02 <__addsf3x+0x4e>
    3e10:	7e f4       	brtc	.+30     	; 0x3e30 <__addsf3x+0x7c>
    3e12:	1f 16       	cp	r1, r31
    3e14:	ba 0b       	sbc	r27, r26
    3e16:	62 0b       	sbc	r22, r18
    3e18:	73 0b       	sbc	r23, r19
    3e1a:	84 0b       	sbc	r24, r20
    3e1c:	ba f0       	brmi	.+46     	; 0x3e4c <__addsf3x+0x98>
    3e1e:	91 50       	subi	r25, 0x01	; 1
    3e20:	a1 f0       	breq	.+40     	; 0x3e4a <__addsf3x+0x96>
    3e22:	ff 0f       	add	r31, r31
    3e24:	bb 1f       	adc	r27, r27
    3e26:	66 1f       	adc	r22, r22
    3e28:	77 1f       	adc	r23, r23
    3e2a:	88 1f       	adc	r24, r24
    3e2c:	c2 f7       	brpl	.-16     	; 0x3e1e <__addsf3x+0x6a>
    3e2e:	0e c0       	rjmp	.+28     	; 0x3e4c <__addsf3x+0x98>
    3e30:	ba 0f       	add	r27, r26
    3e32:	62 1f       	adc	r22, r18
    3e34:	73 1f       	adc	r23, r19
    3e36:	84 1f       	adc	r24, r20
    3e38:	48 f4       	brcc	.+18     	; 0x3e4c <__addsf3x+0x98>
    3e3a:	87 95       	ror	r24
    3e3c:	77 95       	ror	r23
    3e3e:	67 95       	ror	r22
    3e40:	b7 95       	ror	r27
    3e42:	f7 95       	ror	r31
    3e44:	9e 3f       	cpi	r25, 0xFE	; 254
    3e46:	08 f0       	brcs	.+2      	; 0x3e4a <__addsf3x+0x96>
    3e48:	b3 cf       	rjmp	.-154    	; 0x3db0 <__addsf3+0x1e>
    3e4a:	93 95       	inc	r25
    3e4c:	88 0f       	add	r24, r24
    3e4e:	08 f0       	brcs	.+2      	; 0x3e52 <__addsf3x+0x9e>
    3e50:	99 27       	eor	r25, r25
    3e52:	ee 0f       	add	r30, r30
    3e54:	97 95       	ror	r25
    3e56:	87 95       	ror	r24
    3e58:	08 95       	ret

00003e5a <__cmpsf2>:
    3e5a:	97 d0       	rcall	.+302    	; 0x3f8a <__fp_cmp>
    3e5c:	08 f4       	brcc	.+2      	; 0x3e60 <__cmpsf2+0x6>
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	08 95       	ret

00003e62 <__divsf3>:
    3e62:	0c d0       	rcall	.+24     	; 0x3e7c <__divsf3x>
    3e64:	cd c0       	rjmp	.+410    	; 0x4000 <__fp_round>
    3e66:	c5 d0       	rcall	.+394    	; 0x3ff2 <__fp_pscB>
    3e68:	40 f0       	brcs	.+16     	; 0x3e7a <__divsf3+0x18>
    3e6a:	bc d0       	rcall	.+376    	; 0x3fe4 <__fp_pscA>
    3e6c:	30 f0       	brcs	.+12     	; 0x3e7a <__divsf3+0x18>
    3e6e:	21 f4       	brne	.+8      	; 0x3e78 <__divsf3+0x16>
    3e70:	5f 3f       	cpi	r21, 0xFF	; 255
    3e72:	19 f0       	breq	.+6      	; 0x3e7a <__divsf3+0x18>
    3e74:	ae c0       	rjmp	.+348    	; 0x3fd2 <__fp_inf>
    3e76:	51 11       	cpse	r21, r1
    3e78:	f7 c0       	rjmp	.+494    	; 0x4068 <__fp_szero>
    3e7a:	b1 c0       	rjmp	.+354    	; 0x3fde <__fp_nan>

00003e7c <__divsf3x>:
    3e7c:	d2 d0       	rcall	.+420    	; 0x4022 <__fp_split3>
    3e7e:	98 f3       	brcs	.-26     	; 0x3e66 <__divsf3+0x4>

00003e80 <__divsf3_pse>:
    3e80:	99 23       	and	r25, r25
    3e82:	c9 f3       	breq	.-14     	; 0x3e76 <__divsf3+0x14>
    3e84:	55 23       	and	r21, r21
    3e86:	b1 f3       	breq	.-20     	; 0x3e74 <__divsf3+0x12>
    3e88:	95 1b       	sub	r25, r21
    3e8a:	55 0b       	sbc	r21, r21
    3e8c:	bb 27       	eor	r27, r27
    3e8e:	aa 27       	eor	r26, r26
    3e90:	62 17       	cp	r22, r18
    3e92:	73 07       	cpc	r23, r19
    3e94:	84 07       	cpc	r24, r20
    3e96:	38 f0       	brcs	.+14     	; 0x3ea6 <__divsf3_pse+0x26>
    3e98:	9f 5f       	subi	r25, 0xFF	; 255
    3e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e9c:	22 0f       	add	r18, r18
    3e9e:	33 1f       	adc	r19, r19
    3ea0:	44 1f       	adc	r20, r20
    3ea2:	aa 1f       	adc	r26, r26
    3ea4:	a9 f3       	breq	.-22     	; 0x3e90 <__divsf3_pse+0x10>
    3ea6:	33 d0       	rcall	.+102    	; 0x3f0e <__divsf3_pse+0x8e>
    3ea8:	0e 2e       	mov	r0, r30
    3eaa:	3a f0       	brmi	.+14     	; 0x3eba <__divsf3_pse+0x3a>
    3eac:	e0 e8       	ldi	r30, 0x80	; 128
    3eae:	30 d0       	rcall	.+96     	; 0x3f10 <__divsf3_pse+0x90>
    3eb0:	91 50       	subi	r25, 0x01	; 1
    3eb2:	50 40       	sbci	r21, 0x00	; 0
    3eb4:	e6 95       	lsr	r30
    3eb6:	00 1c       	adc	r0, r0
    3eb8:	ca f7       	brpl	.-14     	; 0x3eac <__divsf3_pse+0x2c>
    3eba:	29 d0       	rcall	.+82     	; 0x3f0e <__divsf3_pse+0x8e>
    3ebc:	fe 2f       	mov	r31, r30
    3ebe:	27 d0       	rcall	.+78     	; 0x3f0e <__divsf3_pse+0x8e>
    3ec0:	66 0f       	add	r22, r22
    3ec2:	77 1f       	adc	r23, r23
    3ec4:	88 1f       	adc	r24, r24
    3ec6:	bb 1f       	adc	r27, r27
    3ec8:	26 17       	cp	r18, r22
    3eca:	37 07       	cpc	r19, r23
    3ecc:	48 07       	cpc	r20, r24
    3ece:	ab 07       	cpc	r26, r27
    3ed0:	b0 e8       	ldi	r27, 0x80	; 128
    3ed2:	09 f0       	breq	.+2      	; 0x3ed6 <__divsf3_pse+0x56>
    3ed4:	bb 0b       	sbc	r27, r27
    3ed6:	80 2d       	mov	r24, r0
    3ed8:	bf 01       	movw	r22, r30
    3eda:	ff 27       	eor	r31, r31
    3edc:	93 58       	subi	r25, 0x83	; 131
    3ede:	5f 4f       	sbci	r21, 0xFF	; 255
    3ee0:	2a f0       	brmi	.+10     	; 0x3eec <__divsf3_pse+0x6c>
    3ee2:	9e 3f       	cpi	r25, 0xFE	; 254
    3ee4:	51 05       	cpc	r21, r1
    3ee6:	68 f0       	brcs	.+26     	; 0x3f02 <__divsf3_pse+0x82>
    3ee8:	74 c0       	rjmp	.+232    	; 0x3fd2 <__fp_inf>
    3eea:	be c0       	rjmp	.+380    	; 0x4068 <__fp_szero>
    3eec:	5f 3f       	cpi	r21, 0xFF	; 255
    3eee:	ec f3       	brlt	.-6      	; 0x3eea <__divsf3_pse+0x6a>
    3ef0:	98 3e       	cpi	r25, 0xE8	; 232
    3ef2:	dc f3       	brlt	.-10     	; 0x3eea <__divsf3_pse+0x6a>
    3ef4:	86 95       	lsr	r24
    3ef6:	77 95       	ror	r23
    3ef8:	67 95       	ror	r22
    3efa:	b7 95       	ror	r27
    3efc:	f7 95       	ror	r31
    3efe:	9f 5f       	subi	r25, 0xFF	; 255
    3f00:	c9 f7       	brne	.-14     	; 0x3ef4 <__divsf3_pse+0x74>
    3f02:	88 0f       	add	r24, r24
    3f04:	91 1d       	adc	r25, r1
    3f06:	96 95       	lsr	r25
    3f08:	87 95       	ror	r24
    3f0a:	97 f9       	bld	r25, 7
    3f0c:	08 95       	ret
    3f0e:	e1 e0       	ldi	r30, 0x01	; 1
    3f10:	66 0f       	add	r22, r22
    3f12:	77 1f       	adc	r23, r23
    3f14:	88 1f       	adc	r24, r24
    3f16:	bb 1f       	adc	r27, r27
    3f18:	62 17       	cp	r22, r18
    3f1a:	73 07       	cpc	r23, r19
    3f1c:	84 07       	cpc	r24, r20
    3f1e:	ba 07       	cpc	r27, r26
    3f20:	20 f0       	brcs	.+8      	; 0x3f2a <__divsf3_pse+0xaa>
    3f22:	62 1b       	sub	r22, r18
    3f24:	73 0b       	sbc	r23, r19
    3f26:	84 0b       	sbc	r24, r20
    3f28:	ba 0b       	sbc	r27, r26
    3f2a:	ee 1f       	adc	r30, r30
    3f2c:	88 f7       	brcc	.-30     	; 0x3f10 <__divsf3_pse+0x90>
    3f2e:	e0 95       	com	r30
    3f30:	08 95       	ret

00003f32 <__fixunssfsi>:
    3f32:	7f d0       	rcall	.+254    	; 0x4032 <__fp_splitA>
    3f34:	88 f0       	brcs	.+34     	; 0x3f58 <__fixunssfsi+0x26>
    3f36:	9f 57       	subi	r25, 0x7F	; 127
    3f38:	90 f0       	brcs	.+36     	; 0x3f5e <__fixunssfsi+0x2c>
    3f3a:	b9 2f       	mov	r27, r25
    3f3c:	99 27       	eor	r25, r25
    3f3e:	b7 51       	subi	r27, 0x17	; 23
    3f40:	a0 f0       	brcs	.+40     	; 0x3f6a <__fixunssfsi+0x38>
    3f42:	d1 f0       	breq	.+52     	; 0x3f78 <__fixunssfsi+0x46>
    3f44:	66 0f       	add	r22, r22
    3f46:	77 1f       	adc	r23, r23
    3f48:	88 1f       	adc	r24, r24
    3f4a:	99 1f       	adc	r25, r25
    3f4c:	1a f0       	brmi	.+6      	; 0x3f54 <__fixunssfsi+0x22>
    3f4e:	ba 95       	dec	r27
    3f50:	c9 f7       	brne	.-14     	; 0x3f44 <__fixunssfsi+0x12>
    3f52:	12 c0       	rjmp	.+36     	; 0x3f78 <__fixunssfsi+0x46>
    3f54:	b1 30       	cpi	r27, 0x01	; 1
    3f56:	81 f0       	breq	.+32     	; 0x3f78 <__fixunssfsi+0x46>
    3f58:	86 d0       	rcall	.+268    	; 0x4066 <__fp_zero>
    3f5a:	b1 e0       	ldi	r27, 0x01	; 1
    3f5c:	08 95       	ret
    3f5e:	83 c0       	rjmp	.+262    	; 0x4066 <__fp_zero>
    3f60:	67 2f       	mov	r22, r23
    3f62:	78 2f       	mov	r23, r24
    3f64:	88 27       	eor	r24, r24
    3f66:	b8 5f       	subi	r27, 0xF8	; 248
    3f68:	39 f0       	breq	.+14     	; 0x3f78 <__fixunssfsi+0x46>
    3f6a:	b9 3f       	cpi	r27, 0xF9	; 249
    3f6c:	cc f3       	brlt	.-14     	; 0x3f60 <__fixunssfsi+0x2e>
    3f6e:	86 95       	lsr	r24
    3f70:	77 95       	ror	r23
    3f72:	67 95       	ror	r22
    3f74:	b3 95       	inc	r27
    3f76:	d9 f7       	brne	.-10     	; 0x3f6e <__fixunssfsi+0x3c>
    3f78:	3e f4       	brtc	.+14     	; 0x3f88 <__fixunssfsi+0x56>
    3f7a:	90 95       	com	r25
    3f7c:	80 95       	com	r24
    3f7e:	70 95       	com	r23
    3f80:	61 95       	neg	r22
    3f82:	7f 4f       	sbci	r23, 0xFF	; 255
    3f84:	8f 4f       	sbci	r24, 0xFF	; 255
    3f86:	9f 4f       	sbci	r25, 0xFF	; 255
    3f88:	08 95       	ret

00003f8a <__fp_cmp>:
    3f8a:	99 0f       	add	r25, r25
    3f8c:	00 08       	sbc	r0, r0
    3f8e:	55 0f       	add	r21, r21
    3f90:	aa 0b       	sbc	r26, r26
    3f92:	e0 e8       	ldi	r30, 0x80	; 128
    3f94:	fe ef       	ldi	r31, 0xFE	; 254
    3f96:	16 16       	cp	r1, r22
    3f98:	17 06       	cpc	r1, r23
    3f9a:	e8 07       	cpc	r30, r24
    3f9c:	f9 07       	cpc	r31, r25
    3f9e:	c0 f0       	brcs	.+48     	; 0x3fd0 <__fp_cmp+0x46>
    3fa0:	12 16       	cp	r1, r18
    3fa2:	13 06       	cpc	r1, r19
    3fa4:	e4 07       	cpc	r30, r20
    3fa6:	f5 07       	cpc	r31, r21
    3fa8:	98 f0       	brcs	.+38     	; 0x3fd0 <__fp_cmp+0x46>
    3faa:	62 1b       	sub	r22, r18
    3fac:	73 0b       	sbc	r23, r19
    3fae:	84 0b       	sbc	r24, r20
    3fb0:	95 0b       	sbc	r25, r21
    3fb2:	39 f4       	brne	.+14     	; 0x3fc2 <__fp_cmp+0x38>
    3fb4:	0a 26       	eor	r0, r26
    3fb6:	61 f0       	breq	.+24     	; 0x3fd0 <__fp_cmp+0x46>
    3fb8:	23 2b       	or	r18, r19
    3fba:	24 2b       	or	r18, r20
    3fbc:	25 2b       	or	r18, r21
    3fbe:	21 f4       	brne	.+8      	; 0x3fc8 <__fp_cmp+0x3e>
    3fc0:	08 95       	ret
    3fc2:	0a 26       	eor	r0, r26
    3fc4:	09 f4       	brne	.+2      	; 0x3fc8 <__fp_cmp+0x3e>
    3fc6:	a1 40       	sbci	r26, 0x01	; 1
    3fc8:	a6 95       	lsr	r26
    3fca:	8f ef       	ldi	r24, 0xFF	; 255
    3fcc:	81 1d       	adc	r24, r1
    3fce:	81 1d       	adc	r24, r1
    3fd0:	08 95       	ret

00003fd2 <__fp_inf>:
    3fd2:	97 f9       	bld	r25, 7
    3fd4:	9f 67       	ori	r25, 0x7F	; 127
    3fd6:	80 e8       	ldi	r24, 0x80	; 128
    3fd8:	70 e0       	ldi	r23, 0x00	; 0
    3fda:	60 e0       	ldi	r22, 0x00	; 0
    3fdc:	08 95       	ret

00003fde <__fp_nan>:
    3fde:	9f ef       	ldi	r25, 0xFF	; 255
    3fe0:	80 ec       	ldi	r24, 0xC0	; 192
    3fe2:	08 95       	ret

00003fe4 <__fp_pscA>:
    3fe4:	00 24       	eor	r0, r0
    3fe6:	0a 94       	dec	r0
    3fe8:	16 16       	cp	r1, r22
    3fea:	17 06       	cpc	r1, r23
    3fec:	18 06       	cpc	r1, r24
    3fee:	09 06       	cpc	r0, r25
    3ff0:	08 95       	ret

00003ff2 <__fp_pscB>:
    3ff2:	00 24       	eor	r0, r0
    3ff4:	0a 94       	dec	r0
    3ff6:	12 16       	cp	r1, r18
    3ff8:	13 06       	cpc	r1, r19
    3ffa:	14 06       	cpc	r1, r20
    3ffc:	05 06       	cpc	r0, r21
    3ffe:	08 95       	ret

00004000 <__fp_round>:
    4000:	09 2e       	mov	r0, r25
    4002:	03 94       	inc	r0
    4004:	00 0c       	add	r0, r0
    4006:	11 f4       	brne	.+4      	; 0x400c <__fp_round+0xc>
    4008:	88 23       	and	r24, r24
    400a:	52 f0       	brmi	.+20     	; 0x4020 <__fp_round+0x20>
    400c:	bb 0f       	add	r27, r27
    400e:	40 f4       	brcc	.+16     	; 0x4020 <__fp_round+0x20>
    4010:	bf 2b       	or	r27, r31
    4012:	11 f4       	brne	.+4      	; 0x4018 <__fp_round+0x18>
    4014:	60 ff       	sbrs	r22, 0
    4016:	04 c0       	rjmp	.+8      	; 0x4020 <__fp_round+0x20>
    4018:	6f 5f       	subi	r22, 0xFF	; 255
    401a:	7f 4f       	sbci	r23, 0xFF	; 255
    401c:	8f 4f       	sbci	r24, 0xFF	; 255
    401e:	9f 4f       	sbci	r25, 0xFF	; 255
    4020:	08 95       	ret

00004022 <__fp_split3>:
    4022:	57 fd       	sbrc	r21, 7
    4024:	90 58       	subi	r25, 0x80	; 128
    4026:	44 0f       	add	r20, r20
    4028:	55 1f       	adc	r21, r21
    402a:	59 f0       	breq	.+22     	; 0x4042 <__fp_splitA+0x10>
    402c:	5f 3f       	cpi	r21, 0xFF	; 255
    402e:	71 f0       	breq	.+28     	; 0x404c <__fp_splitA+0x1a>
    4030:	47 95       	ror	r20

00004032 <__fp_splitA>:
    4032:	88 0f       	add	r24, r24
    4034:	97 fb       	bst	r25, 7
    4036:	99 1f       	adc	r25, r25
    4038:	61 f0       	breq	.+24     	; 0x4052 <__fp_splitA+0x20>
    403a:	9f 3f       	cpi	r25, 0xFF	; 255
    403c:	79 f0       	breq	.+30     	; 0x405c <__fp_splitA+0x2a>
    403e:	87 95       	ror	r24
    4040:	08 95       	ret
    4042:	12 16       	cp	r1, r18
    4044:	13 06       	cpc	r1, r19
    4046:	14 06       	cpc	r1, r20
    4048:	55 1f       	adc	r21, r21
    404a:	f2 cf       	rjmp	.-28     	; 0x4030 <__fp_split3+0xe>
    404c:	46 95       	lsr	r20
    404e:	f1 df       	rcall	.-30     	; 0x4032 <__fp_splitA>
    4050:	08 c0       	rjmp	.+16     	; 0x4062 <__fp_splitA+0x30>
    4052:	16 16       	cp	r1, r22
    4054:	17 06       	cpc	r1, r23
    4056:	18 06       	cpc	r1, r24
    4058:	99 1f       	adc	r25, r25
    405a:	f1 cf       	rjmp	.-30     	; 0x403e <__fp_splitA+0xc>
    405c:	86 95       	lsr	r24
    405e:	71 05       	cpc	r23, r1
    4060:	61 05       	cpc	r22, r1
    4062:	08 94       	sec
    4064:	08 95       	ret

00004066 <__fp_zero>:
    4066:	e8 94       	clt

00004068 <__fp_szero>:
    4068:	bb 27       	eor	r27, r27
    406a:	66 27       	eor	r22, r22
    406c:	77 27       	eor	r23, r23
    406e:	cb 01       	movw	r24, r22
    4070:	97 f9       	bld	r25, 7
    4072:	08 95       	ret

00004074 <__gesf2>:
    4074:	8a df       	rcall	.-236    	; 0x3f8a <__fp_cmp>
    4076:	08 f4       	brcc	.+2      	; 0x407a <__gesf2+0x6>
    4078:	8f ef       	ldi	r24, 0xFF	; 255
    407a:	08 95       	ret

0000407c <__mulsf3>:
    407c:	0b d0       	rcall	.+22     	; 0x4094 <__mulsf3x>
    407e:	c0 cf       	rjmp	.-128    	; 0x4000 <__fp_round>
    4080:	b1 df       	rcall	.-158    	; 0x3fe4 <__fp_pscA>
    4082:	28 f0       	brcs	.+10     	; 0x408e <__mulsf3+0x12>
    4084:	b6 df       	rcall	.-148    	; 0x3ff2 <__fp_pscB>
    4086:	18 f0       	brcs	.+6      	; 0x408e <__mulsf3+0x12>
    4088:	95 23       	and	r25, r21
    408a:	09 f0       	breq	.+2      	; 0x408e <__mulsf3+0x12>
    408c:	a2 cf       	rjmp	.-188    	; 0x3fd2 <__fp_inf>
    408e:	a7 cf       	rjmp	.-178    	; 0x3fde <__fp_nan>
    4090:	11 24       	eor	r1, r1
    4092:	ea cf       	rjmp	.-44     	; 0x4068 <__fp_szero>

00004094 <__mulsf3x>:
    4094:	c6 df       	rcall	.-116    	; 0x4022 <__fp_split3>
    4096:	a0 f3       	brcs	.-24     	; 0x4080 <__mulsf3+0x4>

00004098 <__mulsf3_pse>:
    4098:	95 9f       	mul	r25, r21
    409a:	d1 f3       	breq	.-12     	; 0x4090 <__mulsf3+0x14>
    409c:	95 0f       	add	r25, r21
    409e:	50 e0       	ldi	r21, 0x00	; 0
    40a0:	55 1f       	adc	r21, r21
    40a2:	62 9f       	mul	r22, r18
    40a4:	f0 01       	movw	r30, r0
    40a6:	72 9f       	mul	r23, r18
    40a8:	bb 27       	eor	r27, r27
    40aa:	f0 0d       	add	r31, r0
    40ac:	b1 1d       	adc	r27, r1
    40ae:	63 9f       	mul	r22, r19
    40b0:	aa 27       	eor	r26, r26
    40b2:	f0 0d       	add	r31, r0
    40b4:	b1 1d       	adc	r27, r1
    40b6:	aa 1f       	adc	r26, r26
    40b8:	64 9f       	mul	r22, r20
    40ba:	66 27       	eor	r22, r22
    40bc:	b0 0d       	add	r27, r0
    40be:	a1 1d       	adc	r26, r1
    40c0:	66 1f       	adc	r22, r22
    40c2:	82 9f       	mul	r24, r18
    40c4:	22 27       	eor	r18, r18
    40c6:	b0 0d       	add	r27, r0
    40c8:	a1 1d       	adc	r26, r1
    40ca:	62 1f       	adc	r22, r18
    40cc:	73 9f       	mul	r23, r19
    40ce:	b0 0d       	add	r27, r0
    40d0:	a1 1d       	adc	r26, r1
    40d2:	62 1f       	adc	r22, r18
    40d4:	83 9f       	mul	r24, r19
    40d6:	a0 0d       	add	r26, r0
    40d8:	61 1d       	adc	r22, r1
    40da:	22 1f       	adc	r18, r18
    40dc:	74 9f       	mul	r23, r20
    40de:	33 27       	eor	r19, r19
    40e0:	a0 0d       	add	r26, r0
    40e2:	61 1d       	adc	r22, r1
    40e4:	23 1f       	adc	r18, r19
    40e6:	84 9f       	mul	r24, r20
    40e8:	60 0d       	add	r22, r0
    40ea:	21 1d       	adc	r18, r1
    40ec:	82 2f       	mov	r24, r18
    40ee:	76 2f       	mov	r23, r22
    40f0:	6a 2f       	mov	r22, r26
    40f2:	11 24       	eor	r1, r1
    40f4:	9f 57       	subi	r25, 0x7F	; 127
    40f6:	50 40       	sbci	r21, 0x00	; 0
    40f8:	8a f0       	brmi	.+34     	; 0x411c <__mulsf3_pse+0x84>
    40fa:	e1 f0       	breq	.+56     	; 0x4134 <__mulsf3_pse+0x9c>
    40fc:	88 23       	and	r24, r24
    40fe:	4a f0       	brmi	.+18     	; 0x4112 <__mulsf3_pse+0x7a>
    4100:	ee 0f       	add	r30, r30
    4102:	ff 1f       	adc	r31, r31
    4104:	bb 1f       	adc	r27, r27
    4106:	66 1f       	adc	r22, r22
    4108:	77 1f       	adc	r23, r23
    410a:	88 1f       	adc	r24, r24
    410c:	91 50       	subi	r25, 0x01	; 1
    410e:	50 40       	sbci	r21, 0x00	; 0
    4110:	a9 f7       	brne	.-22     	; 0x40fc <__mulsf3_pse+0x64>
    4112:	9e 3f       	cpi	r25, 0xFE	; 254
    4114:	51 05       	cpc	r21, r1
    4116:	70 f0       	brcs	.+28     	; 0x4134 <__mulsf3_pse+0x9c>
    4118:	5c cf       	rjmp	.-328    	; 0x3fd2 <__fp_inf>
    411a:	a6 cf       	rjmp	.-180    	; 0x4068 <__fp_szero>
    411c:	5f 3f       	cpi	r21, 0xFF	; 255
    411e:	ec f3       	brlt	.-6      	; 0x411a <__mulsf3_pse+0x82>
    4120:	98 3e       	cpi	r25, 0xE8	; 232
    4122:	dc f3       	brlt	.-10     	; 0x411a <__mulsf3_pse+0x82>
    4124:	86 95       	lsr	r24
    4126:	77 95       	ror	r23
    4128:	67 95       	ror	r22
    412a:	b7 95       	ror	r27
    412c:	f7 95       	ror	r31
    412e:	e7 95       	ror	r30
    4130:	9f 5f       	subi	r25, 0xFF	; 255
    4132:	c1 f7       	brne	.-16     	; 0x4124 <__mulsf3_pse+0x8c>
    4134:	fe 2b       	or	r31, r30
    4136:	88 0f       	add	r24, r24
    4138:	91 1d       	adc	r25, r1
    413a:	96 95       	lsr	r25
    413c:	87 95       	ror	r24
    413e:	97 f9       	bld	r25, 7
    4140:	08 95       	ret

00004142 <malloc>:
    4142:	cf 93       	push	r28
    4144:	df 93       	push	r29
    4146:	82 30       	cpi	r24, 0x02	; 2
    4148:	91 05       	cpc	r25, r1
    414a:	10 f4       	brcc	.+4      	; 0x4150 <malloc+0xe>
    414c:	82 e0       	ldi	r24, 0x02	; 2
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	e0 91 56 01 	lds	r30, 0x0156
    4154:	f0 91 57 01 	lds	r31, 0x0157
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	a0 e0       	ldi	r26, 0x00	; 0
    415e:	b0 e0       	ldi	r27, 0x00	; 0
    4160:	30 97       	sbiw	r30, 0x00	; 0
    4162:	39 f1       	breq	.+78     	; 0x41b2 <malloc+0x70>
    4164:	40 81       	ld	r20, Z
    4166:	51 81       	ldd	r21, Z+1	; 0x01
    4168:	48 17       	cp	r20, r24
    416a:	59 07       	cpc	r21, r25
    416c:	b8 f0       	brcs	.+46     	; 0x419c <malloc+0x5a>
    416e:	48 17       	cp	r20, r24
    4170:	59 07       	cpc	r21, r25
    4172:	71 f4       	brne	.+28     	; 0x4190 <malloc+0x4e>
    4174:	82 81       	ldd	r24, Z+2	; 0x02
    4176:	93 81       	ldd	r25, Z+3	; 0x03
    4178:	10 97       	sbiw	r26, 0x00	; 0
    417a:	29 f0       	breq	.+10     	; 0x4186 <malloc+0x44>
    417c:	13 96       	adiw	r26, 0x03	; 3
    417e:	9c 93       	st	X, r25
    4180:	8e 93       	st	-X, r24
    4182:	12 97       	sbiw	r26, 0x02	; 2
    4184:	2c c0       	rjmp	.+88     	; 0x41de <malloc+0x9c>
    4186:	90 93 57 01 	sts	0x0157, r25
    418a:	80 93 56 01 	sts	0x0156, r24
    418e:	27 c0       	rjmp	.+78     	; 0x41de <malloc+0x9c>
    4190:	21 15       	cp	r18, r1
    4192:	31 05       	cpc	r19, r1
    4194:	31 f0       	breq	.+12     	; 0x41a2 <malloc+0x60>
    4196:	42 17       	cp	r20, r18
    4198:	53 07       	cpc	r21, r19
    419a:	18 f0       	brcs	.+6      	; 0x41a2 <malloc+0x60>
    419c:	a9 01       	movw	r20, r18
    419e:	db 01       	movw	r26, r22
    41a0:	01 c0       	rjmp	.+2      	; 0x41a4 <malloc+0x62>
    41a2:	ef 01       	movw	r28, r30
    41a4:	9a 01       	movw	r18, r20
    41a6:	bd 01       	movw	r22, r26
    41a8:	df 01       	movw	r26, r30
    41aa:	02 80       	ldd	r0, Z+2	; 0x02
    41ac:	f3 81       	ldd	r31, Z+3	; 0x03
    41ae:	e0 2d       	mov	r30, r0
    41b0:	d7 cf       	rjmp	.-82     	; 0x4160 <malloc+0x1e>
    41b2:	21 15       	cp	r18, r1
    41b4:	31 05       	cpc	r19, r1
    41b6:	f9 f0       	breq	.+62     	; 0x41f6 <malloc+0xb4>
    41b8:	28 1b       	sub	r18, r24
    41ba:	39 0b       	sbc	r19, r25
    41bc:	24 30       	cpi	r18, 0x04	; 4
    41be:	31 05       	cpc	r19, r1
    41c0:	80 f4       	brcc	.+32     	; 0x41e2 <malloc+0xa0>
    41c2:	8a 81       	ldd	r24, Y+2	; 0x02
    41c4:	9b 81       	ldd	r25, Y+3	; 0x03
    41c6:	61 15       	cp	r22, r1
    41c8:	71 05       	cpc	r23, r1
    41ca:	21 f0       	breq	.+8      	; 0x41d4 <malloc+0x92>
    41cc:	fb 01       	movw	r30, r22
    41ce:	93 83       	std	Z+3, r25	; 0x03
    41d0:	82 83       	std	Z+2, r24	; 0x02
    41d2:	04 c0       	rjmp	.+8      	; 0x41dc <malloc+0x9a>
    41d4:	90 93 57 01 	sts	0x0157, r25
    41d8:	80 93 56 01 	sts	0x0156, r24
    41dc:	fe 01       	movw	r30, r28
    41de:	32 96       	adiw	r30, 0x02	; 2
    41e0:	44 c0       	rjmp	.+136    	; 0x426a <malloc+0x128>
    41e2:	fe 01       	movw	r30, r28
    41e4:	e2 0f       	add	r30, r18
    41e6:	f3 1f       	adc	r31, r19
    41e8:	81 93       	st	Z+, r24
    41ea:	91 93       	st	Z+, r25
    41ec:	22 50       	subi	r18, 0x02	; 2
    41ee:	31 09       	sbc	r19, r1
    41f0:	39 83       	std	Y+1, r19	; 0x01
    41f2:	28 83       	st	Y, r18
    41f4:	3a c0       	rjmp	.+116    	; 0x426a <malloc+0x128>
    41f6:	20 91 54 01 	lds	r18, 0x0154
    41fa:	30 91 55 01 	lds	r19, 0x0155
    41fe:	23 2b       	or	r18, r19
    4200:	41 f4       	brne	.+16     	; 0x4212 <malloc+0xd0>
    4202:	20 91 02 01 	lds	r18, 0x0102
    4206:	30 91 03 01 	lds	r19, 0x0103
    420a:	30 93 55 01 	sts	0x0155, r19
    420e:	20 93 54 01 	sts	0x0154, r18
    4212:	20 91 00 01 	lds	r18, 0x0100
    4216:	30 91 01 01 	lds	r19, 0x0101
    421a:	21 15       	cp	r18, r1
    421c:	31 05       	cpc	r19, r1
    421e:	41 f4       	brne	.+16     	; 0x4230 <malloc+0xee>
    4220:	2d b7       	in	r18, 0x3d	; 61
    4222:	3e b7       	in	r19, 0x3e	; 62
    4224:	40 91 04 01 	lds	r20, 0x0104
    4228:	50 91 05 01 	lds	r21, 0x0105
    422c:	24 1b       	sub	r18, r20
    422e:	35 0b       	sbc	r19, r21
    4230:	e0 91 54 01 	lds	r30, 0x0154
    4234:	f0 91 55 01 	lds	r31, 0x0155
    4238:	e2 17       	cp	r30, r18
    423a:	f3 07       	cpc	r31, r19
    423c:	a0 f4       	brcc	.+40     	; 0x4266 <malloc+0x124>
    423e:	2e 1b       	sub	r18, r30
    4240:	3f 0b       	sbc	r19, r31
    4242:	28 17       	cp	r18, r24
    4244:	39 07       	cpc	r19, r25
    4246:	78 f0       	brcs	.+30     	; 0x4266 <malloc+0x124>
    4248:	ac 01       	movw	r20, r24
    424a:	4e 5f       	subi	r20, 0xFE	; 254
    424c:	5f 4f       	sbci	r21, 0xFF	; 255
    424e:	24 17       	cp	r18, r20
    4250:	35 07       	cpc	r19, r21
    4252:	48 f0       	brcs	.+18     	; 0x4266 <malloc+0x124>
    4254:	4e 0f       	add	r20, r30
    4256:	5f 1f       	adc	r21, r31
    4258:	50 93 55 01 	sts	0x0155, r21
    425c:	40 93 54 01 	sts	0x0154, r20
    4260:	81 93       	st	Z+, r24
    4262:	91 93       	st	Z+, r25
    4264:	02 c0       	rjmp	.+4      	; 0x426a <malloc+0x128>
    4266:	e0 e0       	ldi	r30, 0x00	; 0
    4268:	f0 e0       	ldi	r31, 0x00	; 0
    426a:	cf 01       	movw	r24, r30
    426c:	df 91       	pop	r29
    426e:	cf 91       	pop	r28
    4270:	08 95       	ret

00004272 <free>:
    4272:	cf 93       	push	r28
    4274:	df 93       	push	r29
    4276:	00 97       	sbiw	r24, 0x00	; 0
    4278:	09 f4       	brne	.+2      	; 0x427c <free+0xa>
    427a:	87 c0       	rjmp	.+270    	; 0x438a <free+0x118>
    427c:	fc 01       	movw	r30, r24
    427e:	32 97       	sbiw	r30, 0x02	; 2
    4280:	13 82       	std	Z+3, r1	; 0x03
    4282:	12 82       	std	Z+2, r1	; 0x02
    4284:	c0 91 56 01 	lds	r28, 0x0156
    4288:	d0 91 57 01 	lds	r29, 0x0157
    428c:	20 97       	sbiw	r28, 0x00	; 0
    428e:	81 f4       	brne	.+32     	; 0x42b0 <free+0x3e>
    4290:	20 81       	ld	r18, Z
    4292:	31 81       	ldd	r19, Z+1	; 0x01
    4294:	28 0f       	add	r18, r24
    4296:	39 1f       	adc	r19, r25
    4298:	80 91 54 01 	lds	r24, 0x0154
    429c:	90 91 55 01 	lds	r25, 0x0155
    42a0:	82 17       	cp	r24, r18
    42a2:	93 07       	cpc	r25, r19
    42a4:	79 f5       	brne	.+94     	; 0x4304 <free+0x92>
    42a6:	f0 93 55 01 	sts	0x0155, r31
    42aa:	e0 93 54 01 	sts	0x0154, r30
    42ae:	6d c0       	rjmp	.+218    	; 0x438a <free+0x118>
    42b0:	de 01       	movw	r26, r28
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	ae 17       	cp	r26, r30
    42b8:	bf 07       	cpc	r27, r31
    42ba:	50 f4       	brcc	.+20     	; 0x42d0 <free+0x5e>
    42bc:	12 96       	adiw	r26, 0x02	; 2
    42be:	4d 91       	ld	r20, X+
    42c0:	5c 91       	ld	r21, X
    42c2:	13 97       	sbiw	r26, 0x03	; 3
    42c4:	9d 01       	movw	r18, r26
    42c6:	41 15       	cp	r20, r1
    42c8:	51 05       	cpc	r21, r1
    42ca:	09 f1       	breq	.+66     	; 0x430e <free+0x9c>
    42cc:	da 01       	movw	r26, r20
    42ce:	f3 cf       	rjmp	.-26     	; 0x42b6 <free+0x44>
    42d0:	b3 83       	std	Z+3, r27	; 0x03
    42d2:	a2 83       	std	Z+2, r26	; 0x02
    42d4:	40 81       	ld	r20, Z
    42d6:	51 81       	ldd	r21, Z+1	; 0x01
    42d8:	84 0f       	add	r24, r20
    42da:	95 1f       	adc	r25, r21
    42dc:	8a 17       	cp	r24, r26
    42de:	9b 07       	cpc	r25, r27
    42e0:	71 f4       	brne	.+28     	; 0x42fe <free+0x8c>
    42e2:	8d 91       	ld	r24, X+
    42e4:	9c 91       	ld	r25, X
    42e6:	11 97       	sbiw	r26, 0x01	; 1
    42e8:	84 0f       	add	r24, r20
    42ea:	95 1f       	adc	r25, r21
    42ec:	02 96       	adiw	r24, 0x02	; 2
    42ee:	91 83       	std	Z+1, r25	; 0x01
    42f0:	80 83       	st	Z, r24
    42f2:	12 96       	adiw	r26, 0x02	; 2
    42f4:	8d 91       	ld	r24, X+
    42f6:	9c 91       	ld	r25, X
    42f8:	13 97       	sbiw	r26, 0x03	; 3
    42fa:	93 83       	std	Z+3, r25	; 0x03
    42fc:	82 83       	std	Z+2, r24	; 0x02
    42fe:	21 15       	cp	r18, r1
    4300:	31 05       	cpc	r19, r1
    4302:	29 f4       	brne	.+10     	; 0x430e <free+0x9c>
    4304:	f0 93 57 01 	sts	0x0157, r31
    4308:	e0 93 56 01 	sts	0x0156, r30
    430c:	3e c0       	rjmp	.+124    	; 0x438a <free+0x118>
    430e:	d9 01       	movw	r26, r18
    4310:	13 96       	adiw	r26, 0x03	; 3
    4312:	fc 93       	st	X, r31
    4314:	ee 93       	st	-X, r30
    4316:	12 97       	sbiw	r26, 0x02	; 2
    4318:	4d 91       	ld	r20, X+
    431a:	5d 91       	ld	r21, X+
    431c:	a4 0f       	add	r26, r20
    431e:	b5 1f       	adc	r27, r21
    4320:	ea 17       	cp	r30, r26
    4322:	fb 07       	cpc	r31, r27
    4324:	79 f4       	brne	.+30     	; 0x4344 <free+0xd2>
    4326:	80 81       	ld	r24, Z
    4328:	91 81       	ldd	r25, Z+1	; 0x01
    432a:	84 0f       	add	r24, r20
    432c:	95 1f       	adc	r25, r21
    432e:	02 96       	adiw	r24, 0x02	; 2
    4330:	d9 01       	movw	r26, r18
    4332:	11 96       	adiw	r26, 0x01	; 1
    4334:	9c 93       	st	X, r25
    4336:	8e 93       	st	-X, r24
    4338:	82 81       	ldd	r24, Z+2	; 0x02
    433a:	93 81       	ldd	r25, Z+3	; 0x03
    433c:	13 96       	adiw	r26, 0x03	; 3
    433e:	9c 93       	st	X, r25
    4340:	8e 93       	st	-X, r24
    4342:	12 97       	sbiw	r26, 0x02	; 2
    4344:	e0 e0       	ldi	r30, 0x00	; 0
    4346:	f0 e0       	ldi	r31, 0x00	; 0
    4348:	8a 81       	ldd	r24, Y+2	; 0x02
    434a:	9b 81       	ldd	r25, Y+3	; 0x03
    434c:	00 97       	sbiw	r24, 0x00	; 0
    434e:	19 f0       	breq	.+6      	; 0x4356 <free+0xe4>
    4350:	fe 01       	movw	r30, r28
    4352:	ec 01       	movw	r28, r24
    4354:	f9 cf       	rjmp	.-14     	; 0x4348 <free+0xd6>
    4356:	ce 01       	movw	r24, r28
    4358:	02 96       	adiw	r24, 0x02	; 2
    435a:	28 81       	ld	r18, Y
    435c:	39 81       	ldd	r19, Y+1	; 0x01
    435e:	82 0f       	add	r24, r18
    4360:	93 1f       	adc	r25, r19
    4362:	20 91 54 01 	lds	r18, 0x0154
    4366:	30 91 55 01 	lds	r19, 0x0155
    436a:	28 17       	cp	r18, r24
    436c:	39 07       	cpc	r19, r25
    436e:	69 f4       	brne	.+26     	; 0x438a <free+0x118>
    4370:	30 97       	sbiw	r30, 0x00	; 0
    4372:	29 f4       	brne	.+10     	; 0x437e <free+0x10c>
    4374:	10 92 57 01 	sts	0x0157, r1
    4378:	10 92 56 01 	sts	0x0156, r1
    437c:	02 c0       	rjmp	.+4      	; 0x4382 <free+0x110>
    437e:	13 82       	std	Z+3, r1	; 0x03
    4380:	12 82       	std	Z+2, r1	; 0x02
    4382:	d0 93 55 01 	sts	0x0155, r29
    4386:	c0 93 54 01 	sts	0x0154, r28
    438a:	df 91       	pop	r29
    438c:	cf 91       	pop	r28
    438e:	08 95       	ret

00004390 <memcpy>:
    4390:	fb 01       	movw	r30, r22
    4392:	dc 01       	movw	r26, r24
    4394:	02 c0       	rjmp	.+4      	; 0x439a <memcpy+0xa>
    4396:	01 90       	ld	r0, Z+
    4398:	0d 92       	st	X+, r0
    439a:	41 50       	subi	r20, 0x01	; 1
    439c:	50 40       	sbci	r21, 0x00	; 0
    439e:	d8 f7       	brcc	.-10     	; 0x4396 <memcpy+0x6>
    43a0:	08 95       	ret

000043a2 <memset>:
    43a2:	dc 01       	movw	r26, r24
    43a4:	01 c0       	rjmp	.+2      	; 0x43a8 <memset+0x6>
    43a6:	6d 93       	st	X+, r22
    43a8:	41 50       	subi	r20, 0x01	; 1
    43aa:	50 40       	sbci	r21, 0x00	; 0
    43ac:	e0 f7       	brcc	.-8      	; 0x43a6 <memset+0x4>
    43ae:	08 95       	ret

000043b0 <strlen>:
    43b0:	fc 01       	movw	r30, r24
    43b2:	01 90       	ld	r0, Z+
    43b4:	00 20       	and	r0, r0
    43b6:	e9 f7       	brne	.-6      	; 0x43b2 <strlen+0x2>
    43b8:	80 95       	com	r24
    43ba:	90 95       	com	r25
    43bc:	8e 0f       	add	r24, r30
    43be:	9f 1f       	adc	r25, r31
    43c0:	08 95       	ret

000043c2 <itoa>:
    43c2:	45 32       	cpi	r20, 0x25	; 37
    43c4:	51 05       	cpc	r21, r1
    43c6:	20 f4       	brcc	.+8      	; 0x43d0 <itoa+0xe>
    43c8:	42 30       	cpi	r20, 0x02	; 2
    43ca:	10 f0       	brcs	.+4      	; 0x43d0 <itoa+0xe>
    43cc:	0c 94 ec 21 	jmp	0x43d8	; 0x43d8 <__itoa_ncheck>
    43d0:	fb 01       	movw	r30, r22
    43d2:	10 82       	st	Z, r1
    43d4:	cb 01       	movw	r24, r22
    43d6:	08 95       	ret

000043d8 <__itoa_ncheck>:
    43d8:	bb 27       	eor	r27, r27
    43da:	4a 30       	cpi	r20, 0x0A	; 10
    43dc:	31 f4       	brne	.+12     	; 0x43ea <__itoa_ncheck+0x12>
    43de:	99 23       	and	r25, r25
    43e0:	22 f4       	brpl	.+8      	; 0x43ea <__itoa_ncheck+0x12>
    43e2:	bd e2       	ldi	r27, 0x2D	; 45
    43e4:	90 95       	com	r25
    43e6:	81 95       	neg	r24
    43e8:	9f 4f       	sbci	r25, 0xFF	; 255
    43ea:	0c 94 f8 21 	jmp	0x43f0	; 0x43f0 <__utoa_common>

000043ee <__utoa_ncheck>:
    43ee:	bb 27       	eor	r27, r27

000043f0 <__utoa_common>:
    43f0:	fb 01       	movw	r30, r22
    43f2:	55 27       	eor	r21, r21
    43f4:	aa 27       	eor	r26, r26
    43f6:	88 0f       	add	r24, r24
    43f8:	99 1f       	adc	r25, r25
    43fa:	aa 1f       	adc	r26, r26
    43fc:	a4 17       	cp	r26, r20
    43fe:	10 f0       	brcs	.+4      	; 0x4404 <__utoa_common+0x14>
    4400:	a4 1b       	sub	r26, r20
    4402:	83 95       	inc	r24
    4404:	50 51       	subi	r21, 0x10	; 16
    4406:	b9 f7       	brne	.-18     	; 0x43f6 <__utoa_common+0x6>
    4408:	a0 5d       	subi	r26, 0xD0	; 208
    440a:	aa 33       	cpi	r26, 0x3A	; 58
    440c:	08 f0       	brcs	.+2      	; 0x4410 <__utoa_common+0x20>
    440e:	a9 5d       	subi	r26, 0xD9	; 217
    4410:	a1 93       	st	Z+, r26
    4412:	00 97       	sbiw	r24, 0x00	; 0
    4414:	79 f7       	brne	.-34     	; 0x43f4 <__utoa_common+0x4>
    4416:	b1 11       	cpse	r27, r1
    4418:	b1 93       	st	Z+, r27
    441a:	11 92       	st	Z+, r1
    441c:	cb 01       	movw	r24, r22
    441e:	0c 94 11 22 	jmp	0x4422	; 0x4422 <strrev>

00004422 <strrev>:
    4422:	dc 01       	movw	r26, r24
    4424:	fc 01       	movw	r30, r24
    4426:	67 2f       	mov	r22, r23
    4428:	71 91       	ld	r23, Z+
    442a:	77 23       	and	r23, r23
    442c:	e1 f7       	brne	.-8      	; 0x4426 <strrev+0x4>
    442e:	32 97       	sbiw	r30, 0x02	; 2
    4430:	04 c0       	rjmp	.+8      	; 0x443a <strrev+0x18>
    4432:	7c 91       	ld	r23, X
    4434:	6d 93       	st	X+, r22
    4436:	70 83       	st	Z, r23
    4438:	62 91       	ld	r22, -Z
    443a:	ae 17       	cp	r26, r30
    443c:	bf 07       	cpc	r27, r31
    443e:	c8 f3       	brcs	.-14     	; 0x4432 <strrev+0x10>
    4440:	08 95       	ret

00004442 <_exit>:
    4442:	f8 94       	cli

00004444 <__stop_program>:
    4444:	ff cf       	rjmp	.-2      	; 0x4444 <__stop_program>
